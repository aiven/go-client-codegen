// Code generated by Aiven. DO NOT EDIT.

package account

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

type Handler interface {
	// AccountAttachPaymentMethod attach payment method for account
	// POST /v1/account/{account_id}/payment_methods
	// https://api.aiven.io/doc/#tag/Account/operation/AccountAttachPaymentMethod
	AccountAttachPaymentMethod(ctx context.Context, accountId string, in *AccountAttachPaymentMethodIn) (*AccountAttachPaymentMethodOut, error)

	// AccountBillingGroupList list account billing groups
	// GET /v1/account/{account_id}/billing-group
	// https://api.aiven.io/doc/#tag/Account/operation/AccountBillingGroupList
	AccountBillingGroupList(ctx context.Context, accountId string) ([]AccountBillingGroupOut, error)

	// AccountCreate create a new account
	// POST /v1/account
	// https://api.aiven.io/doc/#tag/Account/operation/AccountCreate
	AccountCreate(ctx context.Context, in *AccountCreateIn) (*AccountCreateOut, error)

	// AccountDelete delete empty account
	// DELETE /v1/account/{account_id}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountDelete
	AccountDelete(ctx context.Context, accountId string) error

	// AccountEventList list account events
	// GET /v1/account/{account_id}/events
	// https://api.aiven.io/doc/#tag/Account/operation/AccountEventList
	AccountEventList(ctx context.Context, accountId string) ([]EventOut, error)

	// AccountGet get account details
	// GET /v1/account/{account_id}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountGet
	AccountGet(ctx context.Context, accountId string) (*AccountGetOut, error)

	// AccountList list accounts you have access to
	// GET /v1/account
	// https://api.aiven.io/doc/#tag/Account/operation/AccountList
	AccountList(ctx context.Context) ([]AccountOut, error)

	// AccountMove move an existing organization unitself
	// PUT /v1/account/{account_id}/parent_account
	// https://api.aiven.io/doc/#tag/Account/operation/AccountMove
	AccountMove(ctx context.Context, accountId string, in *AccountMoveIn) (*AccountMoveOut, error)

	// AccountPaymentMethodDelete delete credit card attached to the account as a payment method
	// DELETE /v1/account/{account_id}/payment_method/{card_id}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountPaymentMethodDelete
	AccountPaymentMethodDelete(ctx context.Context, accountId string, cardId string) error

	// AccountPaymentMethodsList list credit cards attached as a payment method to the account
	// GET /v1/account/{account_id}/payment_methods
	// https://api.aiven.io/doc/#tag/Account/operation/AccountPaymentMethodsList
	AccountPaymentMethodsList(ctx context.Context, accountId string) ([]CardOut, error)

	// AccountProjectsList list projects belonging to account
	// GET /v1/account/{account_id}/projects
	// https://api.aiven.io/doc/#tag/Account/operation/AccountProjectsList
	AccountProjectsList(ctx context.Context, accountId string) (*AccountProjectsListOut, error)

	// AccountUpdate update existing account
	// PUT /v1/account/{account_id}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountUpdate
	AccountUpdate(ctx context.Context, accountId string, in *AccountUpdateIn) (*AccountUpdateOut, error)

	// AccountUserProjectsList list projects associated with this account that user has access to
	// GET /v1/account/{account_id}/user/{user_id}/projects
	// https://api.aiven.io/doc/#tag/Account/operation/AccountUserProjectsList
	AccountUserProjectsList(ctx context.Context, accountId string, userId string) ([]UserProjectOut, error)

	// AccountUsersSearch list/search users who are members of any team on this account
	// POST /v1/account/{account_id}/users/search
	// https://api.aiven.io/doc/#tag/Account/operation/AccountUsersSearch
	AccountUsersSearch(ctx context.Context, accountId string, in *AccountUsersSearchIn) ([]UserOut, error)
}

func NewHandler(doer doer) AccountHandler {
	return AccountHandler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type AccountHandler struct {
	doer doer
}

func (h *AccountHandler) AccountAttachPaymentMethod(ctx context.Context, accountId string, in *AccountAttachPaymentMethodIn) (*AccountAttachPaymentMethodOut, error) {
	path := fmt.Sprintf("/v1/account/%s/payment_methods", accountId)
	b, err := h.doer.Do(ctx, "AccountAttachPaymentMethod", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(accountAttachPaymentMethodOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.Card, nil
}
func (h *AccountHandler) AccountBillingGroupList(ctx context.Context, accountId string) ([]AccountBillingGroupOut, error) {
	path := fmt.Sprintf("/v1/account/%s/billing-group", accountId)
	b, err := h.doer.Do(ctx, "AccountBillingGroupList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(accountBillingGroupListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.AccountBillingGroups, nil
}
func (h *AccountHandler) AccountCreate(ctx context.Context, in *AccountCreateIn) (*AccountCreateOut, error) {
	path := fmt.Sprintf("/v1/account")
	b, err := h.doer.Do(ctx, "AccountCreate", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(accountCreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.Account, nil
}
func (h *AccountHandler) AccountDelete(ctx context.Context, accountId string) error {
	path := fmt.Sprintf("/v1/account/%s", accountId)
	_, err := h.doer.Do(ctx, "AccountDelete", "DELETE", path, nil)
	return err
}
func (h *AccountHandler) AccountEventList(ctx context.Context, accountId string) ([]EventOut, error) {
	path := fmt.Sprintf("/v1/account/%s/events", accountId)
	b, err := h.doer.Do(ctx, "AccountEventList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(accountEventListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Events, nil
}
func (h *AccountHandler) AccountGet(ctx context.Context, accountId string) (*AccountGetOut, error) {
	path := fmt.Sprintf("/v1/account/%s", accountId)
	b, err := h.doer.Do(ctx, "AccountGet", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(accountGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.Account, nil
}
func (h *AccountHandler) AccountList(ctx context.Context) ([]AccountOut, error) {
	path := fmt.Sprintf("/v1/account")
	b, err := h.doer.Do(ctx, "AccountList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(accountListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Accounts, nil
}
func (h *AccountHandler) AccountMove(ctx context.Context, accountId string, in *AccountMoveIn) (*AccountMoveOut, error) {
	path := fmt.Sprintf("/v1/account/%s/parent_account", accountId)
	b, err := h.doer.Do(ctx, "AccountMove", "PUT", path, in)
	if err != nil {
		return nil, err
	}
	out := new(accountMoveOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.Account, nil
}
func (h *AccountHandler) AccountPaymentMethodDelete(ctx context.Context, accountId string, cardId string) error {
	path := fmt.Sprintf("/v1/account/%s/payment_method/%s", accountId, cardId)
	_, err := h.doer.Do(ctx, "AccountPaymentMethodDelete", "DELETE", path, nil)
	return err
}
func (h *AccountHandler) AccountPaymentMethodsList(ctx context.Context, accountId string) ([]CardOut, error) {
	path := fmt.Sprintf("/v1/account/%s/payment_methods", accountId)
	b, err := h.doer.Do(ctx, "AccountPaymentMethodsList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(accountPaymentMethodsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Cards, nil
}
func (h *AccountHandler) AccountProjectsList(ctx context.Context, accountId string) (*AccountProjectsListOut, error) {
	path := fmt.Sprintf("/v1/account/%s/projects", accountId)
	b, err := h.doer.Do(ctx, "AccountProjectsList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(AccountProjectsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *AccountHandler) AccountUpdate(ctx context.Context, accountId string, in *AccountUpdateIn) (*AccountUpdateOut, error) {
	path := fmt.Sprintf("/v1/account/%s", accountId)
	b, err := h.doer.Do(ctx, "AccountUpdate", "PUT", path, in)
	if err != nil {
		return nil, err
	}
	out := new(accountUpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.Account, nil
}
func (h *AccountHandler) AccountUserProjectsList(ctx context.Context, accountId string, userId string) ([]UserProjectOut, error) {
	path := fmt.Sprintf("/v1/account/%s/user/%s/projects", accountId, userId)
	b, err := h.doer.Do(ctx, "AccountUserProjectsList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(accountUserProjectsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.UserProjects, nil
}
func (h *AccountHandler) AccountUsersSearch(ctx context.Context, accountId string, in *AccountUsersSearchIn) ([]UserOut, error) {
	path := fmt.Sprintf("/v1/account/%s/users/search", accountId)
	b, err := h.doer.Do(ctx, "AccountUsersSearch", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(accountUsersSearchOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Users, nil
}

type AccessSourceType string

const (
	AccessSourceTypeDescendantMembership   AccessSourceType = "descendant_membership"
	AccessSourceTypeOrganizationMembership AccessSourceType = "organization_membership"
	AccessSourceTypeProjectMembership      AccessSourceType = "project_membership"
	AccessSourceTypeTeamMembership         AccessSourceType = "team_membership"
)

func AccessSourceTypeChoices() []string {
	return []string{"descendant_membership", "organization_membership", "project_membership", "team_membership"}
}

type AccountAttachPaymentMethodIn struct {
	PaymentMethodId string `json:"payment_method_id"`
}
type AccountAttachPaymentMethodOut struct {
	Brand          string   `json:"brand"`
	CardId         string   `json:"card_id"`
	Country        string   `json:"country"`
	CountryCode    string   `json:"country_code"`
	ExpMonth       int      `json:"exp_month"`
	ExpYear        int      `json:"exp_year"`
	Last4          string   `json:"last4"`
	Name           string   `json:"name"`
	OrganizationId string   `json:"organization_id,omitempty"`
	Projects       []string `json:"projects"`
}
type AccountBillingGroupOut struct {
	AccountId             string              `json:"account_id"`
	AccountName           string              `json:"account_name"`
	AddressLines          []string            `json:"address_lines"`
	BillingAddress        string              `json:"billing_address,omitempty"`
	BillingCurrency       BillingCurrencyType `json:"billing_currency"`
	BillingEmails         []BillingEmailOut   `json:"billing_emails"`
	BillingExtraText      string              `json:"billing_extra_text"`
	BillingGroupId        string              `json:"billing_group_id"`
	BillingGroupName      string              `json:"billing_group_name"`
	CardInfo              CardInfoOut         `json:"card_info"`
	City                  string              `json:"city"`
	Company               string              `json:"company"`
	Country               string              `json:"country"`
	CountryCode           string              `json:"country_code"`
	CreateTime            time.Time           `json:"create_time"`
	EstimatedBalanceLocal string              `json:"estimated_balance_local"`
	EstimatedBalanceUsd   string              `json:"estimated_balance_usd"`
	PaymentMethod         PaymentMethodType   `json:"payment_method"`
	State                 string              `json:"state"`
	VatId                 string              `json:"vat_id"`
	ZipCode               string              `json:"zip_code"`
}
type AccountCreateIn struct {
	AccountName           string `json:"account_name"`
	ParentAccountId       string `json:"parent_account_id,omitempty"`
	PrimaryBillingGroupId string `json:"primary_billing_group_id,omitempty"`
}
type AccountCreateOut struct {
	AccessSource          AccessSourceType `json:"access_source,omitempty"`
	AccountId             string           `json:"account_id"`
	AccountName           string           `json:"account_name"`
	AccountOwnerTeamId    string           `json:"account_owner_team_id"`
	CreateTime            time.Time        `json:"create_time"`
	Features              map[string]any   `json:"features,omitempty"`
	IsAccountMember       *bool            `json:"is_account_member,omitempty"`
	IsAccountOwner        bool             `json:"is_account_owner"`
	OrganizationId        string           `json:"organization_id"`
	ParentAccountId       string           `json:"parent_account_id,omitempty"`
	PrimaryBillingGroupId string           `json:"primary_billing_group_id"`
	RootAccountId         string           `json:"root_account_id"`
	TenantId              string           `json:"tenant_id,omitempty"`
	UpdateTime            time.Time        `json:"update_time"`
}
type AccountGetOut struct {
	AccessSource          AccessSourceType `json:"access_source,omitempty"`
	AccountId             string           `json:"account_id"`
	AccountName           string           `json:"account_name"`
	AccountOwnerTeamId    string           `json:"account_owner_team_id"`
	CreateTime            time.Time        `json:"create_time"`
	Features              map[string]any   `json:"features,omitempty"`
	IsAccountMember       *bool            `json:"is_account_member,omitempty"`
	IsAccountOwner        bool             `json:"is_account_owner"`
	OrganizationId        string           `json:"organization_id"`
	ParentAccountId       string           `json:"parent_account_id,omitempty"`
	PrimaryBillingGroupId string           `json:"primary_billing_group_id"`
	RootAccountId         string           `json:"root_account_id"`
	TenantId              string           `json:"tenant_id,omitempty"`
	UpdateTime            time.Time        `json:"update_time"`
}
type AccountMoveIn struct {
	ParentAccountId string `json:"parent_account_id"`
}
type AccountMoveOut struct {
	AccessSource          AccessSourceType `json:"access_source,omitempty"`
	AccountId             string           `json:"account_id"`
	AccountName           string           `json:"account_name"`
	AccountOwnerTeamId    string           `json:"account_owner_team_id"`
	CreateTime            time.Time        `json:"create_time"`
	Features              map[string]any   `json:"features,omitempty"`
	IsAccountMember       *bool            `json:"is_account_member,omitempty"`
	IsAccountOwner        bool             `json:"is_account_owner"`
	OrganizationId        string           `json:"organization_id"`
	ParentAccountId       string           `json:"parent_account_id,omitempty"`
	PrimaryBillingGroupId string           `json:"primary_billing_group_id"`
	RootAccountId         string           `json:"root_account_id"`
	TenantId              string           `json:"tenant_id,omitempty"`
	UpdateTime            time.Time        `json:"update_time"`
}
type AccountOut struct {
	AccessSource          AccessSourceType `json:"access_source,omitempty"`
	AccountId             string           `json:"account_id"`
	AccountName           string           `json:"account_name"`
	AccountOwnerTeamId    string           `json:"account_owner_team_id"`
	CreateTime            time.Time        `json:"create_time"`
	Features              map[string]any   `json:"features,omitempty"`
	IsAccountMember       *bool            `json:"is_account_member,omitempty"`
	IsAccountOwner        bool             `json:"is_account_owner"`
	OrganizationId        string           `json:"organization_id"`
	ParentAccountId       string           `json:"parent_account_id,omitempty"`
	PrimaryBillingGroupId string           `json:"primary_billing_group_id"`
	RootAccountId         string           `json:"root_account_id"`
	TenantId              string           `json:"tenant_id,omitempty"`
	UpdateTime            time.Time        `json:"update_time"`
}
type AccountProjectsListOut struct {
	Projects          []ProjectOut `json:"projects"`
	TotalProjectCount *int         `json:"total_project_count,omitempty"`
}
type AccountUpdateIn struct {
	AccountName           string `json:"account_name,omitempty"`
	PrimaryBillingGroupId string `json:"primary_billing_group_id,omitempty"`
}
type AccountUpdateOut struct {
	AccessSource          AccessSourceType `json:"access_source,omitempty"`
	AccountId             string           `json:"account_id"`
	AccountName           string           `json:"account_name"`
	AccountOwnerTeamId    string           `json:"account_owner_team_id"`
	CreateTime            time.Time        `json:"create_time"`
	Features              map[string]any   `json:"features,omitempty"`
	IsAccountMember       *bool            `json:"is_account_member,omitempty"`
	IsAccountOwner        bool             `json:"is_account_owner"`
	OrganizationId        string           `json:"organization_id"`
	ParentAccountId       string           `json:"parent_account_id,omitempty"`
	PrimaryBillingGroupId string           `json:"primary_billing_group_id"`
	RootAccountId         string           `json:"root_account_id"`
	TenantId              string           `json:"tenant_id,omitempty"`
	UpdateTime            time.Time        `json:"update_time"`
}
type AccountUsersSearchIn struct {
	Limit   *int        `json:"limit,omitempty"`
	OrderBy OrderByType `json:"order_by,omitempty"`
	Query   string      `json:"query,omitempty"`
}
type BillingCurrencyType string

const (
	BillingCurrencyTypeAud BillingCurrencyType = "AUD"
	BillingCurrencyTypeCad BillingCurrencyType = "CAD"
	BillingCurrencyTypeChf BillingCurrencyType = "CHF"
	BillingCurrencyTypeDkk BillingCurrencyType = "DKK"
	BillingCurrencyTypeEur BillingCurrencyType = "EUR"
	BillingCurrencyTypeGbp BillingCurrencyType = "GBP"
	BillingCurrencyTypeJpy BillingCurrencyType = "JPY"
	BillingCurrencyTypeNok BillingCurrencyType = "NOK"
	BillingCurrencyTypeNzd BillingCurrencyType = "NZD"
	BillingCurrencyTypeSek BillingCurrencyType = "SEK"
	BillingCurrencyTypeSgd BillingCurrencyType = "SGD"
	BillingCurrencyTypeUsd BillingCurrencyType = "USD"
)

func BillingCurrencyTypeChoices() []string {
	return []string{"AUD", "CAD", "CHF", "DKK", "EUR", "GBP", "JPY", "NOK", "NZD", "SEK", "SGD", "USD"}
}

type BillingEmailOut struct {
	Email string `json:"email"`
}
type CardInfoOut struct {
	Brand       string `json:"brand"`
	CardId      string `json:"card_id"`
	Country     string `json:"country"`
	CountryCode string `json:"country_code"`
	ExpMonth    int    `json:"exp_month"`
	ExpYear     int    `json:"exp_year"`
	Last4       string `json:"last4"`
	Name        string `json:"name"`
	UserEmail   string `json:"user_email"`
}
type CardOut struct {
	Brand       string `json:"brand"`
	CardId      string `json:"card_id"`
	Country     string `json:"country"`
	CountryCode string `json:"country_code"`
	ExpMonth    int    `json:"exp_month"`
	ExpYear     int    `json:"exp_year"`
	Last4       string `json:"last4"`
	Name        string `json:"name"`
}
type ElasticsearchOut struct {
	EolDate string `json:"eol_date"`
	Version string `json:"version"`
}
type EndOfLifeExtensionOut struct {
	Elasticsearch *ElasticsearchOut `json:"elasticsearch,omitempty"`
}
type EventOut struct {
	AccountId         string    `json:"account_id"`
	ActionDescription string    `json:"action_description"`
	ActionType        string    `json:"action_type"`
	Actor             string    `json:"actor"`
	ActorUserId       string    `json:"actor_user_id"`
	CreateTime        time.Time `json:"create_time"`
	LogEntryId        int       `json:"log_entry_id"`
	TeamId            string    `json:"team_id"`
}
type MemberType string

const (
	MemberTypeAdmin     MemberType = "admin"
	MemberTypeDeveloper MemberType = "developer"
	MemberTypeOperator  MemberType = "operator"
	MemberTypeReadOnly  MemberType = "read_only"
)

func MemberTypeChoices() []string {
	return []string{"admin", "developer", "operator", "read_only"}
}

type OrderByType string

const (
	OrderByTypeUserEmailasc  OrderByType = "user_email:asc"
	OrderByTypeUserEmaildesc OrderByType = "user_email:desc"
	OrderByTypeUserIdasc     OrderByType = "user_id:asc"
	OrderByTypeUserIddesc    OrderByType = "user_id:desc"
	OrderByTypeRealNameasc   OrderByType = "real_name:asc"
	OrderByTypeRealNamedesc  OrderByType = "real_name:desc"
)

func OrderByTypeChoices() []string {
	return []string{"user_email:asc", "user_email:desc", "user_id:asc", "user_id:desc", "real_name:asc", "real_name:desc"}
}

type PaymentMethodType string

const (
	PaymentMethodTypeAccrual           PaymentMethodType = "accrual"
	PaymentMethodTypeCard              PaymentMethodType = "card"
	PaymentMethodTypeDisabled          PaymentMethodType = "disabled"
	PaymentMethodTypeEmail             PaymentMethodType = "email"
	PaymentMethodTypeNoPaymentExpected PaymentMethodType = "no_payment_expected"
	PaymentMethodTypePartner           PaymentMethodType = "partner"
)

func PaymentMethodTypeChoices() []string {
	return []string{"accrual", "card", "disabled", "email", "no_payment_expected", "partner"}
}

type ProjectOut struct {
	AccountId             string                 `json:"account_id"`
	AccountName           string                 `json:"account_name,omitempty"`
	AddressLines          []string               `json:"address_lines,omitempty"`
	AvailableCredits      string                 `json:"available_credits,omitempty"`
	BillingAddress        string                 `json:"billing_address"`
	BillingCurrency       BillingCurrencyType    `json:"billing_currency,omitempty"`
	BillingEmails         []BillingEmailOut      `json:"billing_emails"`
	BillingExtraText      string                 `json:"billing_extra_text,omitempty"`
	BillingGroupId        string                 `json:"billing_group_id"`
	BillingGroupName      string                 `json:"billing_group_name"`
	CardInfo              *CardInfoOut           `json:"card_info,omitempty"`
	City                  string                 `json:"city,omitempty"`
	Company               string                 `json:"company,omitempty"`
	Country               string                 `json:"country"`
	CountryCode           string                 `json:"country_code"`
	DefaultCloud          string                 `json:"default_cloud"`
	EndOfLifeExtension    *EndOfLifeExtensionOut `json:"end_of_life_extension,omitempty"`
	EstimatedBalance      string                 `json:"estimated_balance"`
	EstimatedBalanceLocal string                 `json:"estimated_balance_local,omitempty"`
	Features              map[string]any         `json:"features,omitempty"`
	OrganizationId        string                 `json:"organization_id"`
	PaymentMethod         string                 `json:"payment_method"`
	ProjectName           string                 `json:"project_name"`
	State                 string                 `json:"state,omitempty"`
	Tags                  map[string]string      `json:"tags,omitempty"`
	TechEmails            []TechEmailOut         `json:"tech_emails,omitempty"`
	TenantId              string                 `json:"tenant_id,omitempty"`
	TrialExpirationTime   *time.Time             `json:"trial_expiration_time,omitempty"`
	VatId                 string                 `json:"vat_id"`
	ZipCode               string                 `json:"zip_code,omitempty"`
}
type TechEmailOut struct {
	Email string `json:"email"`
}
type UserOut struct {
	RealName  string `json:"real_name"`
	UserEmail string `json:"user_email"`
	UserId    string `json:"user_id"`
}
type UserProjectOut struct {
	AccessType  string     `json:"access_type,omitempty"`
	AccountId   string     `json:"account_id"`
	CreateTime  time.Time  `json:"create_time"`
	MemberType  MemberType `json:"member_type"`
	ProjectName string     `json:"project_name"`
	RealName    string     `json:"real_name"`
	TeamId      string     `json:"team_id"`
	TeamName    string     `json:"team_name"`
	UserEmail   string     `json:"user_email"`
}
type accountAttachPaymentMethodOut struct {
	Card AccountAttachPaymentMethodOut `json:"card"`
}
type accountBillingGroupListOut struct {
	AccountBillingGroups []AccountBillingGroupOut `json:"account_billing_groups"`
}
type accountCreateOut struct {
	Account AccountCreateOut `json:"account"`
}
type accountEventListOut struct {
	Events []EventOut `json:"events"`
}
type accountGetOut struct {
	Account AccountGetOut `json:"account"`
}
type accountListOut struct {
	Accounts []AccountOut `json:"accounts"`
}
type accountMoveOut struct {
	Account AccountMoveOut `json:"account"`
}
type accountPaymentMethodsListOut struct {
	Cards []CardOut `json:"cards"`
}
type accountUpdateOut struct {
	Account AccountUpdateOut `json:"account"`
}
type accountUserProjectsListOut struct {
	UserProjects []UserProjectOut `json:"user_projects"`
}
type accountUsersSearchOut struct {
	Users []UserOut `json:"users"`
}
