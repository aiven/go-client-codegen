// Code generated by Aiven. DO NOT EDIT.

package accountteammember

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

type Handler interface {
	// AccountTeamMemberCancelInvite cancel pending user invite
	// DELETE /v1/account/{account_id}/team/{team_id}/invites/{user_email}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamMemberCancelInvite
	AccountTeamMemberCancelInvite(ctx context.Context, accountId string, teamId string, userEmail string) error

	// AccountTeamMemberVerifyInvite confirm account team invite
	// POST /v1/account/{account_id}/invite/{invite_verification_code}
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamMemberVerifyInvite
	AccountTeamMemberVerifyInvite(ctx context.Context, accountId string, inviteVerificationCode string) (*AccountTeamMemberVerifyInviteOut, error)

	// AccountTeamMembersInvite invite a new member to join the team
	// POST /v1/account/{account_id}/team/{team_id}/members
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamMembersInvite
	AccountTeamMembersInvite(ctx context.Context, accountId string, teamId string, in *AccountTeamMembersInviteIn) error

	// AccountTeamMembersList list members of a single team
	// GET /v1/account/{account_id}/team/{team_id}/members
	// https://api.aiven.io/doc/#tag/Account/operation/AccountTeamMembersList
	AccountTeamMembersList(ctx context.Context, accountId string, teamId string) ([]MemberOut, error)
}

func NewHandler(doer doer) AccountTeamMemberHandler {
	return AccountTeamMemberHandler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type AccountTeamMemberHandler struct {
	doer doer
}

func (h *AccountTeamMemberHandler) AccountTeamMemberCancelInvite(ctx context.Context, accountId string, teamId string, userEmail string) error {
	path := fmt.Sprintf("/v1/account/%s/team/%s/invites/%s", accountId, teamId, userEmail)
	_, err := h.doer.Do(ctx, "AccountTeamMemberCancelInvite", "DELETE", path, nil)
	return err
}
func (h *AccountTeamMemberHandler) AccountTeamMemberVerifyInvite(ctx context.Context, accountId string, inviteVerificationCode string) (*AccountTeamMemberVerifyInviteOut, error) {
	path := fmt.Sprintf("/v1/account/%s/invite/%s", accountId, inviteVerificationCode)
	b, err := h.doer.Do(ctx, "AccountTeamMemberVerifyInvite", "POST", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(accountTeamMemberVerifyInviteOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.InviteDetails, nil
}
func (h *AccountTeamMemberHandler) AccountTeamMembersInvite(ctx context.Context, accountId string, teamId string, in *AccountTeamMembersInviteIn) error {
	path := fmt.Sprintf("/v1/account/%s/team/%s/members", accountId, teamId)
	_, err := h.doer.Do(ctx, "AccountTeamMembersInvite", "POST", path, in)
	return err
}
func (h *AccountTeamMemberHandler) AccountTeamMembersList(ctx context.Context, accountId string, teamId string) ([]MemberOut, error) {
	path := fmt.Sprintf("/v1/account/%s/team/%s/members", accountId, teamId)
	b, err := h.doer.Do(ctx, "AccountTeamMembersList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(accountTeamMembersListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Members, nil
}

type AccountTeamMemberVerifyInviteOut struct {
	UserEmail string `json:"user_email"`
}
type AccountTeamMembersInviteIn struct {
	Email string `json:"email"`
}
type MemberOut struct {
	CreateTime time.Time `json:"create_time"`
	RealName   string    `json:"real_name"`
	TeamId     string    `json:"team_id"`
	TeamName   string    `json:"team_name"`
	UpdateTime time.Time `json:"update_time"`
	UserEmail  string    `json:"user_email"`
	UserId     string    `json:"user_id"`
}
type accountTeamMemberVerifyInviteOut struct {
	InviteDetails AccountTeamMemberVerifyInviteOut `json:"invite_details"`
}
type accountTeamMembersListOut struct {
	Members []MemberOut `json:"members"`
}
