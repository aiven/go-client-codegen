// Code generated by Aiven. DO NOT EDIT.

package clickhouse

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
)

type Handler interface {
	// ServiceClickHouseCurrentQueries list active queries
	// GET /v1/project/{project}/service/{service_name}/clickhouse/query
	// https://api.aiven.io/doc/#tag/Service:_ClickHouse/operation/ServiceClickHouseCurrentQueries
	ServiceClickHouseCurrentQueries(ctx context.Context, project string, serviceName string) ([]QueryOut, error)

	// ServiceClickHouseDatabaseCreate create a database
	// POST /v1/project/{project}/service/{service_name}/clickhouse/db
	// https://api.aiven.io/doc/#tag/Service:_ClickHouse/operation/ServiceClickHouseDatabaseCreate
	ServiceClickHouseDatabaseCreate(ctx context.Context, project string, serviceName string, in *ServiceClickHouseDatabaseCreateIn) error

	// ServiceClickHouseDatabaseDelete delete a database
	// DELETE /v1/project/{project}/service/{service_name}/clickhouse/db/{database}
	// https://api.aiven.io/doc/#tag/Service:_ClickHouse/operation/ServiceClickHouseDatabaseDelete
	ServiceClickHouseDatabaseDelete(ctx context.Context, project string, serviceName string, database string) error

	// ServiceClickHouseDatabaseList list all databases
	// GET /v1/project/{project}/service/{service_name}/clickhouse/db
	// https://api.aiven.io/doc/#tag/Service:_ClickHouse/operation/ServiceClickHouseDatabaseList
	ServiceClickHouseDatabaseList(ctx context.Context, project string, serviceName string) ([]DatabaseOut, error)

	// ServiceClickHousePasswordReset reset a user's password
	// PUT /v1/project/{project}/service/{service_name}/clickhouse/user/{user_uuid}/password
	// https://api.aiven.io/doc/#tag/Service:_ClickHouse/operation/ServiceClickHousePasswordReset
	ServiceClickHousePasswordReset(ctx context.Context, project string, serviceName string, userUuid string, in *ServiceClickHousePasswordResetIn) (string, error)

	// ServiceClickHouseQuery execute an SQL query
	// POST /v1/project/{project}/service/{service_name}/clickhouse/query
	// https://api.aiven.io/doc/#tag/Service:_ClickHouse/operation/ServiceClickHouseQuery
	ServiceClickHouseQuery(ctx context.Context, project string, serviceName string, in *ServiceClickHouseQueryIn) (*ServiceClickHouseQueryOut, error)

	// ServiceClickHouseQueryStats return statistics on recent queries
	// GET /v1/project/{project}/service/{service_name}/clickhouse/query/stats
	// https://api.aiven.io/doc/#tag/Service:_ClickHouse/operation/ServiceClickHouseQueryStats
	ServiceClickHouseQueryStats(ctx context.Context, project string, serviceName string, query ...[2]string) ([]ServiceClickHouseQueryStatsOut, error)

	// ServiceClickHouseTieredStorageSummary get the ClickHouse tiered storage summary
	// GET /v1/project/{project}/service/{service_name}/clickhouse/tiered-storage/summary
	// https://api.aiven.io/doc/#tag/Service:_ClickHouse/operation/ServiceClickHouseTieredStorageSummary
	ServiceClickHouseTieredStorageSummary(ctx context.Context, project string, serviceName string) (*ServiceClickHouseTieredStorageSummaryOut, error)

	// ServiceClickHouseUserCreate create a ClickHouse user
	// POST /v1/project/{project}/service/{service_name}/clickhouse/user
	// https://api.aiven.io/doc/#tag/Service:_ClickHouse/operation/ServiceClickHouseUserCreate
	ServiceClickHouseUserCreate(ctx context.Context, project string, serviceName string, in *ServiceClickHouseUserCreateIn) (*ServiceClickHouseUserCreateOut, error)

	// ServiceClickHouseUserDelete delete a user
	// DELETE /v1/project/{project}/service/{service_name}/clickhouse/user/{user_uuid}
	// https://api.aiven.io/doc/#tag/Service:_ClickHouse/operation/ServiceClickHouseUserDelete
	ServiceClickHouseUserDelete(ctx context.Context, project string, serviceName string, userUuid string) error

	// ServiceClickHouseUserList list all users
	// GET /v1/project/{project}/service/{service_name}/clickhouse/user
	// https://api.aiven.io/doc/#tag/Service:_ClickHouse/operation/ServiceClickHouseUserList
	ServiceClickHouseUserList(ctx context.Context, project string, serviceName string) ([]UserOut, error)
}

// doer http client
type doer interface {
	Do(ctx context.Context, operationID, method, path string, in any, query ...[2]string) ([]byte, error)
}

func NewHandler(doer doer) ClickHouseHandler {
	return ClickHouseHandler{doer}
}

type ClickHouseHandler struct {
	doer doer
}

func (h *ClickHouseHandler) ServiceClickHouseCurrentQueries(ctx context.Context, project string, serviceName string) ([]QueryOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/clickhouse/query", url.PathEscape(project), url.PathEscape(serviceName))
	b, err := h.doer.Do(ctx, "ServiceClickHouseCurrentQueries", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(serviceClickHouseCurrentQueriesOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Queries, nil
}
func (h *ClickHouseHandler) ServiceClickHouseDatabaseCreate(ctx context.Context, project string, serviceName string, in *ServiceClickHouseDatabaseCreateIn) error {
	path := fmt.Sprintf("/v1/project/%s/service/%s/clickhouse/db", url.PathEscape(project), url.PathEscape(serviceName))
	_, err := h.doer.Do(ctx, "ServiceClickHouseDatabaseCreate", "POST", path, in)
	return err
}
func (h *ClickHouseHandler) ServiceClickHouseDatabaseDelete(ctx context.Context, project string, serviceName string, database string) error {
	path := fmt.Sprintf("/v1/project/%s/service/%s/clickhouse/db/%s", url.PathEscape(project), url.PathEscape(serviceName), url.PathEscape(database))
	_, err := h.doer.Do(ctx, "ServiceClickHouseDatabaseDelete", "DELETE", path, nil)
	return err
}
func (h *ClickHouseHandler) ServiceClickHouseDatabaseList(ctx context.Context, project string, serviceName string) ([]DatabaseOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/clickhouse/db", url.PathEscape(project), url.PathEscape(serviceName))
	b, err := h.doer.Do(ctx, "ServiceClickHouseDatabaseList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(serviceClickHouseDatabaseListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Databases, nil
}
func (h *ClickHouseHandler) ServiceClickHousePasswordReset(ctx context.Context, project string, serviceName string, userUuid string, in *ServiceClickHousePasswordResetIn) (string, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/clickhouse/user/%s/password", url.PathEscape(project), url.PathEscape(serviceName), url.PathEscape(userUuid))
	b, err := h.doer.Do(ctx, "ServiceClickHousePasswordReset", "PUT", path, in)
	if err != nil {
		return "", err
	}
	out := new(serviceClickHousePasswordResetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return "", err
	}
	return out.Password, nil
}
func (h *ClickHouseHandler) ServiceClickHouseQuery(ctx context.Context, project string, serviceName string, in *ServiceClickHouseQueryIn) (*ServiceClickHouseQueryOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/clickhouse/query", url.PathEscape(project), url.PathEscape(serviceName))
	b, err := h.doer.Do(ctx, "ServiceClickHouseQuery", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(ServiceClickHouseQueryOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceClickHouseQueryStatsLimit Limit for number of results
func ServiceClickHouseQueryStatsLimit(limit int) [2]string {
	return [2]string{"limit", fmt.Sprintf("%d", limit)}
}

// ServiceClickHouseQueryStatsOffset Offset for retrieved results based on sort order
func ServiceClickHouseQueryStatsOffset(offset int) [2]string {
	return [2]string{"offset", fmt.Sprintf("%d", offset)}
}

// ServiceClickHouseQueryStatsOrderByType Order in which to sort retrieved results
func ServiceClickHouseQueryStatsOrderByType(orderByType OrderByType) [2]string {
	return [2]string{"order_by", fmt.Sprintf("%s", orderByType)}
}
func (h *ClickHouseHandler) ServiceClickHouseQueryStats(ctx context.Context, project string, serviceName string, query ...[2]string) ([]ServiceClickHouseQueryStatsOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/clickhouse/query/stats", url.PathEscape(project), url.PathEscape(serviceName))
	b, err := h.doer.Do(ctx, "ServiceClickHouseQueryStats", "GET", path, nil, query...)
	if err != nil {
		return nil, err
	}
	out := new(serviceClickHouseQueryStatsOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Queries, nil
}
func (h *ClickHouseHandler) ServiceClickHouseTieredStorageSummary(ctx context.Context, project string, serviceName string) (*ServiceClickHouseTieredStorageSummaryOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/clickhouse/tiered-storage/summary", url.PathEscape(project), url.PathEscape(serviceName))
	b, err := h.doer.Do(ctx, "ServiceClickHouseTieredStorageSummary", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServiceClickHouseTieredStorageSummaryOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *ClickHouseHandler) ServiceClickHouseUserCreate(ctx context.Context, project string, serviceName string, in *ServiceClickHouseUserCreateIn) (*ServiceClickHouseUserCreateOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/clickhouse/user", url.PathEscape(project), url.PathEscape(serviceName))
	b, err := h.doer.Do(ctx, "ServiceClickHouseUserCreate", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(serviceClickHouseUserCreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.User, nil
}
func (h *ClickHouseHandler) ServiceClickHouseUserDelete(ctx context.Context, project string, serviceName string, userUuid string) error {
	path := fmt.Sprintf("/v1/project/%s/service/%s/clickhouse/user/%s", url.PathEscape(project), url.PathEscape(serviceName), url.PathEscape(userUuid))
	_, err := h.doer.Do(ctx, "ServiceClickHouseUserDelete", "DELETE", path, nil)
	return err
}
func (h *ClickHouseHandler) ServiceClickHouseUserList(ctx context.Context, project string, serviceName string) ([]UserOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/clickhouse/user", url.PathEscape(project), url.PathEscape(serviceName))
	b, err := h.doer.Do(ctx, "ServiceClickHouseUserList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(serviceClickHouseUserListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Users, nil
}

type DatabaseOut struct {
	Engine   string            `json:"engine"`          // Database engine
	Name     string            `json:"name"`            // Database name
	Required bool              `json:"required"`        // Required database
	State    DatabaseStateType `json:"state,omitempty"` // Database state
}
type DatabaseStateType string

const (
	DatabaseStateTypeOk              DatabaseStateType = "ok"
	DatabaseStateTypePendingCreation DatabaseStateType = "pending_creation"
	DatabaseStateTypePendingRemoval  DatabaseStateType = "pending_removal"
)

func DatabaseStateTypeChoices() []string {
	return []string{"ok", "pending_creation", "pending_removal"}
}

type HourlyOut struct {
	EstimatedCost   *string `json:"estimated_cost,omitempty"` // The estimated cost in USD of tiered storage for this hour
	HourStart       string  `json:"hour_start"`               // Timestamp in ISO 8601 format, always in UTC
	PeakStoredBytes int     `json:"peak_stored_bytes"`        // Peak bytes stored on object storage at this hour
}
type MetaOut struct {
	Name string `json:"name"` // Column name
	Type string `json:"type"` // Column type
}
type OrderByType string

const (
	OrderByTypeCallsAsc       OrderByType = "calls:asc"
	OrderByTypeCallsDesc      OrderByType = "calls:desc"
	OrderByTypeMaxTimeAsc     OrderByType = "max_time:asc"
	OrderByTypeMaxTimeDesc    OrderByType = "max_time:desc"
	OrderByTypeMeanTimeAsc    OrderByType = "mean_time:asc"
	OrderByTypeMeanTimeDesc   OrderByType = "mean_time:desc"
	OrderByTypeMinTimeAsc     OrderByType = "min_time:asc"
	OrderByTypeMinTimeDesc    OrderByType = "min_time:desc"
	OrderByTypeP95TimeAsc     OrderByType = "p95_time:asc"
	OrderByTypeP95TimeDesc    OrderByType = "p95_time:desc"
	OrderByTypeStddevTimeAsc  OrderByType = "stddev_time:asc"
	OrderByTypeStddevTimeDesc OrderByType = "stddev_time:desc"
	OrderByTypeTotalTimeAsc   OrderByType = "total_time:asc"
	OrderByTypeTotalTimeDesc  OrderByType = "total_time:desc"
)

func OrderByTypeChoices() []string {
	return []string{"calls:asc", "calls:desc", "max_time:asc", "max_time:desc", "mean_time:asc", "mean_time:desc", "min_time:asc", "min_time:desc", "p95_time:asc", "p95_time:desc", "stddev_time:asc", "stddev_time:desc", "total_time:asc", "total_time:desc"}
}

type PrivilegeOut struct {
	AccessType      string `json:"access_type"`       // Access type
	Column          string `json:"column"`            // Column name
	Database        string `json:"database"`          // Database name
	GrantOption     bool   `json:"grant_option"`      // With grant option
	IsPartialRevoke bool   `json:"is_partial_revoke"` // Is partial revoke
	Table           string `json:"table"`             // Table name
}
type QueryOut struct {
	ClientName *string  `json:"client_name,omitempty"` // Client name, if set
	Database   *string  `json:"database,omitempty"`
	Elapsed    *float64 `json:"elapsed,omitempty"` // The time in seconds since request execution started
	Query      *string  `json:"query,omitempty"`   // The query text
	User       *string  `json:"user,omitempty"`    // The user who made the query
}
type RoleIn struct {
	Uuid string `json:"uuid"` // Role uuid
}
type RoleOut struct {
	IsDefault       bool   `json:"is_default"`        // Is default
	Name            string `json:"name"`              // Role name
	Uuid            string `json:"uuid"`              // Role uuid
	WithAdminOption bool   `json:"with_admin_option"` // With admin option
}

// ServiceClickHouseDatabaseCreateIn ServiceClickHouseDatabaseCreateRequestBody
type ServiceClickHouseDatabaseCreateIn struct {
	Database string `json:"database"` // Service database name
}

// ServiceClickHousePasswordResetIn ServiceClickHousePasswordResetRequestBody
type ServiceClickHousePasswordResetIn struct {
	Password string `json:"password"` // User password
}

// ServiceClickHouseQueryIn ServiceClickHouseQueryRequestBody
type ServiceClickHouseQueryIn struct {
	Database string `json:"database"` // Service database name
	Query    string `json:"query"`
}

// ServiceClickHouseQueryOut ServiceClickHouseQueryResponse
type ServiceClickHouseQueryOut struct {
	Data    [][]any    `json:"data"`
	Meta    []MetaOut  `json:"meta"`
	Summary SummaryOut `json:"summary"` // Summary
}
type ServiceClickHouseQueryStatsOut struct {
	Calls      *int     `json:"calls,omitempty"` // Number of calls
	Database   *string  `json:"database,omitempty"`
	MaxTime    *int     `json:"max_time,omitempty"`    // Maximum query duration in milliseconds
	MeanTime   *int     `json:"mean_time,omitempty"`   // Average query duration in milliseconds
	MinTime    *int     `json:"min_time,omitempty"`    // Minimum query duration in milliseconds
	P95Time    *int     `json:"p95_time,omitempty"`    // Query duration 95th percentile in milliseconds
	Query      *string  `json:"query,omitempty"`       // Normalized query
	Rows       *float64 `json:"rows,omitempty"`        // Average number of rows per call
	StddevTime *int     `json:"stddev_time,omitempty"` // Query duration standard deviation in milliseconds
	TotalTime  *int     `json:"total_time,omitempty"`  // Total duration of all calls in milliseconds
}

// ServiceClickHouseTieredStorageSummaryOut ServiceClickHouseTieredStorageSummaryResponse
type ServiceClickHouseTieredStorageSummaryOut struct {
	CurrentCost         string                 `json:"current_cost"`              // The current cost in USD of tiered storage since the beginning of the billing period
	ForecastedCost      string                 `json:"forecasted_cost"`           // The forecasted cost in USD of tiered storage in the billing period
	ForecastedRate      *string                `json:"forecasted_rate,omitempty"` // The rate on GBs/hour used to calculate the forecasted cost
	StorageUsageHistory StorageUsageHistoryOut `json:"storage_usage_history"`     // History of usage and cumulative costs in the billing period
	TotalStorageUsage   int                    `json:"total_storage_usage"`       // Total storage usage by tiered storage, in bytes
}

// ServiceClickHouseUserCreateIn ServiceClickHouseUserCreateRequestBody
type ServiceClickHouseUserCreateIn struct {
	Name     string    `json:"name"`               // User name
	Password *string   `json:"password,omitempty"` // User password
	Roles    *[]RoleIn `json:"roles,omitempty"`    // User roles
}

// ServiceClickHouseUserCreateOut User details
type ServiceClickHouseUserCreateOut struct {
	Name       string         `json:"name"`               // User name
	Password   *string        `json:"password,omitempty"` // User password
	Privileges []PrivilegeOut `json:"privileges"`         // User privileges
	Required   bool           `json:"required"`           // Required user
	Roles      []RoleOut      `json:"roles"`              // User roles
	Uuid       string         `json:"uuid"`               // User uuid
}

// StorageUsageHistoryOut History of usage and cumulative costs in the billing period
type StorageUsageHistoryOut struct {
	Hourly []HourlyOut `json:"hourly"` // History by hour
}

// SummaryOut Summary
type SummaryOut struct {
	ElapsedNs    *int `json:"elapsed_ns,omitempty"`    // Elapsed time in nanoseconds
	ReadBytes    *int `json:"read_bytes,omitempty"`    // Number of bytes read
	ReadRows     *int `json:"read_rows,omitempty"`     // Number of rows read
	ResultBytes  *int `json:"result_bytes,omitempty"`  // Number of bytes in the result
	ResultRows   *int `json:"result_rows,omitempty"`   // Number of rows in the result
	WrittenBytes *int `json:"written_bytes,omitempty"` // Number of bytes written
	WrittenRows  *int `json:"written_rows,omitempty"`  // Number of rows written
}
type UserOut struct {
	Name       string         `json:"name"`               // User name
	Password   *string        `json:"password,omitempty"` // User password
	Privileges []PrivilegeOut `json:"privileges"`         // User privileges
	Required   bool           `json:"required"`           // Required user
	Roles      []RoleOut      `json:"roles"`              // User roles
	Uuid       string         `json:"uuid"`               // User uuid
}

// serviceClickHouseCurrentQueriesOut ServiceClickHouseCurrentQueriesResponse
type serviceClickHouseCurrentQueriesOut struct {
	Queries []QueryOut `json:"queries"` // List of currently running queries
}

// serviceClickHouseDatabaseListOut ServiceClickHouseDatabaseListResponse
type serviceClickHouseDatabaseListOut struct {
	Databases []DatabaseOut `json:"databases"` // List of databases
}

// serviceClickHousePasswordResetOut ServiceClickHousePasswordResetResponse
type serviceClickHousePasswordResetOut struct {
	Password string `json:"password"` // User password
}

// serviceClickHouseQueryStatsOut ServiceClickHouseQueryStatsResponse
type serviceClickHouseQueryStatsOut struct {
	Queries []ServiceClickHouseQueryStatsOut `json:"queries"` // List of query statistics
}

// serviceClickHouseUserCreateOut ServiceClickHouseUserCreateResponse
type serviceClickHouseUserCreateOut struct {
	User ServiceClickHouseUserCreateOut `json:"user"` // User details
}

// serviceClickHouseUserListOut ServiceClickHouseUserListResponse
type serviceClickHouseUserListOut struct {
	Users []UserOut `json:"users"` // List of users
}
