// Code generated by Aiven. DO NOT EDIT.

package domain

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"time"
)

type Handler interface {
	// OrganizationDomainAdd create a domain
	// POST /v1/organization/{organization_id}/domains
	// https://api.aiven.io/doc/#tag/Domains/operation/OrganizationDomainAdd
	OrganizationDomainAdd(ctx context.Context, organizationId string, in *OrganizationDomainAddIn) (*OrganizationDomainAddOut, error)

	// OrganizationDomainUpdate update a domain
	// PATCH /v1/organization/{organization_id}/domains/{domain_id}
	// https://api.aiven.io/doc/#tag/Domains/operation/OrganizationDomainUpdate
	OrganizationDomainUpdate(ctx context.Context, organizationId string, domainId string, in *OrganizationDomainUpdateIn) (*OrganizationDomainUpdateOut, error)

	// OrganizationDomainVerify verify a domain
	// POST /v1/organization/{organization_id}/domains/{domain_id}/verify
	// https://api.aiven.io/doc/#tag/Domains/operation/OrganizationDomainVerify
	OrganizationDomainVerify(ctx context.Context, organizationId string, domainId string) (*OrganizationDomainVerifyOut, error)

	// OrganizationDomainsList list domains
	// GET /v1/organization/{organization_id}/domains
	// https://api.aiven.io/doc/#tag/Domains/operation/OrganizationDomainsList
	OrganizationDomainsList(ctx context.Context, organizationId string) ([]DomainOut, error)

	// OrganizationDomainsRemove delete a domain
	// DELETE /v1/organization/{organization_id}/domains/{domain_id}
	// https://api.aiven.io/doc/#tag/Domains/operation/OrganizationDomainsRemove
	OrganizationDomainsRemove(ctx context.Context, organizationId string, domainId string) error
}

func NewHandler(doer doer) DomainHandler {
	return DomainHandler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type DomainHandler struct {
	doer doer
}

func (h *DomainHandler) OrganizationDomainAdd(ctx context.Context, organizationId string, in *OrganizationDomainAddIn) (*OrganizationDomainAddOut, error) {
	path := fmt.Sprintf("/v1/organization/%s/domains", url.PathEscape(organizationId))
	b, err := h.doer.Do(ctx, "OrganizationDomainAdd", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(OrganizationDomainAddOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *DomainHandler) OrganizationDomainUpdate(ctx context.Context, organizationId string, domainId string, in *OrganizationDomainUpdateIn) (*OrganizationDomainUpdateOut, error) {
	path := fmt.Sprintf("/v1/organization/%s/domains/%s", url.PathEscape(organizationId), url.PathEscape(domainId))
	b, err := h.doer.Do(ctx, "OrganizationDomainUpdate", "PATCH", path, in)
	if err != nil {
		return nil, err
	}
	out := new(OrganizationDomainUpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *DomainHandler) OrganizationDomainVerify(ctx context.Context, organizationId string, domainId string) (*OrganizationDomainVerifyOut, error) {
	path := fmt.Sprintf("/v1/organization/%s/domains/%s/verify", url.PathEscape(organizationId), url.PathEscape(domainId))
	b, err := h.doer.Do(ctx, "OrganizationDomainVerify", "POST", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(OrganizationDomainVerifyOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *DomainHandler) OrganizationDomainsList(ctx context.Context, organizationId string) ([]DomainOut, error) {
	path := fmt.Sprintf("/v1/organization/%s/domains", url.PathEscape(organizationId))
	b, err := h.doer.Do(ctx, "OrganizationDomainsList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(organizationDomainsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Domains, nil
}
func (h *DomainHandler) OrganizationDomainsRemove(ctx context.Context, organizationId string, domainId string) error {
	path := fmt.Sprintf("/v1/organization/%s/domains/%s", url.PathEscape(organizationId), url.PathEscape(domainId))
	_, err := h.doer.Do(ctx, "OrganizationDomainsRemove", "DELETE", path, nil)
	return err
}

type DomainOut struct {
	ChallengeToken                string           `json:"challenge_token"`                  // Random string to be used for validation
	CreateTime                    time.Time        `json:"create_time"`                      // Time of creating the domain
	DomainId                      string           `json:"domain_id"`                        // ID of the domain
	DomainName                    string           `json:"domain_name"`                      // Name of the domain
	LinkedAuthenticationMethodIds []string         `json:"linked_authentication_method_ids"` // Linked Authentication Method Ids
	OrganizationId                string           `json:"organization_id"`                  // ID of the organization owning this domain
	State                         DomainStateType  `json:"state"`                            // State of the verification process
	VerificationType              VerificationType `json:"verification_type"`                // Type of verification to be made
}
type DomainStateType string

const (
	DomainStateTypeDeleted    DomainStateType = "deleted"
	DomainStateTypeUnverified DomainStateType = "unverified"
	DomainStateTypeVerified   DomainStateType = "verified"
)

func DomainStateTypeChoices() []string {
	return []string{"deleted", "unverified", "verified"}
}

// OrganizationDomainAddIn OrganizationDomainAddRequestBody
type OrganizationDomainAddIn struct {
	DomainName       string           `json:"domain_name"`       // Name of the domain to be added
	VerificationType VerificationType `json:"verification_type"` // Type of verification to be made
}

// OrganizationDomainAddOut OrganizationDomainAddResponse
type OrganizationDomainAddOut struct {
	ChallengeToken                string                         `json:"challenge_token"`                  // Random string to be used for validation
	CreateTime                    time.Time                      `json:"create_time"`                      // Time of creating the domain
	DomainId                      string                         `json:"domain_id"`                        // ID of the domain
	DomainName                    string                         `json:"domain_name"`                      // Name of the domain
	LinkedAuthenticationMethodIds []string                       `json:"linked_authentication_method_ids"` // Linked Authentication Method Ids
	OrganizationId                string                         `json:"organization_id"`                  // ID of the organization owning this domain
	State                         OrganizationDomainAddStateType `json:"state"`                            // State of the verification process
	VerificationType              VerificationType               `json:"verification_type"`                // Type of verification to be made
}
type OrganizationDomainAddStateType string

const (
	OrganizationDomainAddStateTypeDeleted    OrganizationDomainAddStateType = "deleted"
	OrganizationDomainAddStateTypeUnverified OrganizationDomainAddStateType = "unverified"
	OrganizationDomainAddStateTypeVerified   OrganizationDomainAddStateType = "verified"
)

func OrganizationDomainAddStateTypeChoices() []string {
	return []string{"deleted", "unverified", "verified"}
}

type OrganizationDomainStateType string

const (
	OrganizationDomainStateTypeDeleted    OrganizationDomainStateType = "deleted"
	OrganizationDomainStateTypeUnverified OrganizationDomainStateType = "unverified"
	OrganizationDomainStateTypeVerified   OrganizationDomainStateType = "verified"
)

func OrganizationDomainStateTypeChoices() []string {
	return []string{"deleted", "unverified", "verified"}
}

// OrganizationDomainUpdateIn OrganizationDomainUpdateRequestBody
type OrganizationDomainUpdateIn struct {
	VerificationType VerificationType `json:"verification_type,omitempty"` // OrganizationDomainVerificationType
}

// OrganizationDomainUpdateOut OrganizationDomainUpdateResponse
type OrganizationDomainUpdateOut struct {
	ChallengeToken                string                      `json:"challenge_token"`                  // Random string to be used for validation
	CreateTime                    time.Time                   `json:"create_time"`                      // Time of creating the domain
	DomainId                      string                      `json:"domain_id"`                        // ID of the domain
	DomainName                    string                      `json:"domain_name"`                      // Name of the domain
	LinkedAuthenticationMethodIds []string                    `json:"linked_authentication_method_ids"` // Linked Authentication Method Ids
	OrganizationId                string                      `json:"organization_id"`                  // ID of the organization owning this domain
	State                         OrganizationDomainStateType `json:"state"`                            // State of the verification process
	VerificationType              VerificationType            `json:"verification_type"`                // Type of verification to be made
}

// OrganizationDomainVerifyOut OrganizationDomainVerifyResponse
type OrganizationDomainVerifyOut struct {
	ChallengeToken                string                      `json:"challenge_token"`                  // Random string to be used for validation
	CreateTime                    time.Time                   `json:"create_time"`                      // Time of creating the domain
	DomainId                      string                      `json:"domain_id"`                        // ID of the domain
	DomainName                    string                      `json:"domain_name"`                      // Name of the domain
	LinkedAuthenticationMethodIds []string                    `json:"linked_authentication_method_ids"` // Linked Authentication Method Ids
	OrganizationId                string                      `json:"organization_id"`                  // ID of the organization owning this domain
	State                         OrganizationDomainStateType `json:"state"`                            // State of the verification process
	VerificationType              VerificationType            `json:"verification_type"`                // Type of verification to be made
}
type VerificationType string

const (
	VerificationTypeDns  VerificationType = "dns"
	VerificationTypeHttp VerificationType = "http"
)

func VerificationTypeChoices() []string {
	return []string{"dns", "http"}
}

// organizationDomainsListOut OrganizationDomainsListResponse
type organizationDomainsListOut struct {
	Domains []DomainOut `json:"domains"` // List of domains for the organization
}
