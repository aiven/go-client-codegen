// Code generated by Aiven. DO NOT EDIT.

package flink

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
)

type Handler interface {
	// ServiceFlinkOverview get a cluster overview
	// GET /v1/project/{project}/service/{service_name}/flink/overview
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkOverview
	ServiceFlinkOverview(ctx context.Context, project string, serviceName string) (*ServiceFlinkOverviewOut, error)
}

// doer http client
type doer interface {
	Do(ctx context.Context, operationID, method, path string, in any, query ...[2]string) ([]byte, error)
}

func NewHandler(doer doer) FlinkHandler {
	return FlinkHandler{doer}
}

type FlinkHandler struct {
	doer doer
}

func (h *FlinkHandler) ServiceFlinkOverview(ctx context.Context, project string, serviceName string) (*ServiceFlinkOverviewOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/flink/overview", url.PathEscape(project), url.PathEscape(serviceName))
	b, err := h.doer.Do(ctx, "ServiceFlinkOverview", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServiceFlinkOverviewOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceFlinkOverviewOut ServiceFlinkOverviewResponse
type ServiceFlinkOverviewOut struct {
	FlinkCommit    *string `json:"flink-commit,omitempty"`    // Commit of Flink version
	FlinkVersion   *string `json:"flink-version,omitempty"`   // Flink version
	JobsCancelled  *int    `json:"jobs-cancelled,omitempty"`  // Number of cancelled jobs
	JobsFailed     *int    `json:"jobs-failed,omitempty"`     // Number of failed jobs
	JobsFinished   *int    `json:"jobs-finished,omitempty"`   // Number of finished jobs
	JobsRunning    *int    `json:"jobs-running,omitempty"`    // Number of running jobs
	SlotsAvailable *int    `json:"slots-available,omitempty"` // Number of slots available
	SlotsTotal     *int    `json:"slots-total,omitempty"`     // Number of slots
	Taskmanagers   *int    `json:"taskmanagers,omitempty"`    // Number of TaskManagers
}
