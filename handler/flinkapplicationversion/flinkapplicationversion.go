// Code generated by Aiven. DO NOT EDIT.

package flinkapplicationversion

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"time"
)

type Handler interface {
	// ServiceFlinkCreateApplicationVersion create a Flink ApplicationVersion
	// POST /v1/project/{project}/service/{service_name}/flink/application/{application_id}/version
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkCreateApplicationVersion
	ServiceFlinkCreateApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, in *ServiceFlinkCreateApplicationVersionIn) (*ServiceFlinkCreateApplicationVersionOut, error)

	// ServiceFlinkDeleteApplicationVersion delete a Flink ApplicationVersion
	// DELETE /v1/project/{project}/service/{service_name}/flink/application/{application_id}/version/{application_version_id}
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkDeleteApplicationVersion
	ServiceFlinkDeleteApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, applicationVersionId string) (*ServiceFlinkDeleteApplicationVersionOut, error)

	// ServiceFlinkGetApplicationVersion get a Flink ApplicationVersion
	// GET /v1/project/{project}/service/{service_name}/flink/application/{application_id}/version/{application_version_id}
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkGetApplicationVersion
	ServiceFlinkGetApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, applicationVersionId string) (*ServiceFlinkGetApplicationVersionOut, error)

	// ServiceFlinkValidateApplicationVersion validate a Flink ApplicationVersion
	// POST /v1/project/{project}/service/{service_name}/flink/application/{application_id}/version/validate
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkValidateApplicationVersion
	ServiceFlinkValidateApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, in *ServiceFlinkValidateApplicationVersionIn) (*ServiceFlinkValidateApplicationVersionOut, error)
}

// doer http client
type doer interface {
	Do(ctx context.Context, operationID, method, path string, in any, query ...[2]string) ([]byte, error)
}

func NewHandler(doer doer) FlinkApplicationVersionHandler {
	return FlinkApplicationVersionHandler{doer}
}

type FlinkApplicationVersionHandler struct {
	doer doer
}

func (h *FlinkApplicationVersionHandler) ServiceFlinkCreateApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, in *ServiceFlinkCreateApplicationVersionIn) (*ServiceFlinkCreateApplicationVersionOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/flink/application/%s/version", url.PathEscape(project), url.PathEscape(serviceName), url.PathEscape(applicationId))
	b, err := h.doer.Do(ctx, "ServiceFlinkCreateApplicationVersion", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(ServiceFlinkCreateApplicationVersionOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *FlinkApplicationVersionHandler) ServiceFlinkDeleteApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, applicationVersionId string) (*ServiceFlinkDeleteApplicationVersionOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/flink/application/%s/version/%s", url.PathEscape(project), url.PathEscape(serviceName), url.PathEscape(applicationId), url.PathEscape(applicationVersionId))
	b, err := h.doer.Do(ctx, "ServiceFlinkDeleteApplicationVersion", "DELETE", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServiceFlinkDeleteApplicationVersionOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *FlinkApplicationVersionHandler) ServiceFlinkGetApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, applicationVersionId string) (*ServiceFlinkGetApplicationVersionOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/flink/application/%s/version/%s", url.PathEscape(project), url.PathEscape(serviceName), url.PathEscape(applicationId), url.PathEscape(applicationVersionId))
	b, err := h.doer.Do(ctx, "ServiceFlinkGetApplicationVersion", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServiceFlinkGetApplicationVersionOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *FlinkApplicationVersionHandler) ServiceFlinkValidateApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, in *ServiceFlinkValidateApplicationVersionIn) (*ServiceFlinkValidateApplicationVersionOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/flink/application/%s/version/validate", url.PathEscape(project), url.PathEscape(serviceName), url.PathEscape(applicationId))
	b, err := h.doer.Do(ctx, "ServiceFlinkValidateApplicationVersion", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(ServiceFlinkValidateApplicationVersionOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type ColumnOut struct {
	DataType  string  `json:"data_type"`           // The data type of the column
	Extras    *string `json:"extras,omitempty"`    // Column extra information
	Key       *string `json:"key,omitempty"`       // The key info of the column
	Name      string  `json:"name"`                // The name of the column
	Nullable  bool    `json:"nullable"`            // Whether the column is nullable, i.e. if true, the column is NOT NULL
	Watermark *string `json:"watermark,omitempty"` // Information of the watermark if the column is used for watermark.
}

// PositionOut Error position in the SQL.
type PositionOut struct {
	CharacterNumber    int `json:"character_number"`     // Character number of where the error starts, starting from 1.
	EndCharacterNumber int `json:"end_character_number"` // Character number of where the error starts, starting from 1.
	EndLineNumber      int `json:"end_line_number"`      // Line number of where the error ends, starting from 1.
	LineNumber         int `json:"line_number"`          // Line number of where the error starts, starting from 1.
}

// ServiceFlinkCreateApplicationVersionIn ServiceFlinkCreateApplicationVersionRequestBody
type ServiceFlinkCreateApplicationVersionIn struct {
	Sinks     []SinkIn   `json:"sinks"`
	Sources   []SourceIn `json:"sources"`
	Statement string     `json:"statement"` // Job SQL statement
}

// ServiceFlinkCreateApplicationVersionOut ServiceFlinkCreateApplicationVersionResponse
type ServiceFlinkCreateApplicationVersionOut struct {
	CreatedAt time.Time   `json:"created_at"` // Created at
	CreatedBy string      `json:"created_by"` // Created by
	Id        string      `json:"id"`         // ApplicationVersion ID
	Sinks     []SinkOut   `json:"sinks"`
	Sources   []SourceOut `json:"sources"`
	Statement string      `json:"statement"` // Job SQL statement
	Version   int         `json:"version"`   // Version number
}

// ServiceFlinkDeleteApplicationVersionOut ServiceFlinkDeleteApplicationVersionResponse
type ServiceFlinkDeleteApplicationVersionOut struct {
	CreatedAt time.Time   `json:"created_at"` // Created at
	CreatedBy string      `json:"created_by"` // Created by
	Id        string      `json:"id"`         // ApplicationVersion ID
	Sinks     []SinkOut   `json:"sinks"`
	Sources   []SourceOut `json:"sources"`
	Statement string      `json:"statement"` // Job SQL statement
	Version   int         `json:"version"`   // Version number
}

// ServiceFlinkGetApplicationVersionOut ServiceFlinkGetApplicationVersionResponse
type ServiceFlinkGetApplicationVersionOut struct {
	CreatedAt time.Time   `json:"created_at"` // Created at
	CreatedBy string      `json:"created_by"` // Created by
	Id        string      `json:"id"`         // ApplicationVersion ID
	Sinks     []SinkOut   `json:"sinks"`
	Sources   []SourceOut `json:"sources"`
	Statement string      `json:"statement"` // Job SQL statement
	Version   int         `json:"version"`   // Version number
}

// ServiceFlinkValidateApplicationVersionIn ServiceFlinkValidateApplicationVersionRequestBody
type ServiceFlinkValidateApplicationVersionIn struct {
	Sinks     []SinkIn   `json:"sinks"`
	Sources   []SourceIn `json:"sources"`
	Statement *string    `json:"statement,omitempty"` // Job SQL statement
}

// ServiceFlinkValidateApplicationVersionOut ServiceFlinkValidateApplicationVersionResponse
type ServiceFlinkValidateApplicationVersionOut struct {
	Sinks          []ServiceFlinkValidateApplicationVersionSinkOut   `json:"sinks"`                     // Sinks and sink validation errors
	Sources        []ServiceFlinkValidateApplicationVersionSourceOut `json:"sources"`                   // Sources and source validation errors
	Statement      *string                                           `json:"statement,omitempty"`       // Job SQL statement
	StatementError *StatementErrorOut                                `json:"statement_error,omitempty"` // Job validation error
}
type ServiceFlinkValidateApplicationVersionSinkOut struct {
	Columns       []ColumnOut    `json:"columns,omitempty"`
	CreateTable   string         `json:"create_table"`             // The CREATE TABLE statement
	IntegrationId *string        `json:"integration_id,omitempty"` // Integration ID
	Message       *string        `json:"message,omitempty"`        // The error message.
	Options       map[string]any `json:"options,omitempty"`        // Option
	Position      *PositionOut   `json:"position,omitempty"`       // Error position in the SQL.
	TableName     *string        `json:"table_name,omitempty"`     // Table name
}
type ServiceFlinkValidateApplicationVersionSourceOut struct {
	Columns       []ColumnOut    `json:"columns,omitempty"`
	CreateTable   string         `json:"create_table"`             // The CREATE TABLE statement
	IntegrationId *string        `json:"integration_id,omitempty"` // Integration ID
	Message       *string        `json:"message,omitempty"`        // The error message.
	Options       map[string]any `json:"options,omitempty"`        // Option
	Position      *PositionOut   `json:"position,omitempty"`       // Error position in the SQL.
	TableName     *string        `json:"table_name,omitempty"`     // Table name
}
type SinkIn struct {
	CreateTable   string  `json:"create_table"`             // The CREATE TABLE statement
	IntegrationId *string `json:"integration_id,omitempty"` // Integration ID
}
type SinkOut struct {
	Columns       []ColumnOut    `json:"columns"`
	CreateTable   string         `json:"create_table"`             // The CREATE TABLE statement
	IntegrationId *string        `json:"integration_id,omitempty"` // Integration ID
	Options       map[string]any `json:"options"`                  // Option
	TableId       string         `json:"table_id"`                 // Sink ID
	TableName     string         `json:"table_name"`               // Table name
}
type SourceIn struct {
	CreateTable   string  `json:"create_table"`             // The CREATE TABLE statement
	IntegrationId *string `json:"integration_id,omitempty"` // Integration ID
}
type SourceOut struct {
	Columns       []ColumnOut    `json:"columns"`
	CreateTable   string         `json:"create_table"`             // The CREATE TABLE statement
	IntegrationId *string        `json:"integration_id,omitempty"` // Integration ID
	Options       map[string]any `json:"options"`                  // Option
	TableId       string         `json:"table_id"`                 // Source ID
	TableName     string         `json:"table_name"`               // Table name
}

// StatementErrorOut Job validation error
type StatementErrorOut struct {
	Message  string       `json:"message"`            // The error message.
	Position *PositionOut `json:"position,omitempty"` // Error position in the SQL.
}
