// Code generated by Aiven. DO NOT EDIT.

package flinkapplicationversion

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

type Handler interface {
	// ServiceFlinkCreateApplicationVersion create a Flink ApplicationVersion
	// POST /project/{project}/service/{service_name}/flink/application/{application_id}/version
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkCreateApplicationVersion
	ServiceFlinkCreateApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, in *ServiceFlinkCreateApplicationVersionIn) (*ServiceFlinkCreateApplicationVersionOut, error)

	// ServiceFlinkDeleteApplicationVersion delete a Flink ApplicationVersion
	// DELETE /project/{project}/service/{service_name}/flink/application/{application_id}/version/{application_version_id}
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkDeleteApplicationVersion
	ServiceFlinkDeleteApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, applicationVersionId string) (*ServiceFlinkDeleteApplicationVersionOut, error)

	// ServiceFlinkGetApplicationVersion get a Flink ApplicationVersion
	// GET /project/{project}/service/{service_name}/flink/application/{application_id}/version/{application_version_id}
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkGetApplicationVersion
	ServiceFlinkGetApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, applicationVersionId string) (*ServiceFlinkGetApplicationVersionOut, error)

	// ServiceFlinkValidateApplicationVersion validate a Flink ApplicationVersion
	// POST /project/{project}/service/{service_name}/flink/application/{application_id}/version/validate
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkValidateApplicationVersion
	ServiceFlinkValidateApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, in *ServiceFlinkValidateApplicationVersionIn) (*ServiceFlinkValidateApplicationVersionOut, error)
}

func NewHandler(doer doer) FlinkApplicationVersionHandler {
	return FlinkApplicationVersionHandler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type FlinkApplicationVersionHandler struct {
	doer doer
}

func (h *FlinkApplicationVersionHandler) ServiceFlinkCreateApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, in *ServiceFlinkCreateApplicationVersionIn) (*ServiceFlinkCreateApplicationVersionOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/flink/application/%s/version", project, serviceName, applicationId)
	b, err := h.doer.Do(ctx, "ServiceFlinkCreateApplicationVersion", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(ServiceFlinkCreateApplicationVersionOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *FlinkApplicationVersionHandler) ServiceFlinkDeleteApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, applicationVersionId string) (*ServiceFlinkDeleteApplicationVersionOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/flink/application/%s/version/%s", project, serviceName, applicationId, applicationVersionId)
	b, err := h.doer.Do(ctx, "ServiceFlinkDeleteApplicationVersion", "DELETE", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServiceFlinkDeleteApplicationVersionOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *FlinkApplicationVersionHandler) ServiceFlinkGetApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, applicationVersionId string) (*ServiceFlinkGetApplicationVersionOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/flink/application/%s/version/%s", project, serviceName, applicationId, applicationVersionId)
	b, err := h.doer.Do(ctx, "ServiceFlinkGetApplicationVersion", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServiceFlinkGetApplicationVersionOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *FlinkApplicationVersionHandler) ServiceFlinkValidateApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, in *ServiceFlinkValidateApplicationVersionIn) (*ServiceFlinkValidateApplicationVersionOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/flink/application/%s/version/validate", project, serviceName, applicationId)
	b, err := h.doer.Do(ctx, "ServiceFlinkValidateApplicationVersion", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(ServiceFlinkValidateApplicationVersionOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type ColumnOut struct {
	DataType  string `json:"data_type"`
	Extras    string `json:"extras,omitempty"`
	Key       string `json:"key,omitempty"`
	Name      string `json:"name"`
	Nullable  bool   `json:"nullable"`
	Watermark string `json:"watermark,omitempty"`
}
type PositionOut struct {
	CharacterNumber    int `json:"character_number"`
	EndCharacterNumber int `json:"end_character_number"`
	EndLineNumber      int `json:"end_line_number"`
	LineNumber         int `json:"line_number"`
}
type ServiceFlinkCreateApplicationVersionIn struct {
	Sinks     []SinkIn   `json:"sinks"`
	Sources   []SourceIn `json:"sources"`
	Statement string     `json:"statement"`
}
type ServiceFlinkCreateApplicationVersionOut struct {
	CreatedAt time.Time   `json:"created_at"`
	CreatedBy string      `json:"created_by"`
	Id        string      `json:"id"`
	Sinks     []SinkOut   `json:"sinks"`
	Sources   []SourceOut `json:"sources"`
	Statement string      `json:"statement"`
	Version   int         `json:"version"`
}
type ServiceFlinkDeleteApplicationVersionOut struct {
	CreatedAt time.Time   `json:"created_at"`
	CreatedBy string      `json:"created_by"`
	Id        string      `json:"id"`
	Sinks     []SinkOut   `json:"sinks"`
	Sources   []SourceOut `json:"sources"`
	Statement string      `json:"statement"`
	Version   int         `json:"version"`
}
type ServiceFlinkGetApplicationVersionOut struct {
	CreatedAt time.Time   `json:"created_at"`
	CreatedBy string      `json:"created_by"`
	Id        string      `json:"id"`
	Sinks     []SinkOut   `json:"sinks"`
	Sources   []SourceOut `json:"sources"`
	Statement string      `json:"statement"`
	Version   int         `json:"version"`
}
type ServiceFlinkValidateApplicationVersionIn struct {
	Sinks     []SinkIn   `json:"sinks"`
	Sources   []SourceIn `json:"sources"`
	Statement string     `json:"statement,omitempty"`
}
type ServiceFlinkValidateApplicationVersionOut struct {
	Sinks          []SinkOutAlt       `json:"sinks"`
	Sources        []SourceOutAlt     `json:"sources"`
	Statement      string             `json:"statement,omitempty"`
	StatementError *StatementErrorOut `json:"statement_error,omitempty"`
}
type SinkIn struct {
	CreateTable   string `json:"create_table"`
	IntegrationId string `json:"integration_id,omitempty"`
}
type SinkOut struct {
	Columns       []ColumnOut    `json:"columns"`
	CreateTable   string         `json:"create_table"`
	IntegrationId string         `json:"integration_id,omitempty"`
	Options       map[string]any `json:"options"`
	TableId       string         `json:"table_id"`
	TableName     string         `json:"table_name"`
}
type SinkOutAlt struct {
	Columns       []ColumnOut    `json:"columns,omitempty"`
	CreateTable   string         `json:"create_table"`
	IntegrationId string         `json:"integration_id,omitempty"`
	Message       string         `json:"message,omitempty"`
	Options       map[string]any `json:"options,omitempty"`
	Position      *PositionOut   `json:"position,omitempty"`
	TableName     string         `json:"table_name,omitempty"`
}
type SourceIn struct {
	CreateTable   string `json:"create_table"`
	IntegrationId string `json:"integration_id,omitempty"`
}
type SourceOut struct {
	Columns       []ColumnOut    `json:"columns"`
	CreateTable   string         `json:"create_table"`
	IntegrationId string         `json:"integration_id,omitempty"`
	Options       map[string]any `json:"options"`
	TableId       string         `json:"table_id"`
	TableName     string         `json:"table_name"`
}
type SourceOutAlt struct {
	Columns       []ColumnOut    `json:"columns,omitempty"`
	CreateTable   string         `json:"create_table"`
	IntegrationId string         `json:"integration_id,omitempty"`
	Message       string         `json:"message,omitempty"`
	Options       map[string]any `json:"options,omitempty"`
	Position      *PositionOut   `json:"position,omitempty"`
	TableName     string         `json:"table_name,omitempty"`
}
type StatementErrorOut struct {
	Message  string       `json:"message"`
	Position *PositionOut `json:"position,omitempty"`
}
