// Code generated by Aiven. DO NOT EDIT.

package flinkjarapplicationversion

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"time"
)

type Handler interface {
	// ServiceFlinkCreateJarApplicationVersion [EXPERIMENTAL] Create a Flink JarApplicationVersion
	// POST /v1/project/{project}/service/{service_name}/flink/jar_application/{application_id}/version
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkCreateJarApplicationVersion
	ServiceFlinkCreateJarApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string) (*ServiceFlinkCreateJarApplicationVersionOut, error)

	// ServiceFlinkDeleteJarApplicationVersion [EXPERIMENTAL] Delete a Flink JarApplicationVersion
	// DELETE /v1/project/{project}/service/{service_name}/flink/jar_application/{application_id}/version/{application_version_id}
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkDeleteJarApplicationVersion
	ServiceFlinkDeleteJarApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, applicationVersionId string) (*ServiceFlinkDeleteJarApplicationVersionOut, error)

	// ServiceFlinkGetJarApplicationVersion [EXPERIMENTAL] Get a Flink JarApplicationVersion
	// GET /v1/project/{project}/service/{service_name}/flink/jar_application/{application_id}/version/{application_version_id}
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkGetJarApplicationVersion
	ServiceFlinkGetJarApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, applicationVersionId string) (*ServiceFlinkGetJarApplicationVersionOut, error)
}

// doer http client
type doer interface {
	Do(ctx context.Context, operationID, method, path string, in any, query ...[2]string) ([]byte, error)
}

func NewHandler(doer doer) FlinkJarApplicationVersionHandler {
	return FlinkJarApplicationVersionHandler{doer}
}

type FlinkJarApplicationVersionHandler struct {
	doer doer
}

func (h *FlinkJarApplicationVersionHandler) ServiceFlinkCreateJarApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string) (*ServiceFlinkCreateJarApplicationVersionOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/flink/jar_application/%s/version", url.PathEscape(project), url.PathEscape(serviceName), url.PathEscape(applicationId))
	b, err := h.doer.Do(ctx, "ServiceFlinkCreateJarApplicationVersion", "POST", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServiceFlinkCreateJarApplicationVersionOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *FlinkJarApplicationVersionHandler) ServiceFlinkDeleteJarApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, applicationVersionId string) (*ServiceFlinkDeleteJarApplicationVersionOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/flink/jar_application/%s/version/%s", url.PathEscape(project), url.PathEscape(serviceName), url.PathEscape(applicationId), url.PathEscape(applicationVersionId))
	b, err := h.doer.Do(ctx, "ServiceFlinkDeleteJarApplicationVersion", "DELETE", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServiceFlinkDeleteJarApplicationVersionOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *FlinkJarApplicationVersionHandler) ServiceFlinkGetJarApplicationVersion(ctx context.Context, project string, serviceName string, applicationId string, applicationVersionId string) (*ServiceFlinkGetJarApplicationVersionOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/flink/jar_application/%s/version/%s", url.PathEscape(project), url.PathEscape(serviceName), url.PathEscape(applicationId), url.PathEscape(applicationVersionId))
	b, err := h.doer.Do(ctx, "ServiceFlinkGetJarApplicationVersion", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServiceFlinkGetJarApplicationVersionOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileInfoOut Flink JarApplicationVersion FileInfo
type FileInfoOut struct {
	FileSha256         *string             `json:"file_sha256,omitempty"`          // sha256 of the file if known
	FileSize           *int                `json:"file_size,omitempty"`            // The size of the file in bytes
	FileStatus         FileStatusType      `json:"file_status,omitempty"`          // Indicates whether the uploaded .jar file has been verified by the system and deployment ready
	Url                *string             `json:"url,omitempty"`                  // The pre-signed url of the bucket where the .jar file is uploaded. Becomes null when the JarApplicationVersion is ready or failed.
	VerifyErrorCode    VerifyErrorCodeType `json:"verify_error_code,omitempty"`    // In the case file_status is FAILED, the error code of the failure.
	VerifyErrorMessage *string             `json:"verify_error_message,omitempty"` // In the case file_status is FAILED, may contain details about the failure.
}
type FileStatusType string

const (
	FileStatusTypeFailed  FileStatusType = "FAILED"
	FileStatusTypeInitial FileStatusType = "INITIAL"
	FileStatusTypeReady   FileStatusType = "READY"
)

func FileStatusTypeChoices() []string {
	return []string{"FAILED", "INITIAL", "READY"}
}

// ServiceFlinkCreateJarApplicationVersionOut ServiceFlinkCreateJarApplicationVersionResponse
type ServiceFlinkCreateJarApplicationVersionOut struct {
	CreatedAt time.Time    `json:"created_at"`          // The creation timestamp of this entity in ISO 8601 format, always in UTC
	CreatedBy string       `json:"created_by"`          // The creator of this entity
	FileInfo  *FileInfoOut `json:"file_info,omitempty"` // Flink JarApplicationVersion FileInfo
	Id        string       `json:"id"`                  // ApplicationVersion ID
	Version   int          `json:"version"`             // Version number
}

// ServiceFlinkDeleteJarApplicationVersionOut ServiceFlinkDeleteJarApplicationVersionResponse
type ServiceFlinkDeleteJarApplicationVersionOut struct {
	CreatedAt time.Time    `json:"created_at"`          // The creation timestamp of this entity in ISO 8601 format, always in UTC
	CreatedBy string       `json:"created_by"`          // The creator of this entity
	FileInfo  *FileInfoOut `json:"file_info,omitempty"` // Flink JarApplicationVersion FileInfo
	Id        string       `json:"id"`                  // ApplicationVersion ID
	Version   int          `json:"version"`             // Version number
}

// ServiceFlinkGetJarApplicationVersionOut ServiceFlinkGetJarApplicationVersionResponse
type ServiceFlinkGetJarApplicationVersionOut struct {
	CreatedAt time.Time    `json:"created_at"`          // The creation timestamp of this entity in ISO 8601 format, always in UTC
	CreatedBy string       `json:"created_by"`          // The creator of this entity
	FileInfo  *FileInfoOut `json:"file_info,omitempty"` // Flink JarApplicationVersion FileInfo
	Id        string       `json:"id"`                  // ApplicationVersion ID
	Version   int          `json:"version"`             // Version number
}
type VerifyErrorCodeType int

const (
	VerifyErrorCodeType1 VerifyErrorCodeType = 1
	VerifyErrorCodeType2 VerifyErrorCodeType = 2
	VerifyErrorCodeType3 VerifyErrorCodeType = 3
)

func VerifyErrorCodeTypeChoices() []int {
	return []int{1, 2, 3}
}
