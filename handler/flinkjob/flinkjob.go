// Code generated by Aiven. DO NOT EDIT.

package flinkjob

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
)

type Handler interface {
	// ServiceFlinkJobDetails get a Flink job info
	// GET /v1/project/{project}/service/{service_name}/flink/job/{job_id}
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkJobDetails
	ServiceFlinkJobDetails(ctx context.Context, project string, serviceName string, jobId string) (*ServiceFlinkJobDetailsOut, error)

	// ServiceFlinkJobsList get all Flink jobs
	// GET /v1/project/{project}/service/{service_name}/flink/job
	// https://api.aiven.io/doc/#tag/Service:_Flink/operation/ServiceFlinkJobsList
	ServiceFlinkJobsList(ctx context.Context, project string, serviceName string) ([]JobOut, error)
}

// doer http client
type doer interface {
	Do(ctx context.Context, operationID, method, path string, in any, query ...[2]string) ([]byte, error)
}

func NewHandler(doer doer) FlinkJobHandler {
	return FlinkJobHandler{doer}
}

type FlinkJobHandler struct {
	doer doer
}

func (h *FlinkJobHandler) ServiceFlinkJobDetails(ctx context.Context, project string, serviceName string, jobId string) (*ServiceFlinkJobDetailsOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/flink/job/%s", url.PathEscape(project), url.PathEscape(serviceName), url.PathEscape(jobId))
	b, err := h.doer.Do(ctx, "ServiceFlinkJobDetails", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServiceFlinkJobDetailsOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *FlinkJobHandler) ServiceFlinkJobsList(ctx context.Context, project string, serviceName string) ([]JobOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/flink/job", url.PathEscape(project), url.PathEscape(serviceName))
	b, err := h.doer.Do(ctx, "ServiceFlinkJobsList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(serviceFlinkJobsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Jobs, nil
}

type JobOut struct {
	Id     *string       `json:"id,omitempty"`     // Job ID
	Status JobStatusType `json:"status,omitempty"` // Job status
}
type JobStatusType string

const (
	JobStatusTypeCanceled     JobStatusType = "CANCELED"
	JobStatusTypeCancelling   JobStatusType = "CANCELLING"
	JobStatusTypeCreated      JobStatusType = "CREATED"
	JobStatusTypeFailed       JobStatusType = "FAILED"
	JobStatusTypeFailing      JobStatusType = "FAILING"
	JobStatusTypeFinished     JobStatusType = "FINISHED"
	JobStatusTypeInitializing JobStatusType = "INITIALIZING"
	JobStatusTypeReconciling  JobStatusType = "RECONCILING"
	JobStatusTypeRestarting   JobStatusType = "RESTARTING"
	JobStatusTypeRunning      JobStatusType = "RUNNING"
	JobStatusTypeSuspended    JobStatusType = "SUSPENDED"
)

func JobStatusTypeChoices() []string {
	return []string{"CANCELED", "CANCELLING", "CREATED", "FAILED", "FAILING", "FINISHED", "INITIALIZING", "RECONCILING", "RESTARTING", "RUNNING", "SUSPENDED"}
}

// ServiceFlinkJobDetailsOut ServiceFlinkJobDetailsResponse
type ServiceFlinkJobDetailsOut struct {
	Duration       *int                            `json:"duration,omitempty"`       // Duration of the job
	EndTime        *int                            `json:"end-time,omitempty"`       // End time of the job
	IsStoppable    *bool                           `json:"isStoppable,omitempty"`    // Whether the job is stoppable
	Jid            *string                         `json:"jid,omitempty"`            // Job ID
	MaxParallelism *int                            `json:"maxParallelism,omitempty"` // Max parallelism
	Name           *string                         `json:"name,omitempty"`           // Job name
	Now            *int                            `json:"now,omitempty"`            // Epoch time
	Plan           map[string]any                  `json:"plan,omitempty"`
	StartTime      *int                            `json:"start-time,omitempty"`    // Start time epoch
	State          ServiceFlinkJobDetailsStateType `json:"state,omitempty"`         // Job state
	StatusCounts   *StatusCountsOut                `json:"status-counts,omitempty"` // Status counts
	Timestamps     map[string]any                  `json:"timestamps,omitempty"`
	Vertices       []map[string]any                `json:"vertices,omitempty"`
}
type ServiceFlinkJobDetailsStateType string

const (
	ServiceFlinkJobDetailsStateTypeCanceled     ServiceFlinkJobDetailsStateType = "CANCELED"
	ServiceFlinkJobDetailsStateTypeCancelling   ServiceFlinkJobDetailsStateType = "CANCELLING"
	ServiceFlinkJobDetailsStateTypeCreated      ServiceFlinkJobDetailsStateType = "CREATED"
	ServiceFlinkJobDetailsStateTypeFailed       ServiceFlinkJobDetailsStateType = "FAILED"
	ServiceFlinkJobDetailsStateTypeFailing      ServiceFlinkJobDetailsStateType = "FAILING"
	ServiceFlinkJobDetailsStateTypeFinished     ServiceFlinkJobDetailsStateType = "FINISHED"
	ServiceFlinkJobDetailsStateTypeInitializing ServiceFlinkJobDetailsStateType = "INITIALIZING"
	ServiceFlinkJobDetailsStateTypeReconciling  ServiceFlinkJobDetailsStateType = "RECONCILING"
	ServiceFlinkJobDetailsStateTypeRestarting   ServiceFlinkJobDetailsStateType = "RESTARTING"
	ServiceFlinkJobDetailsStateTypeRunning      ServiceFlinkJobDetailsStateType = "RUNNING"
	ServiceFlinkJobDetailsStateTypeSuspended    ServiceFlinkJobDetailsStateType = "SUSPENDED"
)

func ServiceFlinkJobDetailsStateTypeChoices() []string {
	return []string{"CANCELED", "CANCELLING", "CREATED", "FAILED", "FAILING", "FINISHED", "INITIALIZING", "RECONCILING", "RESTARTING", "RUNNING", "SUSPENDED"}
}

// StatusCountsOut Status counts
type StatusCountsOut struct {
	Canceled     *int `json:"CANCELED,omitempty"`     // CANCELED
	Canceling    *int `json:"CANCELING,omitempty"`    // CANCELING
	Created      *int `json:"CREATED,omitempty"`      // CREATED
	Deploying    *int `json:"DEPLOYING,omitempty"`    // DEPLOYING
	Failed       *int `json:"FAILED,omitempty"`       // FAILED
	Finished     *int `json:"FINISHED,omitempty"`     // FINISHED
	Initializing *int `json:"INITIALIZING,omitempty"` // INITIALIZING
	Reconciling  *int `json:"RECONCILING,omitempty"`  // RECONCILING
	Running      *int `json:"RUNNING,omitempty"`      // RUNNING
	Scheduled    *int `json:"SCHEDULED,omitempty"`    // SCHEDULED
}

// serviceFlinkJobsListOut ServiceFlinkJobsListResponse
type serviceFlinkJobsListOut struct {
	Jobs []JobOut `json:"jobs,omitempty"` // Jobs
}
