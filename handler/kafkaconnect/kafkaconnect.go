// Code generated by Aiven. DO NOT EDIT.

package kafkaconnect

import (
	"context"
	"encoding/json"
	"fmt"
)

type Handler interface {
	// ServiceKafkaConnectCreateConnector create a Kafka Connect connector
	// POST /project/{project}/service/{service_name}/connectors
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectCreateConnector
	ServiceKafkaConnectCreateConnector(ctx context.Context, project string, serviceName string, in *ServiceKafkaConnectCreateConnectorIn) (*ServiceKafkaConnectCreateConnectorOut, error)

	// ServiceKafkaConnectDeleteConnector delete Kafka Connect connector
	// DELETE /project/{project}/service/{service_name}/connectors/{connector_name}
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectDeleteConnector
	ServiceKafkaConnectDeleteConnector(ctx context.Context, project string, serviceName string, connectorName string) error

	// ServiceKafkaConnectEditConnector edit Kafka Connect connector
	// PUT /project/{project}/service/{service_name}/connectors/{connector_name}
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectEditConnector
	ServiceKafkaConnectEditConnector(ctx context.Context, project string, serviceName string, connectorName string, in *ServiceKafkaConnectEditConnectorIn) (*ServiceKafkaConnectEditConnectorOut, error)

	// ServiceKafkaConnectGetAvailableConnectors get available Kafka Connect connectors
	// GET /project/{project}/service/{service_name}/available-connectors
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectGetAvailableConnectors
	ServiceKafkaConnectGetAvailableConnectors(ctx context.Context, project string, serviceName string) ([]PluginOut, error)

	// ServiceKafkaConnectGetConnectorConfiguration get Kafka Connect connector configuration schema
	// GET /project/{project}/service/{service_name}/connector-plugins/{connector_name}/configuration
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectGetConnectorConfiguration
	ServiceKafkaConnectGetConnectorConfiguration(ctx context.Context, project string, serviceName string, connectorName string) ([]ConfigurationSchemaOut, error)

	// ServiceKafkaConnectGetConnectorStatus get a Kafka Connect Connector status
	// GET /project/{project}/service/{service_name}/connectors/{connector_name}/status
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectGetConnectorStatus
	ServiceKafkaConnectGetConnectorStatus(ctx context.Context, project string, serviceName string, connectorName string) (*ServiceKafkaConnectGetConnectorStatusOut, error)

	// ServiceKafkaConnectList lists Kafka connectors
	// GET /project/{project}/service/{service_name}/connectors
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectList
	ServiceKafkaConnectList(ctx context.Context, project string, serviceName string) ([]ConnectorOut, error)

	// ServiceKafkaConnectPauseConnector pause a Kafka Connect Connector
	// POST /project/{project}/service/{service_name}/connectors/{connector_name}/pause
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectPauseConnector
	ServiceKafkaConnectPauseConnector(ctx context.Context, project string, serviceName string, connectorName string) error

	// ServiceKafkaConnectRestartConnector restart a Kafka Connect Connector
	// POST /project/{project}/service/{service_name}/connectors/{connector_name}/restart
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectRestartConnector
	ServiceKafkaConnectRestartConnector(ctx context.Context, project string, serviceName string, connectorName string) error

	// ServiceKafkaConnectRestartConnectorTask restart a Kafka Connect Connector task
	// POST /project/{project}/service/{service_name}/connectors/{connector_name}/tasks/{task_id}/restart
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectRestartConnectorTask
	ServiceKafkaConnectRestartConnectorTask(ctx context.Context, project string, serviceName string, connectorName string, taskId string) error

	// ServiceKafkaConnectResumeConnector resume a Kafka Connect Connector
	// POST /project/{project}/service/{service_name}/connectors/{connector_name}/resume
	// https://api.aiven.io/doc/#tag/Service:_Kafka/operation/ServiceKafkaConnectResumeConnector
	ServiceKafkaConnectResumeConnector(ctx context.Context, project string, serviceName string, connectorName string) error
}

func NewHandler(doer doer) KafkaConnectHandler {
	return KafkaConnectHandler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type KafkaConnectHandler struct {
	doer doer
}

func (h *KafkaConnectHandler) ServiceKafkaConnectCreateConnector(ctx context.Context, project string, serviceName string, in *ServiceKafkaConnectCreateConnectorIn) (*ServiceKafkaConnectCreateConnectorOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/connectors", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceKafkaConnectCreateConnector", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(serviceKafkaConnectCreateConnectorOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.Connector, nil
}
func (h *KafkaConnectHandler) ServiceKafkaConnectDeleteConnector(ctx context.Context, project string, serviceName string, connectorName string) error {
	path := fmt.Sprintf("/project/%s/service/%s/connectors/%s", project, serviceName, connectorName)
	_, err := h.doer.Do(ctx, "ServiceKafkaConnectDeleteConnector", "DELETE", path, nil)
	return err
}
func (h *KafkaConnectHandler) ServiceKafkaConnectEditConnector(ctx context.Context, project string, serviceName string, connectorName string, in *ServiceKafkaConnectEditConnectorIn) (*ServiceKafkaConnectEditConnectorOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/connectors/%s", project, serviceName, connectorName)
	b, err := h.doer.Do(ctx, "ServiceKafkaConnectEditConnector", "PUT", path, in)
	if err != nil {
		return nil, err
	}
	out := new(serviceKafkaConnectEditConnectorOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.Connector, nil
}
func (h *KafkaConnectHandler) ServiceKafkaConnectGetAvailableConnectors(ctx context.Context, project string, serviceName string) ([]PluginOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/available-connectors", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceKafkaConnectGetAvailableConnectors", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(serviceKafkaConnectGetAvailableConnectorsOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Plugins, nil
}
func (h *KafkaConnectHandler) ServiceKafkaConnectGetConnectorConfiguration(ctx context.Context, project string, serviceName string, connectorName string) ([]ConfigurationSchemaOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/connector-plugins/%s/configuration", project, serviceName, connectorName)
	b, err := h.doer.Do(ctx, "ServiceKafkaConnectGetConnectorConfiguration", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(serviceKafkaConnectGetConnectorConfigurationOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.ConfigurationSchema, nil
}
func (h *KafkaConnectHandler) ServiceKafkaConnectGetConnectorStatus(ctx context.Context, project string, serviceName string, connectorName string) (*ServiceKafkaConnectGetConnectorStatusOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/connectors/%s/status", project, serviceName, connectorName)
	b, err := h.doer.Do(ctx, "ServiceKafkaConnectGetConnectorStatus", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(serviceKafkaConnectGetConnectorStatusOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.Status, nil
}
func (h *KafkaConnectHandler) ServiceKafkaConnectList(ctx context.Context, project string, serviceName string) ([]ConnectorOut, error) {
	path := fmt.Sprintf("/project/%s/service/%s/connectors", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceKafkaConnectList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(serviceKafkaConnectListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Connectors, nil
}
func (h *KafkaConnectHandler) ServiceKafkaConnectPauseConnector(ctx context.Context, project string, serviceName string, connectorName string) error {
	path := fmt.Sprintf("/project/%s/service/%s/connectors/%s/pause", project, serviceName, connectorName)
	_, err := h.doer.Do(ctx, "ServiceKafkaConnectPauseConnector", "POST", path, nil)
	return err
}
func (h *KafkaConnectHandler) ServiceKafkaConnectRestartConnector(ctx context.Context, project string, serviceName string, connectorName string) error {
	path := fmt.Sprintf("/project/%s/service/%s/connectors/%s/restart", project, serviceName, connectorName)
	_, err := h.doer.Do(ctx, "ServiceKafkaConnectRestartConnector", "POST", path, nil)
	return err
}
func (h *KafkaConnectHandler) ServiceKafkaConnectRestartConnectorTask(ctx context.Context, project string, serviceName string, connectorName string, taskId string) error {
	path := fmt.Sprintf("/project/%s/service/%s/connectors/%s/tasks/%s/restart", project, serviceName, connectorName, taskId)
	_, err := h.doer.Do(ctx, "ServiceKafkaConnectRestartConnectorTask", "POST", path, nil)
	return err
}
func (h *KafkaConnectHandler) ServiceKafkaConnectResumeConnector(ctx context.Context, project string, serviceName string, connectorName string) error {
	path := fmt.Sprintf("/project/%s/service/%s/connectors/%s/resume", project, serviceName, connectorName)
	_, err := h.doer.Do(ctx, "ServiceKafkaConnectResumeConnector", "POST", path, nil)
	return err
}

type ConfigOut struct {
	ConnectorClass string `json:"connector.class,omitempty"`
	Name           string `json:"name"`
}
type ConfigurationSchemaOut struct {
	DefaultValue  string                  `json:"default_value"`
	DisplayName   string                  `json:"display_name"`
	Documentation string                  `json:"documentation"`
	Group         string                  `json:"group"`
	Importance    ImportanceType          `json:"importance"`
	Name          string                  `json:"name"`
	Order         int                     `json:"order"`
	Required      bool                    `json:"required"`
	Type          ConfigurationSchemaType `json:"type"`
	Width         WidthType               `json:"width"`
}
type ConfigurationSchemaType string

const (
	ConfigurationSchemaTypeString   ConfigurationSchemaType = "STRING"
	ConfigurationSchemaTypeInt      ConfigurationSchemaType = "INT"
	ConfigurationSchemaTypeShort    ConfigurationSchemaType = "SHORT"
	ConfigurationSchemaTypeLong     ConfigurationSchemaType = "LONG"
	ConfigurationSchemaTypeDouble   ConfigurationSchemaType = "DOUBLE"
	ConfigurationSchemaTypeBoolean  ConfigurationSchemaType = "BOOLEAN"
	ConfigurationSchemaTypeList     ConfigurationSchemaType = "LIST"
	ConfigurationSchemaTypeClass    ConfigurationSchemaType = "CLASS"
	ConfigurationSchemaTypePassword ConfigurationSchemaType = "PASSWORD"
)

func ConfigurationSchemaTypeChoices() []string {
	return []string{"STRING", "INT", "SHORT", "LONG", "DOUBLE", "BOOLEAN", "LIST", "CLASS", "PASSWORD"}
}

type ConnectorOut struct {
	Config ConfigOut `json:"config"`
	Name   string    `json:"name"`
	Plugin PluginOut `json:"plugin"`
	Tasks  []TaskOut `json:"tasks"`
}
type ImportanceType string

const (
	ImportanceTypeLow    ImportanceType = "LOW"
	ImportanceTypeMedium ImportanceType = "MEDIUM"
	ImportanceTypeHigh   ImportanceType = "HIGH"
)

func ImportanceTypeChoices() []string {
	return []string{"LOW", "MEDIUM", "HIGH"}
}

type PluginOut struct {
	Author      string     `json:"author"`
	Class       string     `json:"class"`
	DocUrl      string     `json:"docURL"`
	Preview     *bool      `json:"preview,omitempty"`
	PreviewInfo string     `json:"preview_info,omitempty"`
	Title       string     `json:"title"`
	Type        PluginType `json:"type"`
	Version     string     `json:"version"`
}
type PluginType string

const (
	PluginTypeSink    PluginType = "sink"
	PluginTypeSource  PluginType = "source"
	PluginTypeUnknown PluginType = "unknown"
)

func PluginTypeChoices() []string {
	return []string{"sink", "source", "unknown"}
}

type ServiceKafkaConnectConnectorStateType string

const (
	ServiceKafkaConnectConnectorStateTypeFailed     ServiceKafkaConnectConnectorStateType = "FAILED"
	ServiceKafkaConnectConnectorStateTypePaused     ServiceKafkaConnectConnectorStateType = "PAUSED"
	ServiceKafkaConnectConnectorStateTypeRunning    ServiceKafkaConnectConnectorStateType = "RUNNING"
	ServiceKafkaConnectConnectorStateTypeUnassigned ServiceKafkaConnectConnectorStateType = "UNASSIGNED"
)

func ServiceKafkaConnectConnectorStateTypeChoices() []string {
	return []string{"FAILED", "PAUSED", "RUNNING", "UNASSIGNED"}
}

type ServiceKafkaConnectCreateConnectorIn struct {
	ConnectorClass string `json:"connector.class,omitempty"`
	Name           string `json:"name"`
}
type ServiceKafkaConnectCreateConnectorOut struct {
	Config ConfigOut `json:"config"`
	Name   string    `json:"name"`
	Plugin PluginOut `json:"plugin"`
	Tasks  []TaskOut `json:"tasks"`
}
type ServiceKafkaConnectEditConnectorIn struct {
	ConnectorClass string `json:"connector.class,omitempty"`
	Name           string `json:"name"`
}
type ServiceKafkaConnectEditConnectorOut struct {
	Config ConfigOut `json:"config"`
	Name   string    `json:"name"`
	Plugin PluginOut `json:"plugin"`
	Tasks  []TaskOut `json:"tasks"`
}
type ServiceKafkaConnectGetConnectorStatusOut struct {
	State ServiceKafkaConnectConnectorStateType `json:"state"`
	Tasks []TaskOutAlt                          `json:"tasks"`
}
type TaskOut struct {
	Connector string `json:"connector"`
	Task      int    `json:"task"`
}
type TaskOutAlt struct {
	Id    int           `json:"id"`
	State TaskStateType `json:"state"`
	Trace string        `json:"trace"`
}
type TaskStateType string

const (
	TaskStateTypeFailed     TaskStateType = "FAILED"
	TaskStateTypePaused     TaskStateType = "PAUSED"
	TaskStateTypeRunning    TaskStateType = "RUNNING"
	TaskStateTypeUnassigned TaskStateType = "UNASSIGNED"
)

func TaskStateTypeChoices() []string {
	return []string{"FAILED", "PAUSED", "RUNNING", "UNASSIGNED"}
}

type WidthType string

const (
	WidthTypeNone   WidthType = "NONE"
	WidthTypeShort  WidthType = "SHORT"
	WidthTypeMedium WidthType = "MEDIUM"
	WidthTypeLong   WidthType = "LONG"
)

func WidthTypeChoices() []string {
	return []string{"NONE", "SHORT", "MEDIUM", "LONG"}
}

type serviceKafkaConnectCreateConnectorOut struct {
	Connector ServiceKafkaConnectCreateConnectorOut `json:"connector"`
}
type serviceKafkaConnectEditConnectorOut struct {
	Connector ServiceKafkaConnectEditConnectorOut `json:"connector"`
}
type serviceKafkaConnectGetAvailableConnectorsOut struct {
	Plugins []PluginOut `json:"plugins"`
}
type serviceKafkaConnectGetConnectorConfigurationOut struct {
	ConfigurationSchema []ConfigurationSchemaOut `json:"configuration_schema"`
}
type serviceKafkaConnectGetConnectorStatusOut struct {
	Status ServiceKafkaConnectGetConnectorStatusOut `json:"status"`
}
type serviceKafkaConnectListOut struct {
	Connectors []ConnectorOut `json:"connectors"`
}
