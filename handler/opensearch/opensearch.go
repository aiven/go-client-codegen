// Code generated by Aiven. DO NOT EDIT.

package opensearch

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"time"
)

type Handler interface {
	// ServiceOpenSearchAclGet show OpenSearch ACL configuration
	// GET /v1/project/{project}/service/{service_name}/opensearch/acl
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchAclGet
	ServiceOpenSearchAclGet(ctx context.Context, project string, serviceName string) (*ServiceOpenSearchAclGetOut, error)

	// ServiceOpenSearchAclSet set OpenSearch ACL configuration
	// POST /v1/project/{project}/service/{service_name}/opensearch/acl
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchAclSet
	ServiceOpenSearchAclSet(ctx context.Context, project string, serviceName string, in *ServiceOpenSearchAclSetIn) (*ServiceOpenSearchAclSetOut, error)

	// ServiceOpenSearchAclUpdate update OpenSearch ACL configuration
	// PUT /v1/project/{project}/service/{service_name}/opensearch/acl
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchAclUpdate
	ServiceOpenSearchAclUpdate(ctx context.Context, project string, serviceName string, in *ServiceOpenSearchAclUpdateIn) (*ServiceOpenSearchAclUpdateOut, error)

	// ServiceOpenSearchIndexDelete delete an OpenSearch index
	// DELETE /v1/project/{project}/service/{service_name}/index/{index_name}
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchIndexDelete
	ServiceOpenSearchIndexDelete(ctx context.Context, project string, serviceName string, indexName string) error

	// ServiceOpenSearchIndexList list OpenSearch indexes
	// GET /v1/project/{project}/service/{service_name}/index
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchIndexList
	ServiceOpenSearchIndexList(ctx context.Context, project string, serviceName string) ([]IndexeOut, error)

	// ServiceOpenSearchSecurityGet show OpenSearch security configuration status
	// GET /v1/project/{project}/service/{service_name}/opensearch/security
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchSecurityGet
	ServiceOpenSearchSecurityGet(ctx context.Context, project string, serviceName string) (*ServiceOpenSearchSecurityGetOut, error)

	// ServiceOpenSearchSecurityReset change Opensearch Security Admin password
	// PUT /v1/project/{project}/service/{service_name}/opensearch/security/admin
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchSecurityReset
	ServiceOpenSearchSecurityReset(ctx context.Context, project string, serviceName string, in *ServiceOpenSearchSecurityResetIn) (*ServiceOpenSearchSecurityResetOut, error)

	// ServiceOpenSearchSecuritySet enable Opensearch Security Admin by setting the password
	// POST /v1/project/{project}/service/{service_name}/opensearch/security/admin
	// https://api.aiven.io/doc/#tag/Service:_OpenSearch/operation/ServiceOpenSearchSecuritySet
	ServiceOpenSearchSecuritySet(ctx context.Context, project string, serviceName string, in *ServiceOpenSearchSecuritySetIn) (*ServiceOpenSearchSecuritySetOut, error)
}

// doer http client
type doer interface {
	Do(ctx context.Context, operationID, method, path string, in any, query ...[2]string) ([]byte, error)
}

func NewHandler(doer doer) OpenSearchHandler {
	return OpenSearchHandler{doer}
}

type OpenSearchHandler struct {
	doer doer
}

func (h *OpenSearchHandler) ServiceOpenSearchAclGet(ctx context.Context, project string, serviceName string) (*ServiceOpenSearchAclGetOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/opensearch/acl", url.PathEscape(project), url.PathEscape(serviceName))
	b, err := h.doer.Do(ctx, "ServiceOpenSearchAclGet", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServiceOpenSearchAclGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *OpenSearchHandler) ServiceOpenSearchAclSet(ctx context.Context, project string, serviceName string, in *ServiceOpenSearchAclSetIn) (*ServiceOpenSearchAclSetOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/opensearch/acl", url.PathEscape(project), url.PathEscape(serviceName))
	b, err := h.doer.Do(ctx, "ServiceOpenSearchAclSet", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(ServiceOpenSearchAclSetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *OpenSearchHandler) ServiceOpenSearchAclUpdate(ctx context.Context, project string, serviceName string, in *ServiceOpenSearchAclUpdateIn) (*ServiceOpenSearchAclUpdateOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/opensearch/acl", url.PathEscape(project), url.PathEscape(serviceName))
	b, err := h.doer.Do(ctx, "ServiceOpenSearchAclUpdate", "PUT", path, in)
	if err != nil {
		return nil, err
	}
	out := new(ServiceOpenSearchAclUpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *OpenSearchHandler) ServiceOpenSearchIndexDelete(ctx context.Context, project string, serviceName string, indexName string) error {
	path := fmt.Sprintf("/v1/project/%s/service/%s/index/%s", url.PathEscape(project), url.PathEscape(serviceName), url.PathEscape(indexName))
	_, err := h.doer.Do(ctx, "ServiceOpenSearchIndexDelete", "DELETE", path, nil)
	return err
}
func (h *OpenSearchHandler) ServiceOpenSearchIndexList(ctx context.Context, project string, serviceName string) ([]IndexeOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/index", url.PathEscape(project), url.PathEscape(serviceName))
	b, err := h.doer.Do(ctx, "ServiceOpenSearchIndexList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(serviceOpenSearchIndexListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Indexes, nil
}
func (h *OpenSearchHandler) ServiceOpenSearchSecurityGet(ctx context.Context, project string, serviceName string) (*ServiceOpenSearchSecurityGetOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/opensearch/security", url.PathEscape(project), url.PathEscape(serviceName))
	b, err := h.doer.Do(ctx, "ServiceOpenSearchSecurityGet", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServiceOpenSearchSecurityGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *OpenSearchHandler) ServiceOpenSearchSecurityReset(ctx context.Context, project string, serviceName string, in *ServiceOpenSearchSecurityResetIn) (*ServiceOpenSearchSecurityResetOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/opensearch/security/admin", url.PathEscape(project), url.PathEscape(serviceName))
	b, err := h.doer.Do(ctx, "ServiceOpenSearchSecurityReset", "PUT", path, in)
	if err != nil {
		return nil, err
	}
	out := new(ServiceOpenSearchSecurityResetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *OpenSearchHandler) ServiceOpenSearchSecuritySet(ctx context.Context, project string, serviceName string, in *ServiceOpenSearchSecuritySetIn) (*ServiceOpenSearchSecuritySetOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/opensearch/security/admin", url.PathEscape(project), url.PathEscape(serviceName))
	b, err := h.doer.Do(ctx, "ServiceOpenSearchSecuritySet", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(ServiceOpenSearchSecuritySetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type AclIn struct {
	Rules    []RuleIn `json:"rules"` // OpenSearch rules
	Username string   `json:"username"`
}
type AclOut struct {
	Rules    []RuleOut `json:"rules"` // OpenSearch rules
	Username string    `json:"username"`
}
type ElasticsearchVersionType string

const (
	ElasticsearchVersionType7 ElasticsearchVersionType = "7"
	ElasticsearchVersionType1 ElasticsearchVersionType = "1"
	ElasticsearchVersionType2 ElasticsearchVersionType = "2"
)

func ElasticsearchVersionTypeChoices() []string {
	return []string{"7", "1", "2"}
}

type HealthType string

const (
	HealthTypeGreen       HealthType = "green"
	HealthTypeYellow      HealthType = "yellow"
	HealthTypeRed         HealthType = "red"
	HealthTypeRedAsterisk HealthType = "red*"
	HealthTypeUnknown     HealthType = "unknown"
)

func HealthTypeChoices() []string {
	return []string{"green", "yellow", "red", "red*", "unknown"}
}

type IndexeOut struct {
	CreateTime          time.Time        `json:"create_time"`                      // Timestamp in ISO 8601 format, always in UTC
	Docs                *int             `json:"docs,omitempty"`                   // Number of documents in index. -1 means not available.
	Health              HealthType       `json:"health,omitempty"`                 // Index health
	IndexName           string           `json:"index_name"`                       // Index name
	NumberOfReplicas    int              `json:"number_of_replicas"`               // Number of replicas for an index
	NumberOfShards      int              `json:"number_of_shards"`                 // Number of shards in an index
	ReadOnlyAllowDelete *bool            `json:"read_only_allow_delete,omitempty"` // Whether an index is set as read-only (but allows deletion). null means unknown.
	Replication         *ReplicationOut  `json:"replication,omitempty"`            // Index replication
	Size                *int             `json:"size,omitempty"`                   // Index size in bytes. -1 means not available.
	Status              IndexeStatusType `json:"status,omitempty"`                 // Index status
}
type IndexeStatusType string

const (
	IndexeStatusTypeUnknown IndexeStatusType = "unknown"
	IndexeStatusTypeOpen    IndexeStatusType = "open"
	IndexeStatusTypeClose   IndexeStatusType = "close"
	IndexeStatusTypeNone    IndexeStatusType = "none"
)

func IndexeStatusTypeChoices() []string {
	return []string{"unknown", "open", "close", "none"}
}

// OpensearchAclConfigIn OpenSearch ACL configuration
type OpensearchAclConfigIn struct {
	Acls    []AclIn `json:"acls"`    // List of OpenSearch ACLs
	Enabled bool    `json:"enabled"` // Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access.
}

// OpensearchAclConfigOut OpenSearch ACL configuration
type OpensearchAclConfigOut struct {
	Acls    []AclOut `json:"acls"`    // List of OpenSearch ACLs
	Enabled bool     `json:"enabled"` // Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access.
}
type PermissionType string

const (
	PermissionTypeDeny      PermissionType = "deny"
	PermissionTypeAdmin     PermissionType = "admin"
	PermissionTypeRead      PermissionType = "read"
	PermissionTypeReadwrite PermissionType = "readwrite"
	PermissionTypeWrite     PermissionType = "write"
)

func PermissionTypeChoices() []string {
	return []string{"deny", "admin", "read", "readwrite", "write"}
}

// ReplicationOut Index replication
type ReplicationOut struct {
	LeaderIndex   *string `json:"leader_index,omitempty"`   // Leader index name
	LeaderProject *string `json:"leader_project,omitempty"` // Leader project name
	LeaderService *string `json:"leader_service,omitempty"` // Leader service name
}
type RuleIn struct {
	Index      string         `json:"index"`      // OpenSearch index pattern
	Permission PermissionType `json:"permission"` // OpenSearch permission
}
type RuleOut struct {
	Index      string         `json:"index"`      // OpenSearch index pattern
	Permission PermissionType `json:"permission"` // OpenSearch permission
}

// ServiceOpenSearchAclGetOut ServiceOpenSearchAclGetResponse
type ServiceOpenSearchAclGetOut struct {
	ElasticsearchVersion ElasticsearchVersionType `json:"elasticsearch_version,omitempty"` // Elasticsearch major version
	OpensearchAclConfig  OpensearchAclConfigOut   `json:"opensearch_acl_config"`           // OpenSearch ACL configuration
}

// ServiceOpenSearchAclSetIn ServiceOpenSearchAclSetRequestBody
type ServiceOpenSearchAclSetIn struct {
	ElasticsearchVersion ElasticsearchVersionType `json:"elasticsearch_version,omitempty"` // Elasticsearch major version
	OpensearchAclConfig  OpensearchAclConfigIn    `json:"opensearch_acl_config"`           // OpenSearch ACL configuration
}

// ServiceOpenSearchAclSetOut ServiceOpenSearchAclSetResponse
type ServiceOpenSearchAclSetOut struct {
	ElasticsearchVersion ElasticsearchVersionType `json:"elasticsearch_version,omitempty"` // Elasticsearch major version
	OpensearchAclConfig  OpensearchAclConfigOut   `json:"opensearch_acl_config"`           // OpenSearch ACL configuration
}

// ServiceOpenSearchAclUpdateIn ServiceOpenSearchAclUpdateRequestBody
type ServiceOpenSearchAclUpdateIn struct {
	ElasticsearchVersion ElasticsearchVersionType                        `json:"elasticsearch_version,omitempty"` // Elasticsearch major version
	OpensearchAclConfig  ServiceOpenSearchAclUpdateOpensearchAclConfigIn `json:"opensearch_acl_config"`           // OpenSearch ACL configuration
}

// ServiceOpenSearchAclUpdateOpensearchAclConfigIn OpenSearch ACL configuration
type ServiceOpenSearchAclUpdateOpensearchAclConfigIn struct {
	Acls    *[]AclIn `json:"acls,omitempty"`    // List of OpenSearch ACLs
	Enabled *bool    `json:"enabled,omitempty"` // Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access.
}

// ServiceOpenSearchAclUpdateOut ServiceOpenSearchAclUpdateResponse
type ServiceOpenSearchAclUpdateOut struct {
	ElasticsearchVersion ElasticsearchVersionType `json:"elasticsearch_version,omitempty"` // Elasticsearch major version
	OpensearchAclConfig  OpensearchAclConfigOut   `json:"opensearch_acl_config"`           // OpenSearch ACL configuration
}

// ServiceOpenSearchSecurityGetOut ServiceOpenSearchSecurityGetResponse
type ServiceOpenSearchSecurityGetOut struct {
	SecurityPluginAdminEnabled bool  `json:"security_plugin_admin_enabled"`     // security plugin admin defined
	SecurityPluginAvailable    bool  `json:"security_plugin_available"`         // Opensearch security available for the service
	SecurityPluginEnabled      *bool `json:"security_plugin_enabled,omitempty"` // Opensearch security enabled for the service
}

// ServiceOpenSearchSecurityResetIn ServiceOpenSearchSecurityResetRequestBody
type ServiceOpenSearchSecurityResetIn struct {
	AdminPassword string `json:"admin_password"` // Current os-sec-admin password
	NewPassword   string `json:"new_password"`   // New os-sec-admin password
}

// ServiceOpenSearchSecurityResetOut ServiceOpenSearchSecurityResetResponse
type ServiceOpenSearchSecurityResetOut struct {
	SecurityPluginAdminEnabled bool  `json:"security_plugin_admin_enabled"`     // security plugin admin defined
	SecurityPluginAvailable    bool  `json:"security_plugin_available"`         // Opensearch security available for the service
	SecurityPluginEnabled      *bool `json:"security_plugin_enabled,omitempty"` // Opensearch security enabled for the service
}

// ServiceOpenSearchSecuritySetIn ServiceOpenSearchSecuritySetRequestBody
type ServiceOpenSearchSecuritySetIn struct {
	AdminPassword string `json:"admin_password"` // os-sec-admin password
}

// ServiceOpenSearchSecuritySetOut ServiceOpenSearchSecuritySetResponse
type ServiceOpenSearchSecuritySetOut struct {
	SecurityPluginAdminEnabled bool  `json:"security_plugin_admin_enabled"`     // security plugin admin defined
	SecurityPluginAvailable    bool  `json:"security_plugin_available"`         // Opensearch security available for the service
	SecurityPluginEnabled      *bool `json:"security_plugin_enabled,omitempty"` // Opensearch security enabled for the service
}

// serviceOpenSearchIndexListOut ServiceOpenSearchIndexListResponse
type serviceOpenSearchIndexListOut struct {
	Indexes []IndexeOut `json:"indexes"` // List of OpenSearch indexes
}
