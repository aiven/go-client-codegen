// Code generated by Aiven. DO NOT EDIT.

package privatelink

import (
	"context"
	"encoding/json"
	"fmt"
)

type Handler interface {
	// PublicPrivatelinkAvailabilityList list privatelink clouds and prices
	// GET /v1/tenants/{tenant}/privatelink-availability
	// https://api.aiven.io/doc/#tag/Cloud_platforms/operation/PublicPrivatelinkAvailabilityList
	PublicPrivatelinkAvailabilityList(ctx context.Context, tenant string) ([]PrivatelinkAvailabilityOut, error)

	// ServicePrivatelinkAWSConnectionList list VPC Endpoint connections for an AWS Privatelink Endpoint Service
	// GET /v1/project/{project}/service/{service_name}/privatelink/aws/connections
	// https://api.aiven.io/doc/#tag/Service/operation/ServicePrivatelinkAWSConnectionList
	ServicePrivatelinkAWSConnectionList(ctx context.Context, project string, serviceName string) ([]ConnectionOut, error)

	// ServicePrivatelinkAWSCreate create an AWS Privatelink Endpoint Service
	// POST /v1/project/{project}/service/{service_name}/privatelink/aws
	// https://api.aiven.io/doc/#tag/Service/operation/ServicePrivatelinkAWSCreate
	ServicePrivatelinkAWSCreate(ctx context.Context, project string, serviceName string, in *ServicePrivatelinkAwscreateIn) (*ServicePrivatelinkAwscreateOut, error)

	// ServicePrivatelinkAWSDelete delete an AWS Privatelink Endpoint Service
	// DELETE /v1/project/{project}/service/{service_name}/privatelink/aws
	// https://api.aiven.io/doc/#tag/Service/operation/ServicePrivatelinkAWSDelete
	ServicePrivatelinkAWSDelete(ctx context.Context, project string, serviceName string) (*ServicePrivatelinkAwsdeleteOut, error)

	// ServicePrivatelinkAWSGet get AWS Privatelink Endpoint Service information
	// GET /v1/project/{project}/service/{service_name}/privatelink/aws
	// https://api.aiven.io/doc/#tag/Service/operation/ServicePrivatelinkAWSGet
	ServicePrivatelinkAWSGet(ctx context.Context, project string, serviceName string) (*ServicePrivatelinkAwsgetOut, error)

	// ServicePrivatelinkAWSUpdate update an AWS Privatelink Endpoint Service
	// PUT /v1/project/{project}/service/{service_name}/privatelink/aws
	// https://api.aiven.io/doc/#tag/Service/operation/ServicePrivatelinkAWSUpdate
	ServicePrivatelinkAWSUpdate(ctx context.Context, project string, serviceName string, in *ServicePrivatelinkAwsupdateIn) (*ServicePrivatelinkAwsupdateOut, error)

	// ServicePrivatelinkAzureConnectionApproval approve an Azure private endpoint connection pending user approval
	// POST /v1/project/{project}/service/{service_name}/privatelink/azure/connections/{privatelink_connection_id}/approve
	// https://api.aiven.io/doc/#tag/Service/operation/ServicePrivatelinkAzureConnectionApproval
	ServicePrivatelinkAzureConnectionApproval(ctx context.Context, project string, serviceName string, privatelinkConnectionId string) (*ServicePrivatelinkAzureConnectionApprovalOut, error)

	// ServicePrivatelinkAzureConnectionList list private endpoint connections for an Azure Privatelink Service
	// GET /v1/project/{project}/service/{service_name}/privatelink/azure/connections
	// https://api.aiven.io/doc/#tag/Service/operation/ServicePrivatelinkAzureConnectionList
	ServicePrivatelinkAzureConnectionList(ctx context.Context, project string, serviceName string) ([]ConnectionOutAlt, error)

	// ServicePrivatelinkAzureConnectionUpdate update a private endpoint connection for an Azure Privatelink Service
	// PUT /v1/project/{project}/service/{service_name}/privatelink/azure/connections/{privatelink_connection_id}
	// https://api.aiven.io/doc/#tag/Service/operation/ServicePrivatelinkAzureConnectionUpdate
	ServicePrivatelinkAzureConnectionUpdate(ctx context.Context, project string, serviceName string, privatelinkConnectionId string, in *ServicePrivatelinkAzureConnectionUpdateIn) (*ServicePrivatelinkAzureConnectionUpdateOut, error)

	// ServicePrivatelinkAzureCreate create an Azure Privatelink Service
	// POST /v1/project/{project}/service/{service_name}/privatelink/azure
	// https://api.aiven.io/doc/#tag/Service/operation/ServicePrivatelinkAzureCreate
	ServicePrivatelinkAzureCreate(ctx context.Context, project string, serviceName string, in *ServicePrivatelinkAzureCreateIn) (*ServicePrivatelinkAzureCreateOut, error)

	// ServicePrivatelinkAzureDelete delete an Azure Privatelink Service
	// DELETE /v1/project/{project}/service/{service_name}/privatelink/azure
	// https://api.aiven.io/doc/#tag/Service/operation/ServicePrivatelinkAzureDelete
	ServicePrivatelinkAzureDelete(ctx context.Context, project string, serviceName string) (*ServicePrivatelinkAzureDeleteOut, error)

	// ServicePrivatelinkAzureGet get Azure Privatelink Service information
	// GET /v1/project/{project}/service/{service_name}/privatelink/azure
	// https://api.aiven.io/doc/#tag/Service/operation/ServicePrivatelinkAzureGet
	ServicePrivatelinkAzureGet(ctx context.Context, project string, serviceName string) (*ServicePrivatelinkAzureGetOut, error)

	// ServicePrivatelinkAzureUpdate update an Azure Privatelink Service
	// PUT /v1/project/{project}/service/{service_name}/privatelink/azure
	// https://api.aiven.io/doc/#tag/Service/operation/ServicePrivatelinkAzureUpdate
	ServicePrivatelinkAzureUpdate(ctx context.Context, project string, serviceName string, in *ServicePrivatelinkAzureUpdateIn) (*ServicePrivatelinkAzureUpdateOut, error)
}

func NewHandler(doer doer) PrivatelinkHandler {
	return PrivatelinkHandler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type PrivatelinkHandler struct {
	doer doer
}

func (h *PrivatelinkHandler) PublicPrivatelinkAvailabilityList(ctx context.Context, tenant string) ([]PrivatelinkAvailabilityOut, error) {
	path := fmt.Sprintf("/v1/tenants/%s/privatelink-availability", tenant)
	b, err := h.doer.Do(ctx, "PublicPrivatelinkAvailabilityList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(publicPrivatelinkAvailabilityListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.PrivatelinkAvailability, nil
}
func (h *PrivatelinkHandler) ServicePrivatelinkAWSConnectionList(ctx context.Context, project string, serviceName string) ([]ConnectionOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/privatelink/aws/connections", project, serviceName)
	b, err := h.doer.Do(ctx, "ServicePrivatelinkAWSConnectionList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(servicePrivatelinkAwsconnectionListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Connections, nil
}
func (h *PrivatelinkHandler) ServicePrivatelinkAWSCreate(ctx context.Context, project string, serviceName string, in *ServicePrivatelinkAwscreateIn) (*ServicePrivatelinkAwscreateOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/privatelink/aws", project, serviceName)
	b, err := h.doer.Do(ctx, "ServicePrivatelinkAWSCreate", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(ServicePrivatelinkAwscreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *PrivatelinkHandler) ServicePrivatelinkAWSDelete(ctx context.Context, project string, serviceName string) (*ServicePrivatelinkAwsdeleteOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/privatelink/aws", project, serviceName)
	b, err := h.doer.Do(ctx, "ServicePrivatelinkAWSDelete", "DELETE", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServicePrivatelinkAwsdeleteOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *PrivatelinkHandler) ServicePrivatelinkAWSGet(ctx context.Context, project string, serviceName string) (*ServicePrivatelinkAwsgetOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/privatelink/aws", project, serviceName)
	b, err := h.doer.Do(ctx, "ServicePrivatelinkAWSGet", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServicePrivatelinkAwsgetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *PrivatelinkHandler) ServicePrivatelinkAWSUpdate(ctx context.Context, project string, serviceName string, in *ServicePrivatelinkAwsupdateIn) (*ServicePrivatelinkAwsupdateOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/privatelink/aws", project, serviceName)
	b, err := h.doer.Do(ctx, "ServicePrivatelinkAWSUpdate", "PUT", path, in)
	if err != nil {
		return nil, err
	}
	out := new(ServicePrivatelinkAwsupdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *PrivatelinkHandler) ServicePrivatelinkAzureConnectionApproval(ctx context.Context, project string, serviceName string, privatelinkConnectionId string) (*ServicePrivatelinkAzureConnectionApprovalOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/privatelink/azure/connections/%s/approve", project, serviceName, privatelinkConnectionId)
	b, err := h.doer.Do(ctx, "ServicePrivatelinkAzureConnectionApproval", "POST", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServicePrivatelinkAzureConnectionApprovalOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *PrivatelinkHandler) ServicePrivatelinkAzureConnectionList(ctx context.Context, project string, serviceName string) ([]ConnectionOutAlt, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/privatelink/azure/connections", project, serviceName)
	b, err := h.doer.Do(ctx, "ServicePrivatelinkAzureConnectionList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(servicePrivatelinkAzureConnectionListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Connections, nil
}
func (h *PrivatelinkHandler) ServicePrivatelinkAzureConnectionUpdate(ctx context.Context, project string, serviceName string, privatelinkConnectionId string, in *ServicePrivatelinkAzureConnectionUpdateIn) (*ServicePrivatelinkAzureConnectionUpdateOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/privatelink/azure/connections/%s", project, serviceName, privatelinkConnectionId)
	b, err := h.doer.Do(ctx, "ServicePrivatelinkAzureConnectionUpdate", "PUT", path, in)
	if err != nil {
		return nil, err
	}
	out := new(ServicePrivatelinkAzureConnectionUpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *PrivatelinkHandler) ServicePrivatelinkAzureCreate(ctx context.Context, project string, serviceName string, in *ServicePrivatelinkAzureCreateIn) (*ServicePrivatelinkAzureCreateOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/privatelink/azure", project, serviceName)
	b, err := h.doer.Do(ctx, "ServicePrivatelinkAzureCreate", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(ServicePrivatelinkAzureCreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *PrivatelinkHandler) ServicePrivatelinkAzureDelete(ctx context.Context, project string, serviceName string) (*ServicePrivatelinkAzureDeleteOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/privatelink/azure", project, serviceName)
	b, err := h.doer.Do(ctx, "ServicePrivatelinkAzureDelete", "DELETE", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServicePrivatelinkAzureDeleteOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *PrivatelinkHandler) ServicePrivatelinkAzureGet(ctx context.Context, project string, serviceName string) (*ServicePrivatelinkAzureGetOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/privatelink/azure", project, serviceName)
	b, err := h.doer.Do(ctx, "ServicePrivatelinkAzureGet", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServicePrivatelinkAzureGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *PrivatelinkHandler) ServicePrivatelinkAzureUpdate(ctx context.Context, project string, serviceName string, in *ServicePrivatelinkAzureUpdateIn) (*ServicePrivatelinkAzureUpdateOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/privatelink/azure", project, serviceName)
	b, err := h.doer.Do(ctx, "ServicePrivatelinkAzureUpdate", "PUT", path, in)
	if err != nil {
		return nil, err
	}
	out := new(ServicePrivatelinkAzureUpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type ConnectionOut struct {
	DnsName                 string              `json:"dns_name"`
	PrivatelinkConnectionId string              `json:"privatelink_connection_id,omitempty"`
	State                   ConnectionStateType `json:"state"`
	VpcEndpointId           string              `json:"vpc_endpoint_id"`
}
type ConnectionOutAlt struct {
	PrivateEndpointId       string              `json:"private_endpoint_id"`
	PrivatelinkConnectionId string              `json:"privatelink_connection_id,omitempty"`
	State                   ConnectionStateType `json:"state"`
	UserIpAddress           string              `json:"user_ip_address"`
}
type ConnectionStateType string

const (
	ConnectionStateTypePendingUserApproval ConnectionStateType = "pending-user-approval"
	ConnectionStateTypeUserApproved        ConnectionStateType = "user-approved"
	ConnectionStateTypeConnected           ConnectionStateType = "connected"
	ConnectionStateTypeActive              ConnectionStateType = "active"
)

func ConnectionStateTypeChoices() []string {
	return []string{"pending-user-approval", "user-approved", "connected", "active"}
}

type PrivatelinkAvailabilityOut struct {
	CloudName string `json:"cloud_name"`
	PriceUsd  string `json:"price_usd"`
}
type ServicePrivatelinkAwscreateIn struct {
	Principals []string `json:"principals"`
}
type ServicePrivatelinkAwscreateOut struct {
	AwsServiceId   string                               `json:"aws_service_id,omitempty"`
	AwsServiceName string                               `json:"aws_service_name,omitempty"`
	Principals     []string                             `json:"principals"`
	State          ServicePrivatelinkAwscreateStateType `json:"state"`
}
type ServicePrivatelinkAwscreateStateType string

const (
	ServicePrivatelinkAwscreateStateTypeCreating ServicePrivatelinkAwscreateStateType = "creating"
	ServicePrivatelinkAwscreateStateTypeActive   ServicePrivatelinkAwscreateStateType = "active"
	ServicePrivatelinkAwscreateStateTypeDeleting ServicePrivatelinkAwscreateStateType = "deleting"
)

func ServicePrivatelinkAwscreateStateTypeChoices() []string {
	return []string{"creating", "active", "deleting"}
}

type ServicePrivatelinkAwsdeleteOut struct {
	AwsServiceId   string                               `json:"aws_service_id,omitempty"`
	AwsServiceName string                               `json:"aws_service_name,omitempty"`
	Principals     []string                             `json:"principals"`
	State          ServicePrivatelinkAwsdeleteStateType `json:"state"`
}
type ServicePrivatelinkAwsdeleteStateType string

const (
	ServicePrivatelinkAwsdeleteStateTypeCreating ServicePrivatelinkAwsdeleteStateType = "creating"
	ServicePrivatelinkAwsdeleteStateTypeActive   ServicePrivatelinkAwsdeleteStateType = "active"
	ServicePrivatelinkAwsdeleteStateTypeDeleting ServicePrivatelinkAwsdeleteStateType = "deleting"
)

func ServicePrivatelinkAwsdeleteStateTypeChoices() []string {
	return []string{"creating", "active", "deleting"}
}

type ServicePrivatelinkAwsgetOut struct {
	AwsServiceId   string                            `json:"aws_service_id,omitempty"`
	AwsServiceName string                            `json:"aws_service_name,omitempty"`
	Principals     []string                          `json:"principals"`
	State          ServicePrivatelinkAwsgetStateType `json:"state"`
}
type ServicePrivatelinkAwsgetStateType string

const (
	ServicePrivatelinkAwsgetStateTypeCreating ServicePrivatelinkAwsgetStateType = "creating"
	ServicePrivatelinkAwsgetStateTypeActive   ServicePrivatelinkAwsgetStateType = "active"
	ServicePrivatelinkAwsgetStateTypeDeleting ServicePrivatelinkAwsgetStateType = "deleting"
)

func ServicePrivatelinkAwsgetStateTypeChoices() []string {
	return []string{"creating", "active", "deleting"}
}

type ServicePrivatelinkAwsupdateIn struct {
	Principals []string `json:"principals"`
}
type ServicePrivatelinkAwsupdateOut struct {
	AwsServiceId   string                               `json:"aws_service_id,omitempty"`
	AwsServiceName string                               `json:"aws_service_name,omitempty"`
	Principals     []string                             `json:"principals"`
	State          ServicePrivatelinkAwsupdateStateType `json:"state"`
}
type ServicePrivatelinkAwsupdateStateType string

const (
	ServicePrivatelinkAwsupdateStateTypeCreating ServicePrivatelinkAwsupdateStateType = "creating"
	ServicePrivatelinkAwsupdateStateTypeActive   ServicePrivatelinkAwsupdateStateType = "active"
	ServicePrivatelinkAwsupdateStateTypeDeleting ServicePrivatelinkAwsupdateStateType = "deleting"
)

func ServicePrivatelinkAwsupdateStateTypeChoices() []string {
	return []string{"creating", "active", "deleting"}
}

type ServicePrivatelinkAzureConnectionApprovalOut struct {
	PrivateEndpointId       string                                             `json:"private_endpoint_id"`
	PrivatelinkConnectionId string                                             `json:"privatelink_connection_id,omitempty"`
	State                   ServicePrivatelinkAzureConnectionApprovalStateType `json:"state"`
	UserIpAddress           string                                             `json:"user_ip_address"`
}
type ServicePrivatelinkAzureConnectionApprovalStateType string

const (
	ServicePrivatelinkAzureConnectionApprovalStateTypePendingUserApproval ServicePrivatelinkAzureConnectionApprovalStateType = "pending-user-approval"
	ServicePrivatelinkAzureConnectionApprovalStateTypeUserApproved        ServicePrivatelinkAzureConnectionApprovalStateType = "user-approved"
	ServicePrivatelinkAzureConnectionApprovalStateTypeConnected           ServicePrivatelinkAzureConnectionApprovalStateType = "connected"
	ServicePrivatelinkAzureConnectionApprovalStateTypeActive              ServicePrivatelinkAzureConnectionApprovalStateType = "active"
)

func ServicePrivatelinkAzureConnectionApprovalStateTypeChoices() []string {
	return []string{"pending-user-approval", "user-approved", "connected", "active"}
}

type ServicePrivatelinkAzureConnectionStateType string

const (
	ServicePrivatelinkAzureConnectionStateTypePendingUserApproval ServicePrivatelinkAzureConnectionStateType = "pending-user-approval"
	ServicePrivatelinkAzureConnectionStateTypeUserApproved        ServicePrivatelinkAzureConnectionStateType = "user-approved"
	ServicePrivatelinkAzureConnectionStateTypeConnected           ServicePrivatelinkAzureConnectionStateType = "connected"
	ServicePrivatelinkAzureConnectionStateTypeActive              ServicePrivatelinkAzureConnectionStateType = "active"
)

func ServicePrivatelinkAzureConnectionStateTypeChoices() []string {
	return []string{"pending-user-approval", "user-approved", "connected", "active"}
}

type ServicePrivatelinkAzureConnectionUpdateIn struct {
	UserIpAddress string `json:"user_ip_address"`
}
type ServicePrivatelinkAzureConnectionUpdateOut struct {
	PrivateEndpointId       string                                     `json:"private_endpoint_id"`
	PrivatelinkConnectionId string                                     `json:"privatelink_connection_id,omitempty"`
	State                   ServicePrivatelinkAzureConnectionStateType `json:"state"`
	UserIpAddress           string                                     `json:"user_ip_address"`
}
type ServicePrivatelinkAzureCreateIn struct {
	UserSubscriptionIds []string `json:"user_subscription_ids"`
}
type ServicePrivatelinkAzureCreateOut struct {
	AzureServiceAlias   string                           `json:"azure_service_alias,omitempty"`
	AzureServiceId      string                           `json:"azure_service_id,omitempty"`
	State               ServicePrivatelinkAzureStateType `json:"state"`
	UserSubscriptionIds []string                         `json:"user_subscription_ids"`
}
type ServicePrivatelinkAzureDeleteOut struct {
	AzureServiceAlias   string                           `json:"azure_service_alias,omitempty"`
	AzureServiceId      string                           `json:"azure_service_id,omitempty"`
	State               ServicePrivatelinkAzureStateType `json:"state"`
	UserSubscriptionIds []string                         `json:"user_subscription_ids"`
}
type ServicePrivatelinkAzureGetOut struct {
	AzureServiceAlias   string                           `json:"azure_service_alias,omitempty"`
	AzureServiceId      string                           `json:"azure_service_id,omitempty"`
	State               ServicePrivatelinkAzureStateType `json:"state"`
	UserSubscriptionIds []string                         `json:"user_subscription_ids"`
}
type ServicePrivatelinkAzureStateType string

const (
	ServicePrivatelinkAzureStateTypeCreating ServicePrivatelinkAzureStateType = "creating"
	ServicePrivatelinkAzureStateTypeActive   ServicePrivatelinkAzureStateType = "active"
	ServicePrivatelinkAzureStateTypeDeleting ServicePrivatelinkAzureStateType = "deleting"
)

func ServicePrivatelinkAzureStateTypeChoices() []string {
	return []string{"creating", "active", "deleting"}
}

type ServicePrivatelinkAzureUpdateIn struct {
	UserSubscriptionIds []string `json:"user_subscription_ids"`
}
type ServicePrivatelinkAzureUpdateOut struct {
	AzureServiceAlias   string                           `json:"azure_service_alias,omitempty"`
	AzureServiceId      string                           `json:"azure_service_id,omitempty"`
	State               ServicePrivatelinkAzureStateType `json:"state"`
	UserSubscriptionIds []string                         `json:"user_subscription_ids"`
}
type publicPrivatelinkAvailabilityListOut struct {
	PrivatelinkAvailability []PrivatelinkAvailabilityOut `json:"privatelink_availability"`
}
type servicePrivatelinkAwsconnectionListOut struct {
	Connections []ConnectionOut `json:"connections"`
}
type servicePrivatelinkAzureConnectionListOut struct {
	Connections []ConnectionOutAlt `json:"connections"`
}
