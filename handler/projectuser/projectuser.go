// Code generated by Aiven. DO NOT EDIT.

package projectuser

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"time"
)

type Handler interface {
	// ProjectUserList list users with access to the project. May contain same user multiple times if they belong to multiple teams associated to the project
	// GET /v1/project/{project}/users
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectUserList
	ProjectUserList(ctx context.Context, project string) (*ProjectUserListOut, error)

	// ProjectUserRemove remove user from the project
	// DELETE /v1/project/{project}/user/{user_email}
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectUserRemove
	ProjectUserRemove(ctx context.Context, project string, userEmail string) error

	// ProjectUserUpdate update a project user
	// PUT /v1/project/{project}/user/{user_email}
	// https://api.aiven.io/doc/#tag/Project/operation/ProjectUserUpdate
	ProjectUserUpdate(ctx context.Context, project string, userEmail string, in *ProjectUserUpdateIn) error
}

func NewHandler(doer doer) ProjectUserHandler {
	return ProjectUserHandler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type ProjectUserHandler struct {
	doer doer
}

func (h *ProjectUserHandler) ProjectUserList(ctx context.Context, project string) (*ProjectUserListOut, error) {
	path := fmt.Sprintf("/v1/project/%s/users", url.PathEscape(project))
	b, err := h.doer.Do(ctx, "ProjectUserList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ProjectUserListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *ProjectUserHandler) ProjectUserRemove(ctx context.Context, project string, userEmail string) error {
	path := fmt.Sprintf("/v1/project/%s/user/%s", url.PathEscape(project), url.PathEscape(userEmail))
	_, err := h.doer.Do(ctx, "ProjectUserRemove", "DELETE", path, nil)
	return err
}
func (h *ProjectUserHandler) ProjectUserUpdate(ctx context.Context, project string, userEmail string, in *ProjectUserUpdateIn) error {
	path := fmt.Sprintf("/v1/project/%s/user/%s", url.PathEscape(project), url.PathEscape(userEmail))
	_, err := h.doer.Do(ctx, "ProjectUserUpdate", "PUT", path, in)
	return err
}

type GroupUserOut struct {
	MemberType  MemberType `json:"member_type"`   // Project member type
	RealName    string     `json:"real_name"`     // User real name
	UserEmail   string     `json:"user_email"`    // User email address
	UserGroupId string     `json:"user_group_id"` // User group ID
}
type InvitationOut struct {
	InviteTime        time.Time  `json:"invite_time"`         // Timestamp in ISO 8601 format, always in UTC
	InvitedUserEmail  string     `json:"invited_user_email"`  // User email address
	InvitingUserEmail string     `json:"inviting_user_email"` // User email address
	MemberType        MemberType `json:"member_type"`         // Project member type
}
type MemberType string

const (
	MemberTypeAdmin     MemberType = "admin"
	MemberTypeDeveloper MemberType = "developer"
	MemberTypeOperator  MemberType = "operator"
	MemberTypeReadOnly  MemberType = "read_only"
)

func MemberTypeChoices() []string {
	return []string{"admin", "developer", "operator", "read_only"}
}

// ProjectUserListOut ProjectUserListResponse
type ProjectUserListOut struct {
	GroupUsers  []GroupUserOut  `json:"group_users"` // List of users in groups that have access to the project
	Invitations []InvitationOut `json:"invitations"` // List of pending invitations
	Users       []UserOut       `json:"users"`       // List of project's users
}

// ProjectUserUpdateIn ProjectUserUpdateRequestBody
type ProjectUserUpdateIn struct {
	MemberType MemberType `json:"member_type"` // Project member type
}
type UserOut struct {
	Auth           []string   `json:"auth"`                // List of user's required authentication methods
	BillingContact bool       `json:"billing_contact"`     // Set for project's billing contacts
	CreateTime     time.Time  `json:"create_time"`         // Timestamp in ISO 8601 format, always in UTC
	MemberType     MemberType `json:"member_type"`         // Project member type
	RealName       *string    `json:"real_name,omitempty"` // User real name
	TeamId         string     `json:"team_id"`             // Team ID
	TeamName       string     `json:"team_name"`           // Team name
	UserEmail      string     `json:"user_email"`          // User email address
}
