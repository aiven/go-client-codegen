// Code generated by Aiven. DO NOT EDIT.

package service

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

type Handler interface {
	// ListProjectServiceTypes list service types for a project
	// GET /v1/project/{project}/service_types
	// https://api.aiven.io/doc/#tag/Service/operation/ListProjectServiceTypes
	ListProjectServiceTypes(ctx context.Context, project string) (*ListProjectServiceTypesOut, error)

	// ListPublicServiceTypes list publicly available service types
	// GET /v1/service_types
	// https://api.aiven.io/doc/#tag/Service/operation/ListPublicServiceTypes
	ListPublicServiceTypes(ctx context.Context) (*ListPublicServiceTypesOut, error)

	// ListServiceVersions list service versions
	// GET /v1/service_versions
	// https://api.aiven.io/doc/#tag/Service/operation/ListServiceVersions
	ListServiceVersions(ctx context.Context) ([]ServiceVersionOut, error)

	// ProjectGetServiceLogs get service log entries
	// POST /v1/project/{project}/service/{service_name}/logs
	// https://api.aiven.io/doc/#tag/Service/operation/ProjectGetServiceLogs
	ProjectGetServiceLogs(ctx context.Context, project string, serviceName string, in *ProjectGetServiceLogsIn) (*ProjectGetServiceLogsOut, error)

	// ProjectServiceTagsList list all tags attached to the service
	// GET /v1/project/{project}/service/{service_name}/tags
	// https://api.aiven.io/doc/#tag/Service/operation/ProjectServiceTagsList
	ProjectServiceTagsList(ctx context.Context, project string, serviceName string) (map[string]string, error)

	// ProjectServiceTagsReplace replace all project tags with a new set of tags, deleting old ones
	// PUT /v1/project/{project}/service/{service_name}/tags
	// https://api.aiven.io/doc/#tag/Service/operation/ProjectServiceTagsReplace
	ProjectServiceTagsReplace(ctx context.Context, project string, serviceName string, in *ProjectServiceTagsReplaceIn) error

	// ProjectServiceTagsUpdate update one or more tags, creating ones that don't exist, and deleting ones given NULL value
	// PATCH /v1/project/{project}/service/{service_name}/tags
	// https://api.aiven.io/doc/#tag/Service/operation/ProjectServiceTagsUpdate
	ProjectServiceTagsUpdate(ctx context.Context, project string, serviceName string, in *ProjectServiceTagsUpdateIn) error

	// ServiceAlertsList list active alerts for service
	// GET /v1/project/{project}/service/{service_name}/alerts
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceAlertsList
	ServiceAlertsList(ctx context.Context, project string, serviceName string) ([]AlertOut, error)

	// ServiceBackupToAnotherRegionReport get service's backup to another region information
	// POST /v1/project/{project}/service/{service_name}/backup_to_another_region/report
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceBackupToAnotherRegionReport
	ServiceBackupToAnotherRegionReport(ctx context.Context, project string, serviceName string, in *ServiceBackupToAnotherRegionReportIn) (map[string]any, error)

	// ServiceBackupsGet get service backup information
	// GET /v1/project/{project}/service/{service_name}/backups
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceBackupsGet
	ServiceBackupsGet(ctx context.Context, project string, serviceName string) ([]BackupOut, error)

	// ServiceCancelQuery cancel specified query from service
	// POST /v1/project/{project}/service/{service_name}/query/cancel
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceCancelQuery
	ServiceCancelQuery(ctx context.Context, project string, serviceName string, in *ServiceCancelQueryIn) (bool, error)

	// ServiceCreate create a service
	// POST /v1/project/{project}/service
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceCreate
	ServiceCreate(ctx context.Context, project string, in *ServiceCreateIn) (*ServiceCreateOut, error)

	// ServiceDatabaseCreate create a new logical database for service
	// POST /v1/project/{project}/service/{service_name}/db
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceDatabaseCreate
	ServiceDatabaseCreate(ctx context.Context, project string, serviceName string, in *ServiceDatabaseCreateIn) error

	// ServiceDatabaseDelete delete a logical database
	// DELETE /v1/project/{project}/service/{service_name}/db/{dbname}
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceDatabaseDelete
	ServiceDatabaseDelete(ctx context.Context, project string, serviceName string, dbname string) error

	// ServiceDatabaseList list service databases
	// GET /v1/project/{project}/service/{service_name}/db
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceDatabaseList
	ServiceDatabaseList(ctx context.Context, project string, serviceName string) ([]DatabaseOut, error)

	// ServiceDelete terminate a service
	// DELETE /v1/project/{project}/service/{service_name}
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceDelete
	ServiceDelete(ctx context.Context, project string, serviceName string) error

	// ServiceEnableWrites temporarily enable writes for a service in read-only mode. Will only work if disk usage is lower than 99.0%
	// POST /v1/project/{project}/service/{service_name}/enable-writes
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceEnableWrites
	ServiceEnableWrites(ctx context.Context, project string, serviceName string) (string, error)

	// ServiceGet get service information
	// GET /v1/project/{project}/service/{service_name}
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceGet
	ServiceGet(ctx context.Context, project string, serviceName string) (*ServiceGetOut, error)

	// ServiceGetMigrationStatus get migration status
	// GET /v1/project/{project}/service/{service_name}/migration
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceGetMigrationStatus
	ServiceGetMigrationStatus(ctx context.Context, project string, serviceName string) (*ServiceGetMigrationStatusOut, error)

	// ServiceInfluxDBStats list stats for influxdb
	// GET /v1/project/{project}/service/{service_name}/influxdb/stats
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceInfluxDBStats
	ServiceInfluxDBStats(ctx context.Context, project string, serviceName string) (map[string]any, error)

	// ServiceKmsGetCA retrieve a service CA
	// GET /v1/project/{project}/service/{service_name}/kms/ca/{ca_name}
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceKmsGetCA
	ServiceKmsGetCA(ctx context.Context, project string, serviceName string, caName string) (string, error)

	// ServiceKmsGetKeypair retrieve service keypair
	// GET /v1/project/{project}/service/{service_name}/kms/keypairs/{keypair_name}
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceKmsGetKeypair
	ServiceKmsGetKeypair(ctx context.Context, project string, serviceName string, keypairName string) (*ServiceKmsGetKeypairOut, error)

	// ServiceList list services
	// GET /v1/project/{project}/service
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceList
	ServiceList(ctx context.Context, project string) ([]ServiceOut, error)

	// ServiceMaintenanceStart start maintenance updates
	// PUT /v1/project/{project}/service/{service_name}/maintenance/start
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceMaintenanceStart
	ServiceMaintenanceStart(ctx context.Context, project string, serviceName string) error

	// ServiceMetricsFetch fetch service metrics
	// POST /v1/project/{project}/service/{service_name}/metrics
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceMetricsFetch
	ServiceMetricsFetch(ctx context.Context, project string, serviceName string, in *ServiceMetricsFetchIn) (map[string]any, error)

	// ServiceQueryActivity fetch current queries for the service
	// POST /v1/project/{project}/service/{service_name}/query/activity
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceQueryActivity
	ServiceQueryActivity(ctx context.Context, project string, serviceName string, in *ServiceQueryActivityIn) ([]QueryOut, error)

	// ServiceQueryStatisticsReset reset service's query statistics
	// PUT /v1/project/{project}/service/{service_name}/query/stats/reset
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceQueryStatisticsReset
	ServiceQueryStatisticsReset(ctx context.Context, project string, serviceName string) ([]map[string]any, error)

	// ServiceTaskCreate create a new task for service
	// POST /v1/project/{project}/service/{service_name}/task
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceTaskCreate
	ServiceTaskCreate(ctx context.Context, project string, serviceName string, in *ServiceTaskCreateIn) (*ServiceTaskCreateOut, error)

	// ServiceTaskGet get task result
	// GET /v1/project/{project}/service/{service_name}/task/{task_id}
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceTaskGet
	ServiceTaskGet(ctx context.Context, project string, serviceName string, taskId string) (*ServiceTaskGetOut, error)

	// ServiceUpdate update service configuration
	// PUT /v1/project/{project}/service/{service_name}
	// https://api.aiven.io/doc/#tag/Service/operation/ServiceUpdate
	ServiceUpdate(ctx context.Context, project string, serviceName string, in *ServiceUpdateIn) (*ServiceUpdateOut, error)
}

func NewHandler(doer doer) ServiceHandler {
	return ServiceHandler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type ServiceHandler struct {
	doer doer
}

func (h *ServiceHandler) ListProjectServiceTypes(ctx context.Context, project string) (*ListProjectServiceTypesOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service_types", project)
	b, err := h.doer.Do(ctx, "ListProjectServiceTypes", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(listProjectServiceTypesOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.ServiceTypes, nil
}
func (h *ServiceHandler) ListPublicServiceTypes(ctx context.Context) (*ListPublicServiceTypesOut, error) {
	path := fmt.Sprintf("/v1/service_types")
	b, err := h.doer.Do(ctx, "ListPublicServiceTypes", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(listPublicServiceTypesOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.ServiceTypes, nil
}
func (h *ServiceHandler) ListServiceVersions(ctx context.Context) ([]ServiceVersionOut, error) {
	path := fmt.Sprintf("/v1/service_versions")
	b, err := h.doer.Do(ctx, "ListServiceVersions", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(listServiceVersionsOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.ServiceVersions, nil
}
func (h *ServiceHandler) ProjectGetServiceLogs(ctx context.Context, project string, serviceName string, in *ProjectGetServiceLogsIn) (*ProjectGetServiceLogsOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/logs", project, serviceName)
	b, err := h.doer.Do(ctx, "ProjectGetServiceLogs", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(ProjectGetServiceLogsOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *ServiceHandler) ProjectServiceTagsList(ctx context.Context, project string, serviceName string) (map[string]string, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/tags", project, serviceName)
	b, err := h.doer.Do(ctx, "ProjectServiceTagsList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(projectServiceTagsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Tags, nil
}
func (h *ServiceHandler) ProjectServiceTagsReplace(ctx context.Context, project string, serviceName string, in *ProjectServiceTagsReplaceIn) error {
	path := fmt.Sprintf("/v1/project/%s/service/%s/tags", project, serviceName)
	_, err := h.doer.Do(ctx, "ProjectServiceTagsReplace", "PUT", path, in)
	return err
}
func (h *ServiceHandler) ProjectServiceTagsUpdate(ctx context.Context, project string, serviceName string, in *ProjectServiceTagsUpdateIn) error {
	path := fmt.Sprintf("/v1/project/%s/service/%s/tags", project, serviceName)
	_, err := h.doer.Do(ctx, "ProjectServiceTagsUpdate", "PATCH", path, in)
	return err
}
func (h *ServiceHandler) ServiceAlertsList(ctx context.Context, project string, serviceName string) ([]AlertOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/alerts", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceAlertsList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(serviceAlertsListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Alerts, nil
}
func (h *ServiceHandler) ServiceBackupToAnotherRegionReport(ctx context.Context, project string, serviceName string, in *ServiceBackupToAnotherRegionReportIn) (map[string]any, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/backup_to_another_region/report", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceBackupToAnotherRegionReport", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(serviceBackupToAnotherRegionReportOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Metrics, nil
}
func (h *ServiceHandler) ServiceBackupsGet(ctx context.Context, project string, serviceName string) ([]BackupOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/backups", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceBackupsGet", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(serviceBackupsGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Backups, nil
}
func (h *ServiceHandler) ServiceCancelQuery(ctx context.Context, project string, serviceName string, in *ServiceCancelQueryIn) (bool, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/query/cancel", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceCancelQuery", "POST", path, in)
	if err != nil {
		return false, err
	}
	out := new(serviceCancelQueryOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return false, err
	}
	return out.Success, nil
}
func (h *ServiceHandler) ServiceCreate(ctx context.Context, project string, in *ServiceCreateIn) (*ServiceCreateOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service", project)
	b, err := h.doer.Do(ctx, "ServiceCreate", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(serviceCreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.Service, nil
}
func (h *ServiceHandler) ServiceDatabaseCreate(ctx context.Context, project string, serviceName string, in *ServiceDatabaseCreateIn) error {
	path := fmt.Sprintf("/v1/project/%s/service/%s/db", project, serviceName)
	_, err := h.doer.Do(ctx, "ServiceDatabaseCreate", "POST", path, in)
	return err
}
func (h *ServiceHandler) ServiceDatabaseDelete(ctx context.Context, project string, serviceName string, dbname string) error {
	path := fmt.Sprintf("/v1/project/%s/service/%s/db/%s", project, serviceName, dbname)
	_, err := h.doer.Do(ctx, "ServiceDatabaseDelete", "DELETE", path, nil)
	return err
}
func (h *ServiceHandler) ServiceDatabaseList(ctx context.Context, project string, serviceName string) ([]DatabaseOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/db", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceDatabaseList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(serviceDatabaseListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Databases, nil
}
func (h *ServiceHandler) ServiceDelete(ctx context.Context, project string, serviceName string) error {
	path := fmt.Sprintf("/v1/project/%s/service/%s", project, serviceName)
	_, err := h.doer.Do(ctx, "ServiceDelete", "DELETE", path, nil)
	return err
}
func (h *ServiceHandler) ServiceEnableWrites(ctx context.Context, project string, serviceName string) (string, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/enable-writes", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceEnableWrites", "POST", path, nil)
	if err != nil {
		return "", err
	}
	out := new(serviceEnableWritesOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return "", err
	}
	return out.Until, nil
}
func (h *ServiceHandler) ServiceGet(ctx context.Context, project string, serviceName string) (*ServiceGetOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceGet", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(serviceGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.Service, nil
}
func (h *ServiceHandler) ServiceGetMigrationStatus(ctx context.Context, project string, serviceName string) (*ServiceGetMigrationStatusOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/migration", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceGetMigrationStatus", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServiceGetMigrationStatusOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *ServiceHandler) ServiceInfluxDBStats(ctx context.Context, project string, serviceName string) (map[string]any, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/influxdb/stats", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceInfluxDBStats", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(serviceInfluxDbstatsOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.DbStats, nil
}
func (h *ServiceHandler) ServiceKmsGetCA(ctx context.Context, project string, serviceName string, caName string) (string, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/kms/ca/%s", project, serviceName, caName)
	b, err := h.doer.Do(ctx, "ServiceKmsGetCA", "GET", path, nil)
	if err != nil {
		return "", err
	}
	out := new(serviceKmsGetCaOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return "", err
	}
	return out.Certificate, nil
}
func (h *ServiceHandler) ServiceKmsGetKeypair(ctx context.Context, project string, serviceName string, keypairName string) (*ServiceKmsGetKeypairOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/kms/keypairs/%s", project, serviceName, keypairName)
	b, err := h.doer.Do(ctx, "ServiceKmsGetKeypair", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServiceKmsGetKeypairOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *ServiceHandler) ServiceList(ctx context.Context, project string) ([]ServiceOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service", project)
	b, err := h.doer.Do(ctx, "ServiceList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(serviceListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Services, nil
}
func (h *ServiceHandler) ServiceMaintenanceStart(ctx context.Context, project string, serviceName string) error {
	path := fmt.Sprintf("/v1/project/%s/service/%s/maintenance/start", project, serviceName)
	_, err := h.doer.Do(ctx, "ServiceMaintenanceStart", "PUT", path, nil)
	return err
}
func (h *ServiceHandler) ServiceMetricsFetch(ctx context.Context, project string, serviceName string, in *ServiceMetricsFetchIn) (map[string]any, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/metrics", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceMetricsFetch", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(serviceMetricsFetchOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Metrics, nil
}
func (h *ServiceHandler) ServiceQueryActivity(ctx context.Context, project string, serviceName string, in *ServiceQueryActivityIn) ([]QueryOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/query/activity", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceQueryActivity", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(serviceQueryActivityOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Queries, nil
}
func (h *ServiceHandler) ServiceQueryStatisticsReset(ctx context.Context, project string, serviceName string) ([]map[string]any, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/query/stats/reset", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceQueryStatisticsReset", "PUT", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(serviceQueryStatisticsResetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Queries, nil
}
func (h *ServiceHandler) ServiceTaskCreate(ctx context.Context, project string, serviceName string, in *ServiceTaskCreateIn) (*ServiceTaskCreateOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/task", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceTaskCreate", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(serviceTaskCreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.Task, nil
}
func (h *ServiceHandler) ServiceTaskGet(ctx context.Context, project string, serviceName string, taskId string) (*ServiceTaskGetOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/task/%s", project, serviceName, taskId)
	b, err := h.doer.Do(ctx, "ServiceTaskGet", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(serviceTaskGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.Task, nil
}
func (h *ServiceHandler) ServiceUpdate(ctx context.Context, project string, serviceName string, in *ServiceUpdateIn) (*ServiceUpdateOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s", project, serviceName)
	b, err := h.doer.Do(ctx, "ServiceUpdate", "PUT", path, in)
	if err != nil {
		return nil, err
	}
	out := new(serviceUpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return &out.Service, nil
}

type AccessControlOut struct {
	M3Group            string   `json:"m3_group,omitempty"`
	PgAllowReplication *bool    `json:"pg_allow_replication,omitempty"`
	RedisAclCategories []string `json:"redis_acl_categories,omitempty"`
	RedisAclChannels   []string `json:"redis_acl_channels,omitempty"`
	RedisAclCommands   []string `json:"redis_acl_commands,omitempty"`
	RedisAclKeys       []string `json:"redis_acl_keys,omitempty"`
}
type AclOut struct {
	Id         string         `json:"id,omitempty"`
	Permission PermissionType `json:"permission"`
	Topic      string         `json:"topic"`
	Username   string         `json:"username"`
}
type AdditionalRegionOut struct {
	Cloud       string `json:"cloud"`
	PauseReason string `json:"pause_reason,omitempty"`
	Paused      *bool  `json:"paused,omitempty"`
	Region      string `json:"region,omitempty"`
}
type AggregatorOut struct {
	DefaultVersion         string           `json:"default_version,omitempty"`
	Description            string           `json:"description"`
	LatestAvailableVersion string           `json:"latest_available_version,omitempty"`
	ServicePlans           []ServicePlanOut `json:"service_plans"`
	UserConfigSchema       map[string]any   `json:"user_config_schema"`
}
type AlertOut struct {
	CreateTime  time.Time `json:"create_time"`
	Event       string    `json:"event"`
	NodeName    string    `json:"node_name,omitempty"`
	ProjectName string    `json:"project_name"`
	ServiceName string    `json:"service_name,omitempty"`
	ServiceType string    `json:"service_type,omitempty"`
	Severity    string    `json:"severity"`
}
type AuthenticationType string

const (
	AuthenticationTypeNull                AuthenticationType = "null"
	AuthenticationTypeCachingSha2Password AuthenticationType = "caching_sha2_password"
	AuthenticationTypeMysqlNativePassword AuthenticationType = "mysql_native_password"
)

func AuthenticationTypeChoices() []string {
	return []string{"null", "caching_sha2_password", "mysql_native_password"}
}

type BackupConfigOut struct {
	FrequentIntervalMinutes    *int             `json:"frequent_interval_minutes,omitempty"`
	FrequentOldestAgeMinutes   *int             `json:"frequent_oldest_age_minutes,omitempty"`
	InfrequentIntervalMinutes  *int             `json:"infrequent_interval_minutes,omitempty"`
	InfrequentOldestAgeMinutes *int             `json:"infrequent_oldest_age_minutes,omitempty"`
	Interval                   int              `json:"interval"`
	MaxCount                   int              `json:"max_count"`
	RecoveryMode               RecoveryModeType `json:"recovery_mode"`
}
type BackupOut struct {
	AdditionalRegions []AdditionalRegionOut `json:"additional_regions,omitempty"`
	BackupName        string                `json:"backup_name"`
	BackupTime        time.Time             `json:"backup_time"`
	DataSize          int                   `json:"data_size"`
	StorageLocation   string                `json:"storage_location,omitempty"`
}
type CassandraOut struct {
	DefaultVersion         string           `json:"default_version,omitempty"`
	Description            string           `json:"description"`
	LatestAvailableVersion string           `json:"latest_available_version,omitempty"`
	ServicePlans           []ServicePlanOut `json:"service_plans"`
	UserConfigSchema       map[string]any   `json:"user_config_schema"`
}
type ClickhouseOut struct {
	DefaultVersion         string           `json:"default_version,omitempty"`
	Description            string           `json:"description"`
	LatestAvailableVersion string           `json:"latest_available_version,omitempty"`
	ServicePlans           []ServicePlanOut `json:"service_plans"`
	UserConfigSchema       map[string]any   `json:"user_config_schema"`
}
type ComponentOut struct {
	Component                 string                        `json:"component"`
	Host                      string                        `json:"host"`
	KafkaAuthenticationMethod KafkaAuthenticationMethodType `json:"kafka_authentication_method,omitempty"`
	Path                      string                        `json:"path,omitempty"`
	Port                      int                           `json:"port"`
	PrivatelinkConnectionId   string                        `json:"privatelink_connection_id,omitempty"`
	Route                     RouteType                     `json:"route"`
	Ssl                       *bool                         `json:"ssl,omitempty"`
	Usage                     UsageType                     `json:"usage"`
}
type ConnectionPoolOut struct {
	ConnectionUri string       `json:"connection_uri"`
	Database      string       `json:"database"`
	PoolMode      PoolModeType `json:"pool_mode"`
	PoolName      string       `json:"pool_name"`
	PoolSize      int          `json:"pool_size"`
	Username      string       `json:"username,omitempty"`
}
type DatabaseOut struct {
	DatabaseName string `json:"database_name"`
}
type DatasetImportIn struct {
	DatasetName DatasetNameType `json:"dataset_name"`
}
type DatasetNameType string

const (
	DatasetNameTypePagila DatasetNameType = "pagila"
)

func DatasetNameTypeChoices() []string {
	return []string{"pagila"}
}

type DbOut struct {
	DefaultVersion         string           `json:"default_version,omitempty"`
	Description            string           `json:"description"`
	LatestAvailableVersion string           `json:"latest_available_version,omitempty"`
	ServicePlans           []ServicePlanOut `json:"service_plans"`
	UserConfigSchema       map[string]any   `json:"user_config_schema"`
}
type DowType string

const (
	DowTypeMonday    DowType = "monday"
	DowTypeTuesday   DowType = "tuesday"
	DowTypeWednesday DowType = "wednesday"
	DowTypeThursday  DowType = "thursday"
	DowTypeFriday    DowType = "friday"
	DowTypeSaturday  DowType = "saturday"
	DowTypeSunday    DowType = "sunday"
)

func DowTypeChoices() []string {
	return []string{"monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"}
}

type DowTypeAlt string

const (
	DowTypeAltMonday    DowTypeAlt = "monday"
	DowTypeAltTuesday   DowTypeAlt = "tuesday"
	DowTypeAltWednesday DowTypeAlt = "wednesday"
	DowTypeAltThursday  DowTypeAlt = "thursday"
	DowTypeAltFriday    DowTypeAlt = "friday"
	DowTypeAltSaturday  DowTypeAlt = "saturday"
	DowTypeAltSunday    DowTypeAlt = "sunday"
	DowTypeAltNever     DowTypeAlt = "never"
)

func DowTypeAltChoices() []string {
	return []string{"monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday", "never"}
}

type DragonflyOut struct {
	DefaultVersion         string           `json:"default_version,omitempty"`
	Description            string           `json:"description"`
	LatestAvailableVersion string           `json:"latest_available_version,omitempty"`
	ServicePlans           []ServicePlanOut `json:"service_plans"`
	UserConfigSchema       map[string]any   `json:"user_config_schema"`
}
type ElasticsearchOut struct {
	DefaultVersion         string           `json:"default_version,omitempty"`
	Description            string           `json:"description"`
	LatestAvailableVersion string           `json:"latest_available_version,omitempty"`
	ServicePlans           []ServicePlanOut `json:"service_plans"`
	UserConfigSchema       map[string]any   `json:"user_config_schema"`
}
type FlinkOut struct {
	DefaultVersion         string           `json:"default_version,omitempty"`
	Description            string           `json:"description"`
	LatestAvailableVersion string           `json:"latest_available_version,omitempty"`
	ServicePlans           []ServicePlanOut `json:"service_plans"`
	UserConfigSchema       map[string]any   `json:"user_config_schema"`
}
type GrafanaOut struct {
	DefaultVersion         string           `json:"default_version,omitempty"`
	Description            string           `json:"description"`
	LatestAvailableVersion string           `json:"latest_available_version,omitempty"`
	ServicePlans           []ServicePlanOut `json:"service_plans"`
	UserConfigSchema       map[string]any   `json:"user_config_schema"`
}
type InfluxdbOut struct {
	DefaultVersion         string           `json:"default_version,omitempty"`
	Description            string           `json:"description"`
	LatestAvailableVersion string           `json:"latest_available_version,omitempty"`
	ServicePlans           []ServicePlanOut `json:"service_plans"`
	UserConfigSchema       map[string]any   `json:"user_config_schema"`
}
type IntegrationStatusOut struct {
	State          StateOut `json:"state"`
	StatusUserDesc string   `json:"status_user_desc"`
}
type IntegrationStatusType string

const (
	IntegrationStatusTypeFailed   IntegrationStatusType = "failed"
	IntegrationStatusTypeInactive IntegrationStatusType = "inactive"
	IntegrationStatusTypeRunning  IntegrationStatusType = "running"
	IntegrationStatusTypeStarting IntegrationStatusType = "starting"
	IntegrationStatusTypeUnknown  IntegrationStatusType = "unknown"
)

func IntegrationStatusTypeChoices() []string {
	return []string{"failed", "inactive", "running", "starting", "unknown"}
}

type IntegrationType string

const (
	IntegrationTypeAlertmanager                      IntegrationType = "alertmanager"
	IntegrationTypeAutoscaler                        IntegrationType = "autoscaler"
	IntegrationTypeCaching                           IntegrationType = "caching"
	IntegrationTypeCassandraCrossServiceCluster      IntegrationType = "cassandra_cross_service_cluster"
	IntegrationTypeClickhouseCredentials             IntegrationType = "clickhouse_credentials"
	IntegrationTypeClickhouseKafka                   IntegrationType = "clickhouse_kafka"
	IntegrationTypeClickhousePostgresql              IntegrationType = "clickhouse_postgresql"
	IntegrationTypeDashboard                         IntegrationType = "dashboard"
	IntegrationTypeDatadog                           IntegrationType = "datadog"
	IntegrationTypeDatasource                        IntegrationType = "datasource"
	IntegrationTypeExternalAwsCloudwatchLogs         IntegrationType = "external_aws_cloudwatch_logs"
	IntegrationTypeExternalAwsCloudwatchMetrics      IntegrationType = "external_aws_cloudwatch_metrics"
	IntegrationTypeExternalElasticsearchLogs         IntegrationType = "external_elasticsearch_logs"
	IntegrationTypeExternalGoogleCloudLogging        IntegrationType = "external_google_cloud_logging"
	IntegrationTypeExternalOpensearchLogs            IntegrationType = "external_opensearch_logs"
	IntegrationTypeFlink                             IntegrationType = "flink"
	IntegrationTypeFlinkExternalBigquery             IntegrationType = "flink_external_bigquery"
	IntegrationTypeFlinkExternalKafka                IntegrationType = "flink_external_kafka"
	IntegrationTypeFlinkExternalPostgresql           IntegrationType = "flink_external_postgresql"
	IntegrationTypeInternalConnectivity              IntegrationType = "internal_connectivity"
	IntegrationTypeJolokia                           IntegrationType = "jolokia"
	IntegrationTypeKafkaConnect                      IntegrationType = "kafka_connect"
	IntegrationTypeKafkaConnectPostgresql            IntegrationType = "kafka_connect_postgresql"
	IntegrationTypeKafkaLogs                         IntegrationType = "kafka_logs"
	IntegrationTypeKafkaMirrormaker                  IntegrationType = "kafka_mirrormaker"
	IntegrationTypeLogs                              IntegrationType = "logs"
	IntegrationTypeM3Aggregator                      IntegrationType = "m3aggregator"
	IntegrationTypeM3Coordinator                     IntegrationType = "m3coordinator"
	IntegrationTypeMetrics                           IntegrationType = "metrics"
	IntegrationTypeOpensearchCrossClusterReplication IntegrationType = "opensearch_cross_cluster_replication"
	IntegrationTypeOpensearchCrossClusterSearch      IntegrationType = "opensearch_cross_cluster_search"
	IntegrationTypePrometheus                        IntegrationType = "prometheus"
	IntegrationTypeReadReplica                       IntegrationType = "read_replica"
	IntegrationTypeRsyslog                           IntegrationType = "rsyslog"
	IntegrationTypeSchemaRegistryProxy               IntegrationType = "schema_registry_proxy"
	IntegrationTypeStresstester                      IntegrationType = "stresstester"
	IntegrationTypeThanoscompactor                   IntegrationType = "thanoscompactor"
	IntegrationTypeThanosquery                       IntegrationType = "thanosquery"
	IntegrationTypeThanosstore                       IntegrationType = "thanosstore"
	IntegrationTypeVector                            IntegrationType = "vector"
	IntegrationTypeVmalert                           IntegrationType = "vmalert"
)

func IntegrationTypeChoices() []string {
	return []string{"alertmanager", "autoscaler", "caching", "cassandra_cross_service_cluster", "clickhouse_credentials", "clickhouse_kafka", "clickhouse_postgresql", "dashboard", "datadog", "datasource", "external_aws_cloudwatch_logs", "external_aws_cloudwatch_metrics", "external_elasticsearch_logs", "external_google_cloud_logging", "external_opensearch_logs", "flink", "flink_external_bigquery", "flink_external_kafka", "flink_external_postgresql", "internal_connectivity", "jolokia", "kafka_connect", "kafka_connect_postgresql", "kafka_logs", "kafka_mirrormaker", "logs", "m3aggregator", "m3coordinator", "metrics", "opensearch_cross_cluster_replication", "opensearch_cross_cluster_search", "prometheus", "read_replica", "rsyslog", "schema_registry_proxy", "stresstester", "thanoscompactor", "thanosquery", "thanosstore", "vector", "vmalert"}
}

type KafkaAuthenticationMethodType string

const (
	KafkaAuthenticationMethodTypeCertificate KafkaAuthenticationMethodType = "certificate"
	KafkaAuthenticationMethodTypeSasl        KafkaAuthenticationMethodType = "sasl"
)

func KafkaAuthenticationMethodTypeChoices() []string {
	return []string{"certificate", "sasl"}
}

type KafkaConnectOut struct {
	DefaultVersion         string           `json:"default_version,omitempty"`
	Description            string           `json:"description"`
	LatestAvailableVersion string           `json:"latest_available_version,omitempty"`
	ServicePlans           []ServicePlanOut `json:"service_plans"`
	UserConfigSchema       map[string]any   `json:"user_config_schema"`
}
type KafkaMirrormakerOut struct {
	DefaultVersion         string           `json:"default_version,omitempty"`
	Description            string           `json:"description"`
	LatestAvailableVersion string           `json:"latest_available_version,omitempty"`
	ServicePlans           []ServicePlanOut `json:"service_plans"`
	UserConfigSchema       map[string]any   `json:"user_config_schema"`
}
type KafkaOut struct {
	DefaultVersion         string           `json:"default_version,omitempty"`
	Description            string           `json:"description"`
	LatestAvailableVersion string           `json:"latest_available_version,omitempty"`
	ServicePlans           []ServicePlanOut `json:"service_plans"`
	UserConfigSchema       map[string]any   `json:"user_config_schema"`
}
type LevelType string

const (
	LevelTypeNotice  LevelType = "notice"
	LevelTypeWarning LevelType = "warning"
)

func LevelTypeChoices() []string {
	return []string{"notice", "warning"}
}

type LikelyErrorCauseType string

const (
	LikelyErrorCauseTypeNull        LikelyErrorCauseType = "null"
	LikelyErrorCauseTypeDestination LikelyErrorCauseType = "destination"
	LikelyErrorCauseTypeIntegration LikelyErrorCauseType = "integration"
	LikelyErrorCauseTypeSource      LikelyErrorCauseType = "source"
	LikelyErrorCauseTypeUnknown     LikelyErrorCauseType = "unknown"
)

func LikelyErrorCauseTypeChoices() []string {
	return []string{"null", "destination", "integration", "source", "unknown"}
}

type ListProjectServiceTypesOut struct {
	Cassandra        *CassandraOut        `json:"cassandra,omitempty"`
	Clickhouse       *ClickhouseOut       `json:"clickhouse,omitempty"`
	Dragonfly        *DragonflyOut        `json:"dragonfly,omitempty"`
	Elasticsearch    *ElasticsearchOut    `json:"elasticsearch,omitempty"`
	Flink            *FlinkOut            `json:"flink,omitempty"`
	Grafana          *GrafanaOut          `json:"grafana,omitempty"`
	Influxdb         *InfluxdbOut         `json:"influxdb,omitempty"`
	Kafka            *KafkaOut            `json:"kafka,omitempty"`
	KafkaConnect     *KafkaConnectOut     `json:"kafka_connect,omitempty"`
	KafkaMirrormaker *KafkaMirrormakerOut `json:"kafka_mirrormaker,omitempty"`
	M3Aggregator     *AggregatorOut       `json:"m3aggregator,omitempty"`
	M3Db             *DbOut               `json:"m3db,omitempty"`
	Mysql            *MysqlOut            `json:"mysql,omitempty"`
	Opensearch       *OpensearchOut       `json:"opensearch,omitempty"`
	Pg               *PgOut               `json:"pg,omitempty"`
	Redis            *RedisOut            `json:"redis,omitempty"`
}
type ListPublicServiceTypesOut struct {
	Cassandra        *CassandraOut        `json:"cassandra,omitempty"`
	Clickhouse       *ClickhouseOut       `json:"clickhouse,omitempty"`
	Dragonfly        *DragonflyOut        `json:"dragonfly,omitempty"`
	Elasticsearch    *ElasticsearchOut    `json:"elasticsearch,omitempty"`
	Flink            *FlinkOut            `json:"flink,omitempty"`
	Grafana          *GrafanaOut          `json:"grafana,omitempty"`
	Influxdb         *InfluxdbOut         `json:"influxdb,omitempty"`
	Kafka            *KafkaOut            `json:"kafka,omitempty"`
	KafkaConnect     *KafkaConnectOut     `json:"kafka_connect,omitempty"`
	KafkaMirrormaker *KafkaMirrormakerOut `json:"kafka_mirrormaker,omitempty"`
	M3Aggregator     *AggregatorOut       `json:"m3aggregator,omitempty"`
	M3Db             *DbOut               `json:"m3db,omitempty"`
	Mysql            *MysqlOut            `json:"mysql,omitempty"`
	Opensearch       *OpensearchOut       `json:"opensearch,omitempty"`
	Pg               *PgOut               `json:"pg,omitempty"`
	Redis            *RedisOut            `json:"redis,omitempty"`
}
type LogOut struct {
	Msg  string `json:"msg"`
	Time string `json:"time,omitempty"`
	Unit string `json:"unit,omitempty"`
}
type MaintenanceIn struct {
	Dow  DowType `json:"dow,omitempty"`
	Time string  `json:"time,omitempty"`
}
type MaintenanceOut struct {
	Dow     DowTypeAlt  `json:"dow"`
	Time    string      `json:"time"`
	Updates []UpdateOut `json:"updates"`
}
type MasterLinkStatusType string

const (
	MasterLinkStatusTypeUp   MasterLinkStatusType = "up"
	MasterLinkStatusTypeDown MasterLinkStatusType = "down"
)

func MasterLinkStatusTypeChoices() []string {
	return []string{"up", "down"}
}

type MetadataOut struct {
	EndOfLifeHelpArticleUrl string     `json:"end_of_life_help_article_url,omitempty"`
	EndOfLifePolicyUrl      string     `json:"end_of_life_policy_url,omitempty"`
	ServiceEndOfLifeTime    *time.Time `json:"service_end_of_life_time,omitempty"`
	UpgradeToServiceType    string     `json:"upgrade_to_service_type,omitempty"`
	UpgradeToVersion        string     `json:"upgrade_to_version,omitempty"`
}
type MethodType string

const (
	MethodTypeDump        MethodType = "dump"
	MethodTypeMysqldump   MethodType = "mysqldump"
	MethodTypePgDump      MethodType = "pg_dump"
	MethodTypeReplication MethodType = "replication"
	MethodTypeScan        MethodType = "scan"
)

func MethodTypeChoices() []string {
	return []string{"dump", "mysqldump", "pg_dump", "replication", "scan"}
}

type MethodTypeAlt string

const (
	MethodTypeAltDump        MethodTypeAlt = "dump"
	MethodTypeAltReplication MethodTypeAlt = "replication"
)

func MethodTypeAltChoices() []string {
	return []string{"dump", "replication"}
}

type MigrationCheckIn struct {
	IgnoreDbs         string        `json:"ignore_dbs,omitempty"`
	Method            MethodTypeAlt `json:"method,omitempty"`
	SourceProjectName string        `json:"source_project_name,omitempty"`
	SourceServiceName string        `json:"source_service_name,omitempty"`
	SourceServiceUri  string        `json:"source_service_uri,omitempty"`
}
type MigrationDetailOut struct {
	Dbname string                    `json:"dbname"`
	Error  string                    `json:"error,omitempty"`
	Method MethodType                `json:"method"`
	Status MigrationDetailStatusType `json:"status"`
}
type MigrationDetailStatusType string

const (
	MigrationDetailStatusTypeDone    MigrationDetailStatusType = "done"
	MigrationDetailStatusTypeFailed  MigrationDetailStatusType = "failed"
	MigrationDetailStatusTypeRunning MigrationDetailStatusType = "running"
	MigrationDetailStatusTypeSyncing MigrationDetailStatusType = "syncing"
)

func MigrationDetailStatusTypeChoices() []string {
	return []string{"done", "failed", "running", "syncing"}
}

type MigrationOut struct {
	Error                  string               `json:"error,omitempty"`
	MasterLastIoSecondsAgo *int                 `json:"master_last_io_seconds_ago,omitempty"`
	MasterLinkStatus       MasterLinkStatusType `json:"master_link_status,omitempty"`
	Method                 MethodType           `json:"method"`
	Status                 MigrationStatusType  `json:"status"`
}
type MigrationStatusType string

const (
	MigrationStatusTypeDone    MigrationStatusType = "done"
	MigrationStatusTypeFailed  MigrationStatusType = "failed"
	MigrationStatusTypeRunning MigrationStatusType = "running"
	MigrationStatusTypeSyncing MigrationStatusType = "syncing"
)

func MigrationStatusTypeChoices() []string {
	return []string{"done", "failed", "running", "syncing"}
}

type MysqlOut struct {
	DefaultVersion         string           `json:"default_version,omitempty"`
	Description            string           `json:"description"`
	LatestAvailableVersion string           `json:"latest_available_version,omitempty"`
	ServicePlans           []ServicePlanOut `json:"service_plans"`
	UserConfigSchema       map[string]any   `json:"user_config_schema"`
}
type NodeStateOut struct {
	Name            string              `json:"name"`
	ProgressUpdates []ProgressUpdateOut `json:"progress_updates,omitempty"`
	Role            RoleType            `json:"role,omitempty"`
	Shard           *ShardOut           `json:"shard,omitempty"`
	State           NodeStateType       `json:"state"`
}
type NodeStateType string

const (
	NodeStateTypeLeaving     NodeStateType = "leaving"
	NodeStateTypeRunning     NodeStateType = "running"
	NodeStateTypeSettingUpVm NodeStateType = "setting_up_vm"
	NodeStateTypeSyncingData NodeStateType = "syncing_data"
	NodeStateTypeTimingOut   NodeStateType = "timing_out"
	NodeStateTypeUnknown     NodeStateType = "unknown"
)

func NodeStateTypeChoices() []string {
	return []string{"leaving", "running", "setting_up_vm", "syncing_data", "timing_out", "unknown"}
}

type OpensearchOut struct {
	DefaultVersion         string           `json:"default_version,omitempty"`
	Description            string           `json:"description"`
	LatestAvailableVersion string           `json:"latest_available_version,omitempty"`
	ServicePlans           []ServicePlanOut `json:"service_plans"`
	UserConfigSchema       map[string]any   `json:"user_config_schema"`
}
type PeriodType string

const (
	PeriodTypeHour  PeriodType = "hour"
	PeriodTypeDay   PeriodType = "day"
	PeriodTypeWeek  PeriodType = "week"
	PeriodTypeMonth PeriodType = "month"
	PeriodTypeYear  PeriodType = "year"
)

func PeriodTypeChoices() []string {
	return []string{"hour", "day", "week", "month", "year"}
}

type PermissionType string

const (
	PermissionTypeAdmin     PermissionType = "admin"
	PermissionTypeRead      PermissionType = "read"
	PermissionTypeReadwrite PermissionType = "readwrite"
	PermissionTypeWrite     PermissionType = "write"
)

func PermissionTypeChoices() []string {
	return []string{"admin", "read", "readwrite", "write"}
}

type PermissionTypeAlt string

const (
	PermissionTypeAltSchemaRegistryRead  PermissionTypeAlt = "schema_registry_read"
	PermissionTypeAltSchemaRegistryWrite PermissionTypeAlt = "schema_registry_write"
)

func PermissionTypeAltChoices() []string {
	return []string{"schema_registry_read", "schema_registry_write"}
}

type PgOut struct {
	DefaultVersion         string           `json:"default_version,omitempty"`
	Description            string           `json:"description"`
	LatestAvailableVersion string           `json:"latest_available_version,omitempty"`
	ServicePlans           []ServicePlanOut `json:"service_plans"`
	UserConfigSchema       map[string]any   `json:"user_config_schema"`
}
type PhaseType string

const (
	PhaseTypePrepare    PhaseType = "prepare"
	PhaseTypeBasebackup PhaseType = "basebackup"
	PhaseTypeStream     PhaseType = "stream"
	PhaseTypeFinalize   PhaseType = "finalize"
)

func PhaseTypeChoices() []string {
	return []string{"prepare", "basebackup", "stream", "finalize"}
}

type PoolModeType string

const (
	PoolModeTypeSession     PoolModeType = "session"
	PoolModeTypeTransaction PoolModeType = "transaction"
	PoolModeTypeStatement   PoolModeType = "statement"
)

func PoolModeTypeChoices() []string {
	return []string{"session", "transaction", "statement"}
}

type ProgressUpdateOut struct {
	Completed bool      `json:"completed"`
	Current   *int      `json:"current,omitempty"`
	Max       *int      `json:"max,omitempty"`
	Min       *int      `json:"min,omitempty"`
	Phase     PhaseType `json:"phase"`
	Unit      UnitType  `json:"unit,omitempty"`
}
type ProjectGetServiceLogsIn struct {
	Limit     *int          `json:"limit,omitempty"`
	Offset    string        `json:"offset,omitempty"`
	SortOrder SortOrderType `json:"sort_order,omitempty"`
}
type ProjectGetServiceLogsOut struct {
	FirstLogOffset string   `json:"first_log_offset"`
	Logs           []LogOut `json:"logs"`
	Offset         string   `json:"offset"`
}
type ProjectServiceTagsReplaceIn struct {
	Tags map[string]string `json:"tags"`
}
type ProjectServiceTagsUpdateIn struct {
	Tags map[string]string `json:"tags"`
}
type QueryOut struct {
	ActiveChannelSubscriptions                *int     `json:"active_channel_subscriptions,omitempty"`
	ActiveDatabase                            string   `json:"active_database,omitempty"`
	ActivePatternMatchingChannelSubscriptions *int     `json:"active_pattern_matching_channel_subscriptions,omitempty"`
	ApplicationName                           string   `json:"application_name,omitempty"`
	BackendStart                              string   `json:"backend_start,omitempty"`
	BackendType                               string   `json:"backend_type,omitempty"`
	BackendXid                                *int     `json:"backend_xid,omitempty"`
	BackendXmin                               *int     `json:"backend_xmin,omitempty"`
	ClientAddr                                string   `json:"client_addr,omitempty"`
	ClientHostname                            string   `json:"client_hostname,omitempty"`
	ClientPort                                *int     `json:"client_port,omitempty"`
	ConnectionAgeSeconds                      *float64 `json:"connection_age_seconds,omitempty"`
	ConnectionIdleSeconds                     *float64 `json:"connection_idle_seconds,omitempty"`
	Datid                                     *int     `json:"datid,omitempty"`
	Datname                                   string   `json:"datname,omitempty"`
	Flags                                     []string `json:"flags,omitempty"`
	FlagsRaw                                  string   `json:"flags_raw,omitempty"`
	Id                                        string   `json:"id,omitempty"`
	LeaderPid                                 *int     `json:"leader_pid,omitempty"`
	MultiExecCommands                         *int     `json:"multi_exec_commands,omitempty"`
	Name                                      string   `json:"name,omitempty"`
	OutputBuffer                              *int     `json:"output_buffer,omitempty"`
	OutputBufferMemory                        *int     `json:"output_buffer_memory,omitempty"`
	OutputListLength                          *int     `json:"output_list_length,omitempty"`
	Pid                                       *int     `json:"pid,omitempty"`
	Query                                     string   `json:"query,omitempty"`
	QueryBuffer                               *int     `json:"query_buffer,omitempty"`
	QueryBufferFree                           *int     `json:"query_buffer_free,omitempty"`
	QueryDuration                             *float64 `json:"query_duration,omitempty"`
	QueryId                                   *int     `json:"query_id,omitempty"`
	QueryStart                                string   `json:"query_start,omitempty"`
	State                                     string   `json:"state,omitempty"`
	StateChange                               string   `json:"state_change,omitempty"`
	Usename                                   string   `json:"usename,omitempty"`
	Usesysid                                  *int     `json:"usesysid,omitempty"`
	WaitEvent                                 string   `json:"wait_event,omitempty"`
	WaitEventType                             string   `json:"wait_event_type,omitempty"`
	Waiting                                   *bool    `json:"waiting,omitempty"`
	XactStart                                 string   `json:"xact_start,omitempty"`
}
type RecoveryModeType string

const (
	RecoveryModeTypeBasic RecoveryModeType = "basic"
	RecoveryModeTypePitr  RecoveryModeType = "pitr"
)

func RecoveryModeTypeChoices() []string {
	return []string{"basic", "pitr"}
}

type RedisOut struct {
	DefaultVersion         string           `json:"default_version,omitempty"`
	Description            string           `json:"description"`
	LatestAvailableVersion string           `json:"latest_available_version,omitempty"`
	ServicePlans           []ServicePlanOut `json:"service_plans"`
	UserConfigSchema       map[string]any   `json:"user_config_schema"`
}
type ResultCodeOut struct {
	Code   string `json:"code"`
	Dbname string `json:"dbname,omitempty"`
}
type RoleType string

const (
	RoleTypeMaster      RoleType = "master"
	RoleTypeStandby     RoleType = "standby"
	RoleTypeReadReplica RoleType = "read-replica"
)

func RoleTypeChoices() []string {
	return []string{"master", "standby", "read-replica"}
}

type RouteType string

const (
	RouteTypeDynamic     RouteType = "dynamic"
	RouteTypePublic      RouteType = "public"
	RouteTypePrivate     RouteType = "private"
	RouteTypePrivatelink RouteType = "privatelink"
)

func RouteTypeChoices() []string {
	return []string{"dynamic", "public", "private", "privatelink"}
}

type SchemaRegistryAclOut struct {
	Id         string            `json:"id,omitempty"`
	Permission PermissionTypeAlt `json:"permission"`
	Resource   string            `json:"resource"`
	Username   string            `json:"username"`
}
type ServiceBackupToAnotherRegionReportIn struct {
	Period PeriodType `json:"period,omitempty"`
}
type ServiceCancelQueryIn struct {
	Pid       *int  `json:"pid,omitempty"`
	Terminate *bool `json:"terminate,omitempty"`
}
type ServiceCreateIn struct {
	Cloud                 string                  `json:"cloud,omitempty"`
	CopyTags              *bool                   `json:"copy_tags,omitempty"`
	DiskSpaceMb           *float64                `json:"disk_space_mb,omitempty"`
	GroupName             string                  `json:"group_name,omitempty"`
	Maintenance           *MaintenanceIn          `json:"maintenance,omitempty"`
	Plan                  string                  `json:"plan"`
	ProjectVpcId          string                  `json:"project_vpc_id,omitempty"`
	ServiceIntegrations   *[]ServiceIntegrationIn `json:"service_integrations,omitempty"`
	ServiceName           string                  `json:"service_name"`
	ServiceType           string                  `json:"service_type"`
	StaticIps             *[]string               `json:"static_ips,omitempty"`
	Tags                  *map[string]string      `json:"tags,omitempty"`
	TechEmails            *[]TechEmailIn          `json:"tech_emails,omitempty"`
	TerminationProtection *bool                   `json:"termination_protection,omitempty"`
	UserConfig            *map[string]any         `json:"user_config,omitempty"`
}
type ServiceCreateOut struct {
	Acl                    []AclOut                 `json:"acl,omitempty"`
	Backups                []BackupOut              `json:"backups,omitempty"`
	CloudDescription       string                   `json:"cloud_description,omitempty"`
	CloudName              string                   `json:"cloud_name"`
	Components             []ComponentOut           `json:"components,omitempty"`
	ConnectionInfo         map[string]any           `json:"connection_info,omitempty"`
	ConnectionPools        []ConnectionPoolOut      `json:"connection_pools,omitempty"`
	CreateTime             time.Time                `json:"create_time"`
	Databases              []string                 `json:"databases,omitempty"`
	DiskSpaceMb            *float64                 `json:"disk_space_mb,omitempty"`
	Features               map[string]any           `json:"features,omitempty"`
	GroupList              []string                 `json:"group_list"`
	Maintenance            *MaintenanceOut          `json:"maintenance,omitempty"`
	Metadata               map[string]any           `json:"metadata,omitempty"`
	NodeCount              *int                     `json:"node_count,omitempty"`
	NodeCpuCount           *int                     `json:"node_cpu_count,omitempty"`
	NodeMemoryMb           *float64                 `json:"node_memory_mb,omitempty"`
	NodeStates             []NodeStateOut           `json:"node_states,omitempty"`
	Plan                   string                   `json:"plan"`
	ProjectVpcId           string                   `json:"project_vpc_id"`
	SchemaRegistryAcl      []SchemaRegistryAclOut   `json:"schema_registry_acl,omitempty"`
	ServiceIntegrations    []ServiceIntegrationOut  `json:"service_integrations"`
	ServiceName            string                   `json:"service_name"`
	ServiceNotifications   []ServiceNotificationOut `json:"service_notifications,omitempty"`
	ServiceType            string                   `json:"service_type"`
	ServiceTypeDescription string                   `json:"service_type_description,omitempty"`
	ServiceUri             string                   `json:"service_uri"`
	ServiceUriParams       map[string]any           `json:"service_uri_params,omitempty"`
	State                  ServiceStateType         `json:"state"`
	Tags                   map[string]string        `json:"tags,omitempty"`
	TechEmails             []TechEmailOut           `json:"tech_emails,omitempty"`
	TerminationProtection  bool                     `json:"termination_protection"`
	Topics                 []TopicOut               `json:"topics,omitempty"`
	UpdateTime             time.Time                `json:"update_time"`
	UserConfig             map[string]any           `json:"user_config"`
	Users                  []UserOut                `json:"users,omitempty"`
}
type ServiceDatabaseCreateIn struct {
	Database  string `json:"database"`
	LcCollate string `json:"lc_collate,omitempty"`
	LcCtype   string `json:"lc_ctype,omitempty"`
}
type ServiceGetMigrationStatusOut struct {
	Migration       MigrationOut         `json:"migration"`
	MigrationDetail []MigrationDetailOut `json:"migration_detail,omitempty"`
}
type ServiceGetOut struct {
	Acl                    []AclOut                 `json:"acl,omitempty"`
	Backups                []BackupOut              `json:"backups,omitempty"`
	CloudDescription       string                   `json:"cloud_description,omitempty"`
	CloudName              string                   `json:"cloud_name"`
	Components             []ComponentOut           `json:"components,omitempty"`
	ConnectionInfo         map[string]any           `json:"connection_info,omitempty"`
	ConnectionPools        []ConnectionPoolOut      `json:"connection_pools,omitempty"`
	CreateTime             time.Time                `json:"create_time"`
	Databases              []string                 `json:"databases,omitempty"`
	DiskSpaceMb            *float64                 `json:"disk_space_mb,omitempty"`
	Features               map[string]any           `json:"features,omitempty"`
	GroupList              []string                 `json:"group_list"`
	Maintenance            *MaintenanceOut          `json:"maintenance,omitempty"`
	Metadata               map[string]any           `json:"metadata,omitempty"`
	NodeCount              *int                     `json:"node_count,omitempty"`
	NodeCpuCount           *int                     `json:"node_cpu_count,omitempty"`
	NodeMemoryMb           *float64                 `json:"node_memory_mb,omitempty"`
	NodeStates             []NodeStateOut           `json:"node_states,omitempty"`
	Plan                   string                   `json:"plan"`
	ProjectVpcId           string                   `json:"project_vpc_id"`
	SchemaRegistryAcl      []SchemaRegistryAclOut   `json:"schema_registry_acl,omitempty"`
	ServiceIntegrations    []ServiceIntegrationOut  `json:"service_integrations"`
	ServiceName            string                   `json:"service_name"`
	ServiceNotifications   []ServiceNotificationOut `json:"service_notifications,omitempty"`
	ServiceType            string                   `json:"service_type"`
	ServiceTypeDescription string                   `json:"service_type_description,omitempty"`
	ServiceUri             string                   `json:"service_uri"`
	ServiceUriParams       map[string]any           `json:"service_uri_params,omitempty"`
	State                  ServiceStateType         `json:"state"`
	Tags                   map[string]string        `json:"tags,omitempty"`
	TechEmails             []TechEmailOut           `json:"tech_emails,omitempty"`
	TerminationProtection  bool                     `json:"termination_protection"`
	Topics                 []TopicOut               `json:"topics,omitempty"`
	UpdateTime             time.Time                `json:"update_time"`
	UserConfig             map[string]any           `json:"user_config"`
	Users                  []UserOut                `json:"users,omitempty"`
}
type ServiceIntegrationIn struct {
	DestEndpointId   string          `json:"dest_endpoint_id,omitempty"`
	DestProject      string          `json:"dest_project,omitempty"`
	DestService      string          `json:"dest_service,omitempty"`
	IntegrationType  IntegrationType `json:"integration_type"`
	SourceEndpointId string          `json:"source_endpoint_id,omitempty"`
	SourceProject    string          `json:"source_project,omitempty"`
	SourceService    string          `json:"source_service,omitempty"`
	UserConfig       *map[string]any `json:"user_config,omitempty"`
}
type ServiceIntegrationOut struct {
	Active               bool                  `json:"active"`
	Description          string                `json:"description"`
	DestEndpoint         string                `json:"dest_endpoint,omitempty"`
	DestEndpointId       string                `json:"dest_endpoint_id,omitempty"`
	DestProject          string                `json:"dest_project"`
	DestService          string                `json:"dest_service,omitempty"`
	DestServiceType      string                `json:"dest_service_type"`
	Enabled              bool                  `json:"enabled"`
	IntegrationStatus    *IntegrationStatusOut `json:"integration_status,omitempty"`
	IntegrationType      string                `json:"integration_type"`
	ServiceIntegrationId string                `json:"service_integration_id"`
	SourceEndpoint       string                `json:"source_endpoint,omitempty"`
	SourceEndpointId     string                `json:"source_endpoint_id,omitempty"`
	SourceProject        string                `json:"source_project"`
	SourceService        string                `json:"source_service"`
	SourceServiceType    string                `json:"source_service_type"`
	UserConfig           map[string]any        `json:"user_config,omitempty"`
}
type ServiceKmsGetKeypairOut struct {
	Certificate string `json:"certificate"`
	Key         string `json:"key"`
}
type ServiceMetricsFetchIn struct {
	Period PeriodType `json:"period,omitempty"`
}
type ServiceNotificationOut struct {
	Level    LevelType               `json:"level"`
	Message  string                  `json:"message"`
	Metadata MetadataOut             `json:"metadata"`
	Type     ServiceNotificationType `json:"type"`
}
type ServiceNotificationType string

const (
	ServiceNotificationTypeServiceEndOfLife         ServiceNotificationType = "service_end_of_life"
	ServiceNotificationTypeServicePoweredOffRemoval ServiceNotificationType = "service_powered_off_removal"
)

func ServiceNotificationTypeChoices() []string {
	return []string{"service_end_of_life", "service_powered_off_removal"}
}

type ServiceOut struct {
	Acl                    []AclOut                 `json:"acl,omitempty"`
	Backups                []BackupOut              `json:"backups,omitempty"`
	CloudDescription       string                   `json:"cloud_description,omitempty"`
	CloudName              string                   `json:"cloud_name"`
	Components             []ComponentOut           `json:"components,omitempty"`
	ConnectionInfo         map[string]any           `json:"connection_info,omitempty"`
	ConnectionPools        []ConnectionPoolOut      `json:"connection_pools,omitempty"`
	CreateTime             time.Time                `json:"create_time"`
	Databases              []string                 `json:"databases,omitempty"`
	DiskSpaceMb            *float64                 `json:"disk_space_mb,omitempty"`
	Features               map[string]any           `json:"features,omitempty"`
	GroupList              []string                 `json:"group_list"`
	Maintenance            *MaintenanceOut          `json:"maintenance,omitempty"`
	Metadata               map[string]any           `json:"metadata,omitempty"`
	NodeCount              *int                     `json:"node_count,omitempty"`
	NodeCpuCount           *int                     `json:"node_cpu_count,omitempty"`
	NodeMemoryMb           *float64                 `json:"node_memory_mb,omitempty"`
	NodeStates             []NodeStateOut           `json:"node_states,omitempty"`
	Plan                   string                   `json:"plan"`
	ProjectVpcId           string                   `json:"project_vpc_id"`
	SchemaRegistryAcl      []SchemaRegistryAclOut   `json:"schema_registry_acl,omitempty"`
	ServiceIntegrations    []ServiceIntegrationOut  `json:"service_integrations"`
	ServiceName            string                   `json:"service_name"`
	ServiceNotifications   []ServiceNotificationOut `json:"service_notifications,omitempty"`
	ServiceType            string                   `json:"service_type"`
	ServiceTypeDescription string                   `json:"service_type_description,omitempty"`
	ServiceUri             string                   `json:"service_uri"`
	ServiceUriParams       map[string]any           `json:"service_uri_params,omitempty"`
	State                  ServiceStateType         `json:"state"`
	Tags                   map[string]string        `json:"tags,omitempty"`
	TechEmails             []TechEmailOut           `json:"tech_emails,omitempty"`
	TerminationProtection  bool                     `json:"termination_protection"`
	Topics                 []TopicOut               `json:"topics,omitempty"`
	UpdateTime             time.Time                `json:"update_time"`
	UserConfig             map[string]any           `json:"user_config"`
	Users                  []UserOut                `json:"users,omitempty"`
}
type ServicePlanOut struct {
	BackupConfig     BackupConfigOut `json:"backup_config"`
	MaxMemoryPercent *int            `json:"max_memory_percent,omitempty"`
	NodeCount        *int            `json:"node_count,omitempty"`
	Regions          map[string]any  `json:"regions,omitempty"`
	ServicePlan      string          `json:"service_plan"`
	ServiceType      string          `json:"service_type"`
	ShardCount       *int            `json:"shard_count,omitempty"`
}
type ServiceQueryActivityIn struct {
	Limit   *int   `json:"limit,omitempty"`
	Offset  *int   `json:"offset,omitempty"`
	OrderBy string `json:"order_by,omitempty"`
}
type ServiceStateType string

const (
	ServiceStateTypePoweroff    ServiceStateType = "POWEROFF"
	ServiceStateTypeRebalancing ServiceStateType = "REBALANCING"
	ServiceStateTypeRebuilding  ServiceStateType = "REBUILDING"
	ServiceStateTypeRunning     ServiceStateType = "RUNNING"
)

func ServiceStateTypeChoices() []string {
	return []string{"POWEROFF", "REBALANCING", "REBUILDING", "RUNNING"}
}

type ServiceTaskCreateIn struct {
	DatasetImport  *DatasetImportIn  `json:"dataset_import,omitempty"`
	MigrationCheck *MigrationCheckIn `json:"migration_check,omitempty"`
	TargetVersion  TargetVersionType `json:"target_version,omitempty"`
	TaskType       TaskType          `json:"task_type"`
}
type ServiceTaskCreateOut struct {
	CreateTime  time.Time       `json:"create_time"`
	Result      string          `json:"result"`
	ResultCodes []ResultCodeOut `json:"result_codes,omitempty"`
	Success     bool            `json:"success"`
	TaskId      string          `json:"task_id"`
	TaskType    string          `json:"task_type"`
}
type ServiceTaskGetOut struct {
	CreateTime  time.Time       `json:"create_time"`
	Result      string          `json:"result"`
	ResultCodes []ResultCodeOut `json:"result_codes,omitempty"`
	Success     bool            `json:"success"`
	TaskId      string          `json:"task_id"`
	TaskType    string          `json:"task_type"`
}
type ServiceUpdateIn struct {
	Cloud                 string          `json:"cloud,omitempty"`
	DiskSpaceMb           *float64        `json:"disk_space_mb,omitempty"`
	GroupName             string          `json:"group_name,omitempty"`
	Karapace              *bool           `json:"karapace,omitempty"`
	Maintenance           *MaintenanceIn  `json:"maintenance,omitempty"`
	Plan                  string          `json:"plan,omitempty"`
	Powered               *bool           `json:"powered,omitempty"`
	ProjectVpcId          string          `json:"project_vpc_id,omitempty"`
	SchemaRegistryAuthz   *bool           `json:"schema_registry_authz,omitempty"`
	TechEmails            *[]TechEmailIn  `json:"tech_emails,omitempty"`
	TerminationProtection *bool           `json:"termination_protection,omitempty"`
	UserConfig            *map[string]any `json:"user_config,omitempty"`
}
type ServiceUpdateOut struct {
	Acl                    []AclOut                 `json:"acl,omitempty"`
	Backups                []BackupOut              `json:"backups,omitempty"`
	CloudDescription       string                   `json:"cloud_description,omitempty"`
	CloudName              string                   `json:"cloud_name"`
	Components             []ComponentOut           `json:"components,omitempty"`
	ConnectionInfo         map[string]any           `json:"connection_info,omitempty"`
	ConnectionPools        []ConnectionPoolOut      `json:"connection_pools,omitempty"`
	CreateTime             time.Time                `json:"create_time"`
	Databases              []string                 `json:"databases,omitempty"`
	DiskSpaceMb            *float64                 `json:"disk_space_mb,omitempty"`
	Features               map[string]any           `json:"features,omitempty"`
	GroupList              []string                 `json:"group_list"`
	Maintenance            *MaintenanceOut          `json:"maintenance,omitempty"`
	Metadata               map[string]any           `json:"metadata,omitempty"`
	NodeCount              *int                     `json:"node_count,omitempty"`
	NodeCpuCount           *int                     `json:"node_cpu_count,omitempty"`
	NodeMemoryMb           *float64                 `json:"node_memory_mb,omitempty"`
	NodeStates             []NodeStateOut           `json:"node_states,omitempty"`
	Plan                   string                   `json:"plan"`
	ProjectVpcId           string                   `json:"project_vpc_id"`
	SchemaRegistryAcl      []SchemaRegistryAclOut   `json:"schema_registry_acl,omitempty"`
	ServiceIntegrations    []ServiceIntegrationOut  `json:"service_integrations"`
	ServiceName            string                   `json:"service_name"`
	ServiceNotifications   []ServiceNotificationOut `json:"service_notifications,omitempty"`
	ServiceType            string                   `json:"service_type"`
	ServiceTypeDescription string                   `json:"service_type_description,omitempty"`
	ServiceUri             string                   `json:"service_uri"`
	ServiceUriParams       map[string]any           `json:"service_uri_params,omitempty"`
	State                  ServiceStateType         `json:"state"`
	Tags                   map[string]string        `json:"tags,omitempty"`
	TechEmails             []TechEmailOut           `json:"tech_emails,omitempty"`
	TerminationProtection  bool                     `json:"termination_protection"`
	Topics                 []TopicOut               `json:"topics,omitempty"`
	UpdateTime             time.Time                `json:"update_time"`
	UserConfig             map[string]any           `json:"user_config"`
	Users                  []UserOut                `json:"users,omitempty"`
}
type ServiceVersionOut struct {
	AivenEndOfLifeTime      *time.Time              `json:"aiven_end_of_life_time,omitempty"`
	AvailabilityEndTime     *time.Time              `json:"availability_end_time,omitempty"`
	AvailabilityStartTime   *time.Time              `json:"availability_start_time,omitempty"`
	EndOfLifeHelpArticleUrl string                  `json:"end_of_life_help_article_url,omitempty"`
	MajorVersion            string                  `json:"major_version,omitempty"`
	ServiceType             string                  `json:"service_type,omitempty"`
	State                   ServiceVersionStateType `json:"state,omitempty"`
	TerminationTime         *time.Time              `json:"termination_time,omitempty"`
	UpgradeToServiceType    string                  `json:"upgrade_to_service_type,omitempty"`
	UpgradeToVersion        string                  `json:"upgrade_to_version,omitempty"`
	UpstreamEndOfLifeTime   *time.Time              `json:"upstream_end_of_life_time,omitempty"`
}
type ServiceVersionStateType string

const (
	ServiceVersionStateTypeAvailable   ServiceVersionStateType = "available"
	ServiceVersionStateTypeEol         ServiceVersionStateType = "eol"
	ServiceVersionStateTypePreview     ServiceVersionStateType = "preview"
	ServiceVersionStateTypeTerminated  ServiceVersionStateType = "terminated"
	ServiceVersionStateTypeUnavailable ServiceVersionStateType = "unavailable"
)

func ServiceVersionStateTypeChoices() []string {
	return []string{"available", "eol", "preview", "terminated", "unavailable"}
}

type ShardOut struct {
	Name     string `json:"name,omitempty"`
	Position *int   `json:"position,omitempty"`
}
type SortOrderType string

const (
	SortOrderTypeDesc SortOrderType = "desc"
	SortOrderTypeAsc  SortOrderType = "asc"
)

func SortOrderTypeChoices() []string {
	return []string{"desc", "asc"}
}

type StateOut struct {
	Errors           []string              `json:"errors"`
	LikelyErrorCause LikelyErrorCauseType  `json:"likely_error_cause,omitempty"`
	Nodes            map[string]any        `json:"nodes"`
	Status           IntegrationStatusType `json:"status"`
}
type TargetVersionType string

const (
	TargetVersionType13 TargetVersionType = "13"
	TargetVersionType14 TargetVersionType = "14"
	TargetVersionType15 TargetVersionType = "15"
	TargetVersionType16 TargetVersionType = "16"
)

func TargetVersionTypeChoices() []string {
	return []string{"13", "14", "15", "16"}
}

type TaskType string

const (
	TaskTypeUpgradeCheck   TaskType = "upgrade_check"
	TaskTypeMigrationCheck TaskType = "migration_check"
	TaskTypeDatasetImport  TaskType = "dataset_import"
)

func TaskTypeChoices() []string {
	return []string{"upgrade_check", "migration_check", "dataset_import"}
}

type TechEmailIn struct {
	Email string `json:"email"`
}
type TechEmailOut struct {
	Email string `json:"email"`
}
type TopicOut struct {
	CleanupPolicy     string         `json:"cleanup_policy"`
	MinInsyncReplicas int            `json:"min_insync_replicas"`
	Partitions        int            `json:"partitions"`
	Replication       int            `json:"replication"`
	RetentionBytes    int            `json:"retention_bytes"`
	RetentionHours    int            `json:"retention_hours"`
	State             TopicStateType `json:"state,omitempty"`
	TopicName         string         `json:"topic_name"`
}
type TopicStateType string

const (
	TopicStateTypeActive      TopicStateType = "ACTIVE"
	TopicStateTypeConfiguring TopicStateType = "CONFIGURING"
	TopicStateTypeDeleting    TopicStateType = "DELETING"
)

func TopicStateTypeChoices() []string {
	return []string{"ACTIVE", "CONFIGURING", "DELETING"}
}

type UnitType string

const (
	UnitTypeBinlogs           UnitType = "binlogs"
	UnitTypeBytesCompressed   UnitType = "bytes_compressed"
	UnitTypeBytesUncompressed UnitType = "bytes_uncompressed"
	UnitTypeWalLsn            UnitType = "wal_lsn"
)

func UnitTypeChoices() []string {
	return []string{"binlogs", "bytes_compressed", "bytes_uncompressed", "wal_lsn"}
}

type UpdateOut struct {
	Deadline    string     `json:"deadline,omitempty"`
	Description string     `json:"description,omitempty"`
	StartAfter  string     `json:"start_after,omitempty"`
	StartAt     *time.Time `json:"start_at,omitempty"`
}
type UsageType string

const (
	UsageTypePrimary UsageType = "primary"
	UsageTypeReplica UsageType = "replica"
)

func UsageTypeChoices() []string {
	return []string{"primary", "replica"}
}

type UserOut struct {
	AccessCert                    string             `json:"access_cert,omitempty"`
	AccessCertNotValidAfterTime   *time.Time         `json:"access_cert_not_valid_after_time,omitempty"`
	AccessControl                 *AccessControlOut  `json:"access_control,omitempty"`
	AccessKey                     string             `json:"access_key,omitempty"`
	Authentication                AuthenticationType `json:"authentication,omitempty"`
	ExpiringCertNotValidAfterTime *time.Time         `json:"expiring_cert_not_valid_after_time,omitempty"`
	Password                      string             `json:"password"`
	Type                          string             `json:"type"`
	Username                      string             `json:"username"`
}
type listProjectServiceTypesOut struct {
	ServiceTypes ListProjectServiceTypesOut `json:"service_types"`
}
type listPublicServiceTypesOut struct {
	ServiceTypes ListPublicServiceTypesOut `json:"service_types"`
}
type listServiceVersionsOut struct {
	ServiceVersions []ServiceVersionOut `json:"service_versions"`
}
type projectServiceTagsListOut struct {
	Tags map[string]string `json:"tags,omitempty"`
}
type serviceAlertsListOut struct {
	Alerts []AlertOut `json:"alerts"`
}
type serviceBackupToAnotherRegionReportOut struct {
	Metrics map[string]any `json:"metrics"`
}
type serviceBackupsGetOut struct {
	Backups []BackupOut `json:"backups"`
}
type serviceCancelQueryOut struct {
	Success bool `json:"success"`
}
type serviceCreateOut struct {
	Service ServiceCreateOut `json:"service"`
}
type serviceDatabaseListOut struct {
	Databases []DatabaseOut `json:"databases"`
}
type serviceEnableWritesOut struct {
	Until string `json:"until,omitempty"`
}
type serviceGetOut struct {
	Service ServiceGetOut `json:"service"`
}
type serviceInfluxDbstatsOut struct {
	DbStats map[string]any `json:"db_stats"`
}
type serviceKmsGetCaOut struct {
	Certificate string `json:"certificate"`
}
type serviceListOut struct {
	Services []ServiceOut `json:"services"`
}
type serviceMetricsFetchOut struct {
	Metrics map[string]any `json:"metrics"`
}
type serviceQueryActivityOut struct {
	Queries []QueryOut `json:"queries"`
}
type serviceQueryStatisticsResetOut struct {
	Queries []map[string]any `json:"queries"`
}
type serviceTaskCreateOut struct {
	Task ServiceTaskCreateOut `json:"task"`
}
type serviceTaskGetOut struct {
	Task ServiceTaskGetOut `json:"task"`
}
type serviceUpdateOut struct {
	Service ServiceUpdateOut `json:"service"`
}
