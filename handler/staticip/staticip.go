// Code generated by Aiven. DO NOT EDIT.

package staticip

import (
	"context"
	"encoding/json"
	"fmt"
)

type Handler interface {
	// ProjectStaticIPAssociate associate a static IP address with a service
	// POST /project/{project}/static-ips/{static_ip_address_id}/association
	// https://api.aiven.io/doc/#tag/StaticIP/operation/ProjectStaticIPAssociate
	ProjectStaticIPAssociate(ctx context.Context, project string, staticIpAddressId string, in *ProjectStaticIpassociateIn) (*ProjectStaticIpassociateOut, error)

	// ProjectStaticIPAvailabilityList list static IP address cloud availability and prices for a project
	// GET /project/{project}/static-ip-availability
	// https://api.aiven.io/doc/#tag/StaticIP/operation/ProjectStaticIPAvailabilityList
	ProjectStaticIPAvailabilityList(ctx context.Context, project string) ([]StaticIpAddressAvailabilityOut, error)

	// ProjectStaticIPDissociate dissociate a static IP address from a service
	// DELETE /project/{project}/static-ips/{static_ip_address_id}/association
	// https://api.aiven.io/doc/#tag/StaticIP/operation/ProjectStaticIPDissociate
	ProjectStaticIPDissociate(ctx context.Context, project string, staticIpAddressId string) (*ProjectStaticIpdissociateOut, error)

	// ProjectStaticIPPatch update a static IP address configuration
	// PATCH /project/{project}/static-ips/{static_ip_address_id}
	// https://api.aiven.io/doc/#tag/StaticIP/operation/ProjectStaticIPPatch
	ProjectStaticIPPatch(ctx context.Context, project string, staticIpAddressId string, in *ProjectStaticIppatchIn) (*ProjectStaticIppatchOut, error)

	// PublicStaticIPAvailabilityList list static IP clouds and prices
	// GET /tenants/{tenant}/static-ip-availability
	// https://api.aiven.io/doc/#tag/Cloud_platforms/operation/PublicStaticIPAvailabilityList
	PublicStaticIPAvailabilityList(ctx context.Context, tenant string) ([]StaticIpAddressAvailabilityOut, error)

	// StaticIPCreate create static IP address
	// POST /project/{project}/static-ips
	// https://api.aiven.io/doc/#tag/StaticIP/operation/StaticIPCreate
	StaticIPCreate(ctx context.Context, project string, in *StaticIpcreateIn) (*StaticIpcreateOut, error)

	// StaticIPList list static IP addresses
	// GET /project/{project}/static-ips
	// https://api.aiven.io/doc/#tag/StaticIP/operation/StaticIPList
	StaticIPList(ctx context.Context, project string) ([]StaticIpOut, error)
}

func NewHandler(doer doer) StaticIPHandler {
	return StaticIPHandler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type StaticIPHandler struct {
	doer doer
}

func (h *StaticIPHandler) ProjectStaticIPAssociate(ctx context.Context, project string, staticIpAddressId string, in *ProjectStaticIpassociateIn) (*ProjectStaticIpassociateOut, error) {
	path := fmt.Sprintf("/project/%s/static-ips/%s/association", project, staticIpAddressId)
	b, err := h.doer.Do(ctx, "ProjectStaticIPAssociate", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(ProjectStaticIpassociateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *StaticIPHandler) ProjectStaticIPAvailabilityList(ctx context.Context, project string) ([]StaticIpAddressAvailabilityOut, error) {
	path := fmt.Sprintf("/project/%s/static-ip-availability", project)
	b, err := h.doer.Do(ctx, "ProjectStaticIPAvailabilityList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(projectStaticIpavailabilityListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.StaticIpAddressAvailability, nil
}
func (h *StaticIPHandler) ProjectStaticIPDissociate(ctx context.Context, project string, staticIpAddressId string) (*ProjectStaticIpdissociateOut, error) {
	path := fmt.Sprintf("/project/%s/static-ips/%s/association", project, staticIpAddressId)
	b, err := h.doer.Do(ctx, "ProjectStaticIPDissociate", "DELETE", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ProjectStaticIpdissociateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *StaticIPHandler) ProjectStaticIPPatch(ctx context.Context, project string, staticIpAddressId string, in *ProjectStaticIppatchIn) (*ProjectStaticIppatchOut, error) {
	path := fmt.Sprintf("/project/%s/static-ips/%s", project, staticIpAddressId)
	b, err := h.doer.Do(ctx, "ProjectStaticIPPatch", "PATCH", path, in)
	if err != nil {
		return nil, err
	}
	out := new(ProjectStaticIppatchOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *StaticIPHandler) PublicStaticIPAvailabilityList(ctx context.Context, tenant string) ([]StaticIpAddressAvailabilityOut, error) {
	path := fmt.Sprintf("/tenants/%s/static-ip-availability", tenant)
	b, err := h.doer.Do(ctx, "PublicStaticIPAvailabilityList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(publicStaticIpavailabilityListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.StaticIpAddressAvailability, nil
}
func (h *StaticIPHandler) StaticIPCreate(ctx context.Context, project string, in *StaticIpcreateIn) (*StaticIpcreateOut, error) {
	path := fmt.Sprintf("/project/%s/static-ips", project)
	b, err := h.doer.Do(ctx, "StaticIPCreate", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(StaticIpcreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *StaticIPHandler) StaticIPList(ctx context.Context, project string) ([]StaticIpOut, error) {
	path := fmt.Sprintf("/project/%s/static-ips", project)
	b, err := h.doer.Do(ctx, "StaticIPList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(staticIplistOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.StaticIps, nil
}

type ProjectStaticIpassociateIn struct {
	ServiceName string `json:"service_name"`
}
type ProjectStaticIpassociateOut struct {
	CloudName             string `json:"cloud_name"`
	IpAddress             string `json:"ip_address"`
	ServiceName           string `json:"service_name"`
	State                 string `json:"state"`
	StaticIpAddressId     string `json:"static_ip_address_id"`
	TerminationProtection bool   `json:"termination_protection"`
}
type ProjectStaticIpdissociateOut struct {
	CloudName             string `json:"cloud_name"`
	IpAddress             string `json:"ip_address"`
	ServiceName           string `json:"service_name"`
	State                 string `json:"state"`
	StaticIpAddressId     string `json:"static_ip_address_id"`
	TerminationProtection bool   `json:"termination_protection"`
}
type ProjectStaticIppatchIn struct {
	TerminationProtection *bool `json:"termination_protection,omitempty"`
}
type ProjectStaticIppatchOut struct {
	CloudName             string `json:"cloud_name"`
	IpAddress             string `json:"ip_address"`
	ServiceName           string `json:"service_name"`
	State                 string `json:"state"`
	StaticIpAddressId     string `json:"static_ip_address_id"`
	TerminationProtection bool   `json:"termination_protection"`
}
type StaticIpAddressAvailabilityOut struct {
	CloudName string `json:"cloud_name"`
	PriceUsd  string `json:"price_usd"`
}
type StaticIpOut struct {
	CloudName             string `json:"cloud_name"`
	IpAddress             string `json:"ip_address"`
	ServiceName           string `json:"service_name"`
	State                 string `json:"state"`
	StaticIpAddressId     string `json:"static_ip_address_id"`
	TerminationProtection bool   `json:"termination_protection"`
}
type StaticIpcreateIn struct {
	CloudName             string `json:"cloud_name"`
	TerminationProtection *bool  `json:"termination_protection,omitempty"`
}
type StaticIpcreateOut struct {
	CloudName             string `json:"cloud_name"`
	IpAddress             string `json:"ip_address"`
	ServiceName           string `json:"service_name"`
	State                 string `json:"state"`
	StaticIpAddressId     string `json:"static_ip_address_id"`
	TerminationProtection bool   `json:"termination_protection"`
}
type projectStaticIpavailabilityListOut struct {
	StaticIpAddressAvailability []StaticIpAddressAvailabilityOut `json:"static_ip_address_availability"`
}
type publicStaticIpavailabilityListOut struct {
	StaticIpAddressAvailability []StaticIpAddressAvailabilityOut `json:"static_ip_address_availability"`
}
type staticIplistOut struct {
	StaticIps []StaticIpOut `json:"static_ips"`
}
