// Code generated by Aiven. DO NOT EDIT.

package thanos

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
)

type Handler interface {
	// ServiceThanosStorageSummary get Thanos object storage summary
	// GET /v1/project/{project}/service/{service_name}/thanos/storage/summary
	// https://api.aiven.io/doc/#tag/Service:_Thanos/operation/ServiceThanosStorageSummary
	ServiceThanosStorageSummary(ctx context.Context, project string, serviceName string) (*ServiceThanosStorageSummaryOut, error)
}

// doer http client
type doer interface {
	Do(ctx context.Context, operationID, method, path string, in any, query ...[2]string) ([]byte, error)
}

func NewHandler(doer doer) ThanosHandler {
	return ThanosHandler{doer}
}

type ThanosHandler struct {
	doer doer
}

func (h *ThanosHandler) ServiceThanosStorageSummary(ctx context.Context, project string, serviceName string) (*ServiceThanosStorageSummaryOut, error) {
	path := fmt.Sprintf("/v1/project/%s/service/%s/thanos/storage/summary", url.PathEscape(project), url.PathEscape(serviceName))
	b, err := h.doer.Do(ctx, "ServiceThanosStorageSummary", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(ServiceThanosStorageSummaryOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type HourlyOut struct {
	EstimatedCost   *string `json:"estimated_cost,omitempty"` // The estimated cost in USD of tiered storage for this hour
	HourStart       string  `json:"hour_start"`               // Timestamp in ISO 8601 format, always in UTC
	PeakStoredBytes int     `json:"peak_stored_bytes"`        // Peak bytes stored on object storage at this hour
}

// ServiceThanosStorageSummaryOut ServiceThanosStorageSummaryResponse
type ServiceThanosStorageSummaryOut struct {
	CurrentCost         string                 `json:"current_cost"`              // The current cost in USD of tiered storage since the beginning of the billing period
	ForecastedCost      string                 `json:"forecasted_cost"`           // The forecasted cost in USD of tiered storage in the billing period
	ForecastedRate      *string                `json:"forecasted_rate,omitempty"` // The rate on GBs/hour used to calculate the forecasted cost
	StorageUsageHistory StorageUsageHistoryOut `json:"storage_usage_history"`     // History of usage and cumulative costs in the billing period
	TotalStorageUsage   int                    `json:"total_storage_usage"`       // Total storage usage by tiered storage, in bytes
}

// StorageUsageHistoryOut History of usage and cumulative costs in the billing period
type StorageUsageHistoryOut struct {
	Hourly []HourlyOut `json:"hourly"` // History by hour
}
