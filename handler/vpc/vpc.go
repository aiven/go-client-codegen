// Code generated by Aiven. DO NOT EDIT.

package vpc

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

type Handler interface {
	// VpcCreate create a VPC in a cloud for the project
	// POST /project/{project}/vpcs
	// https://api.aiven.io/doc/#tag/Project/operation/VpcCreate
	VpcCreate(ctx context.Context, project string, in *VpcCreateIn) (*VpcCreateOut, error)

	// VpcDelete delete a project VPC
	// DELETE /project/{project}/vpcs/{project_vpc_id}
	// https://api.aiven.io/doc/#tag/Project/operation/VpcDelete
	VpcDelete(ctx context.Context, project string, projectVpcId string) (*VpcDeleteOut, error)

	// VpcGet get VPC information
	// GET /project/{project}/vpcs/{project_vpc_id}
	// https://api.aiven.io/doc/#tag/Project/operation/VpcGet
	VpcGet(ctx context.Context, project string, projectVpcId string) (*VpcGetOut, error)

	// VpcList list VPCs for a project
	// GET /project/{project}/vpcs
	// https://api.aiven.io/doc/#tag/Project/operation/VpcList
	VpcList(ctx context.Context, project string) ([]VpcOut, error)

	// VpcPeeringConnectionCreate create a peering connection for a project VPC
	// POST /project/{project}/vpcs/{project_vpc_id}/peering-connections
	// https://api.aiven.io/doc/#tag/Project/operation/VpcPeeringConnectionCreate
	VpcPeeringConnectionCreate(ctx context.Context, project string, projectVpcId string, in *VpcPeeringConnectionCreateIn) (*VpcPeeringConnectionCreateOut, error)

	// VpcPeeringConnectionDelete delete a peering connection for a project VPC
	// DELETE /project/{project}/vpcs/{project_vpc_id}/peering-connections/peer-accounts/{peer_cloud_account}/peer-vpcs/{peer_vpc}
	// https://api.aiven.io/doc/#tag/Project/operation/VpcPeeringConnectionDelete
	VpcPeeringConnectionDelete(ctx context.Context, project string, projectVpcId string, peerCloudAccount string, peerVpc string) (*VpcPeeringConnectionDeleteOut, error)

	// VpcPeeringConnectionUpdate update user-defined peer network CIDRs for a project VPC
	// PUT /project/{project}/vpcs/{project_vpc_id}/user-peer-network-cidrs
	// https://api.aiven.io/doc/#tag/Project/operation/VpcPeeringConnectionUpdate
	VpcPeeringConnectionUpdate(ctx context.Context, project string, projectVpcId string, in *VpcPeeringConnectionUpdateIn) (*VpcPeeringConnectionUpdateOut, error)

	// VpcPeeringConnectionWithRegionDelete delete a peering connection for a project VPC
	// DELETE /project/{project}/vpcs/{project_vpc_id}/peering-connections/peer-accounts/{peer_cloud_account}/peer-vpcs/{peer_vpc}/peer-regions/{peer_region}
	// https://api.aiven.io/doc/#tag/Project/operation/VpcPeeringConnectionWithRegionDelete
	VpcPeeringConnectionWithRegionDelete(ctx context.Context, project string, projectVpcId string, peerCloudAccount string, peerVpc string, peerRegion string) (*VpcPeeringConnectionWithRegionDeleteOut, error)

	// VpcPeeringConnectionWithResourceGroupDelete delete a peering connection for a project VPC
	// DELETE /project/{project}/vpcs/{project_vpc_id}/peering-connections/peer-accounts/{peer_cloud_account}/peer-resource-groups/{peer_resource_group}/peer-vpcs/{peer_vpc}
	// https://api.aiven.io/doc/#tag/Project/operation/VpcPeeringConnectionWithResourceGroupDelete
	VpcPeeringConnectionWithResourceGroupDelete(ctx context.Context, project string, projectVpcId string, peerCloudAccount string, peerResourceGroup string, peerVpc string) (*VpcPeeringConnectionWithResourceGroupDeleteOut, error)
}

func NewHandler(doer doer) VpcHandler {
	return VpcHandler{doer}
}

type doer interface {
	Do(ctx context.Context, operationID, method, path string, v any) ([]byte, error)
}

type VpcHandler struct {
	doer doer
}

func (h *VpcHandler) VpcCreate(ctx context.Context, project string, in *VpcCreateIn) (*VpcCreateOut, error) {
	path := fmt.Sprintf("/project/%s/vpcs", project)
	b, err := h.doer.Do(ctx, "VpcCreate", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(VpcCreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *VpcHandler) VpcDelete(ctx context.Context, project string, projectVpcId string) (*VpcDeleteOut, error) {
	path := fmt.Sprintf("/project/%s/vpcs/%s", project, projectVpcId)
	b, err := h.doer.Do(ctx, "VpcDelete", "DELETE", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(VpcDeleteOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *VpcHandler) VpcGet(ctx context.Context, project string, projectVpcId string) (*VpcGetOut, error) {
	path := fmt.Sprintf("/project/%s/vpcs/%s", project, projectVpcId)
	b, err := h.doer.Do(ctx, "VpcGet", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(VpcGetOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *VpcHandler) VpcList(ctx context.Context, project string) ([]VpcOut, error) {
	path := fmt.Sprintf("/project/%s/vpcs", project)
	b, err := h.doer.Do(ctx, "VpcList", "GET", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(vpcListOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out.Vpcs, nil
}
func (h *VpcHandler) VpcPeeringConnectionCreate(ctx context.Context, project string, projectVpcId string, in *VpcPeeringConnectionCreateIn) (*VpcPeeringConnectionCreateOut, error) {
	path := fmt.Sprintf("/project/%s/vpcs/%s/peering-connections", project, projectVpcId)
	b, err := h.doer.Do(ctx, "VpcPeeringConnectionCreate", "POST", path, in)
	if err != nil {
		return nil, err
	}
	out := new(VpcPeeringConnectionCreateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *VpcHandler) VpcPeeringConnectionDelete(ctx context.Context, project string, projectVpcId string, peerCloudAccount string, peerVpc string) (*VpcPeeringConnectionDeleteOut, error) {
	path := fmt.Sprintf("/project/%s/vpcs/%s/peering-connections/peer-accounts/%s/peer-vpcs/%s", project, projectVpcId, peerCloudAccount, peerVpc)
	b, err := h.doer.Do(ctx, "VpcPeeringConnectionDelete", "DELETE", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(VpcPeeringConnectionDeleteOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *VpcHandler) VpcPeeringConnectionUpdate(ctx context.Context, project string, projectVpcId string, in *VpcPeeringConnectionUpdateIn) (*VpcPeeringConnectionUpdateOut, error) {
	path := fmt.Sprintf("/project/%s/vpcs/%s/user-peer-network-cidrs", project, projectVpcId)
	b, err := h.doer.Do(ctx, "VpcPeeringConnectionUpdate", "PUT", path, in)
	if err != nil {
		return nil, err
	}
	out := new(VpcPeeringConnectionUpdateOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *VpcHandler) VpcPeeringConnectionWithRegionDelete(ctx context.Context, project string, projectVpcId string, peerCloudAccount string, peerVpc string, peerRegion string) (*VpcPeeringConnectionWithRegionDeleteOut, error) {
	path := fmt.Sprintf("/project/%s/vpcs/%s/peering-connections/peer-accounts/%s/peer-vpcs/%s/peer-regions/%s", project, projectVpcId, peerCloudAccount, peerVpc, peerRegion)
	b, err := h.doer.Do(ctx, "VpcPeeringConnectionWithRegionDelete", "DELETE", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(VpcPeeringConnectionWithRegionDeleteOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (h *VpcHandler) VpcPeeringConnectionWithResourceGroupDelete(ctx context.Context, project string, projectVpcId string, peerCloudAccount string, peerResourceGroup string, peerVpc string) (*VpcPeeringConnectionWithResourceGroupDeleteOut, error) {
	path := fmt.Sprintf("/project/%s/vpcs/%s/peering-connections/peer-accounts/%s/peer-resource-groups/%s/peer-vpcs/%s", project, projectVpcId, peerCloudAccount, peerResourceGroup, peerVpc)
	b, err := h.doer.Do(ctx, "VpcPeeringConnectionWithResourceGroupDelete", "DELETE", path, nil)
	if err != nil {
		return nil, err
	}
	out := new(VpcPeeringConnectionWithResourceGroupDeleteOut)
	err = json.Unmarshal(b, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type AddIn struct {
	Cidr              string `json:"cidr"`
	PeerCloudAccount  string `json:"peer_cloud_account"`
	PeerResourceGroup string `json:"peer_resource_group,omitempty"`
	PeerVpc           string `json:"peer_vpc"`
}
type PeeringConnectionIn struct {
	PeerAzureAppId       string    `json:"peer_azure_app_id,omitempty"`
	PeerAzureTenantId    string    `json:"peer_azure_tenant_id,omitempty"`
	PeerCloudAccount     string    `json:"peer_cloud_account"`
	PeerRegion           string    `json:"peer_region,omitempty"`
	PeerResourceGroup    string    `json:"peer_resource_group,omitempty"`
	PeerVpc              string    `json:"peer_vpc"`
	UserPeerNetworkCidrs *[]string `json:"user_peer_network_cidrs,omitempty"`
}
type PeeringConnectionOut struct {
	CreateTime               time.Time    `json:"create_time"`
	PeerAzureAppId           string       `json:"peer_azure_app_id"`
	PeerAzureTenantId        string       `json:"peer_azure_tenant_id"`
	PeerCloudAccount         string       `json:"peer_cloud_account"`
	PeerRegion               string       `json:"peer_region,omitempty"`
	PeerResourceGroup        string       `json:"peer_resource_group"`
	PeerVpc                  string       `json:"peer_vpc"`
	State                    string       `json:"state"`
	StateInfo                StateInfoOut `json:"state_info"`
	UpdateTime               time.Time    `json:"update_time"`
	UserPeerNetworkCidrs     []string     `json:"user_peer_network_cidrs"`
	VpcPeeringConnectionType string       `json:"vpc_peering_connection_type"`
}
type StateInfoOut struct {
	Message  string       `json:"message"`
	Type     string       `json:"type"`
	Warnings []WarningOut `json:"warnings,omitempty"`
}
type VpcCreateIn struct {
	CloudName          string                `json:"cloud_name"`
	NetworkCidr        string                `json:"network_cidr"`
	PeeringConnections []PeeringConnectionIn `json:"peering_connections"`
}
type VpcCreateOut struct {
	CloudName                          string                 `json:"cloud_name"`
	CreateTime                         time.Time              `json:"create_time"`
	NetworkCidr                        string                 `json:"network_cidr"`
	PeeringConnections                 []PeeringConnectionOut `json:"peering_connections"`
	PendingBuildOnlyPeeringConnections string                 `json:"pending_build_only_peering_connections,omitempty"`
	ProjectVpcId                       string                 `json:"project_vpc_id"`
	State                              string                 `json:"state"`
	UpdateTime                         time.Time              `json:"update_time"`
}
type VpcDeleteOut struct {
	CloudName                          string                 `json:"cloud_name"`
	CreateTime                         time.Time              `json:"create_time"`
	NetworkCidr                        string                 `json:"network_cidr"`
	PeeringConnections                 []PeeringConnectionOut `json:"peering_connections"`
	PendingBuildOnlyPeeringConnections string                 `json:"pending_build_only_peering_connections,omitempty"`
	ProjectVpcId                       string                 `json:"project_vpc_id"`
	State                              string                 `json:"state"`
	UpdateTime                         time.Time              `json:"update_time"`
}
type VpcGetOut struct {
	CloudName                          string                 `json:"cloud_name"`
	CreateTime                         time.Time              `json:"create_time"`
	NetworkCidr                        string                 `json:"network_cidr"`
	PeeringConnections                 []PeeringConnectionOut `json:"peering_connections"`
	PendingBuildOnlyPeeringConnections string                 `json:"pending_build_only_peering_connections,omitempty"`
	ProjectVpcId                       string                 `json:"project_vpc_id"`
	State                              string                 `json:"state"`
	UpdateTime                         time.Time              `json:"update_time"`
}
type VpcOut struct {
	CloudName    string    `json:"cloud_name"`
	CreateTime   time.Time `json:"create_time"`
	NetworkCidr  string    `json:"network_cidr"`
	ProjectVpcId string    `json:"project_vpc_id"`
	State        string    `json:"state"`
	UpdateTime   time.Time `json:"update_time"`
}
type VpcPeeringConnectionCreateIn struct {
	PeerAzureAppId       string    `json:"peer_azure_app_id,omitempty"`
	PeerAzureTenantId    string    `json:"peer_azure_tenant_id,omitempty"`
	PeerCloudAccount     string    `json:"peer_cloud_account"`
	PeerRegion           string    `json:"peer_region,omitempty"`
	PeerResourceGroup    string    `json:"peer_resource_group,omitempty"`
	PeerVpc              string    `json:"peer_vpc"`
	UserPeerNetworkCidrs *[]string `json:"user_peer_network_cidrs,omitempty"`
}
type VpcPeeringConnectionCreateOut struct {
	CreateTime               time.Time    `json:"create_time"`
	PeerAzureAppId           string       `json:"peer_azure_app_id"`
	PeerAzureTenantId        string       `json:"peer_azure_tenant_id"`
	PeerCloudAccount         string       `json:"peer_cloud_account"`
	PeerRegion               string       `json:"peer_region,omitempty"`
	PeerResourceGroup        string       `json:"peer_resource_group"`
	PeerVpc                  string       `json:"peer_vpc"`
	State                    string       `json:"state"`
	StateInfo                StateInfoOut `json:"state_info"`
	UpdateTime               time.Time    `json:"update_time"`
	UserPeerNetworkCidrs     []string     `json:"user_peer_network_cidrs"`
	VpcPeeringConnectionType string       `json:"vpc_peering_connection_type"`
}
type VpcPeeringConnectionDeleteOut struct {
	CreateTime               time.Time    `json:"create_time"`
	PeerAzureAppId           string       `json:"peer_azure_app_id"`
	PeerAzureTenantId        string       `json:"peer_azure_tenant_id"`
	PeerCloudAccount         string       `json:"peer_cloud_account"`
	PeerRegion               string       `json:"peer_region,omitempty"`
	PeerResourceGroup        string       `json:"peer_resource_group"`
	PeerVpc                  string       `json:"peer_vpc"`
	State                    string       `json:"state"`
	StateInfo                StateInfoOut `json:"state_info"`
	UpdateTime               time.Time    `json:"update_time"`
	UserPeerNetworkCidrs     []string     `json:"user_peer_network_cidrs"`
	VpcPeeringConnectionType string       `json:"vpc_peering_connection_type"`
}
type VpcPeeringConnectionUpdateIn struct {
	Add    *[]AddIn  `json:"add,omitempty"`
	Delete *[]string `json:"delete,omitempty"`
}
type VpcPeeringConnectionUpdateOut struct {
	CloudName                          string                 `json:"cloud_name"`
	CreateTime                         time.Time              `json:"create_time"`
	NetworkCidr                        string                 `json:"network_cidr"`
	PeeringConnections                 []PeeringConnectionOut `json:"peering_connections"`
	PendingBuildOnlyPeeringConnections string                 `json:"pending_build_only_peering_connections,omitempty"`
	ProjectVpcId                       string                 `json:"project_vpc_id"`
	State                              string                 `json:"state"`
	UpdateTime                         time.Time              `json:"update_time"`
}
type VpcPeeringConnectionWithRegionDeleteOut struct {
	CreateTime               time.Time    `json:"create_time"`
	PeerAzureAppId           string       `json:"peer_azure_app_id"`
	PeerAzureTenantId        string       `json:"peer_azure_tenant_id"`
	PeerCloudAccount         string       `json:"peer_cloud_account"`
	PeerRegion               string       `json:"peer_region,omitempty"`
	PeerResourceGroup        string       `json:"peer_resource_group"`
	PeerVpc                  string       `json:"peer_vpc"`
	State                    string       `json:"state"`
	StateInfo                StateInfoOut `json:"state_info"`
	UpdateTime               time.Time    `json:"update_time"`
	UserPeerNetworkCidrs     []string     `json:"user_peer_network_cidrs"`
	VpcPeeringConnectionType string       `json:"vpc_peering_connection_type"`
}
type VpcPeeringConnectionWithResourceGroupDeleteOut struct {
	CreateTime               time.Time    `json:"create_time"`
	PeerAzureAppId           string       `json:"peer_azure_app_id"`
	PeerAzureTenantId        string       `json:"peer_azure_tenant_id"`
	PeerCloudAccount         string       `json:"peer_cloud_account"`
	PeerRegion               string       `json:"peer_region,omitempty"`
	PeerResourceGroup        string       `json:"peer_resource_group"`
	PeerVpc                  string       `json:"peer_vpc"`
	State                    string       `json:"state"`
	StateInfo                StateInfoOut `json:"state_info"`
	UpdateTime               time.Time    `json:"update_time"`
	UserPeerNetworkCidrs     []string     `json:"user_peer_network_cidrs"`
	VpcPeeringConnectionType string       `json:"vpc_peering_connection_type"`
}
type WarningOut struct {
	ConflictingAwsAccountId              string `json:"conflicting_aws_account_id,omitempty"`
	ConflictingAwsVpcId                  string `json:"conflicting_aws_vpc_id,omitempty"`
	ConflictingAwsVpcPeeringConnectionId string `json:"conflicting_aws_vpc_peering_connection_id,omitempty"`
	Message                              string `json:"message"`
	Type                                 string `json:"type"`
}
type vpcListOut struct {
	Vpcs []VpcOut `json:"vpcs"`
}
